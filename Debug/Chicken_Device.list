
C:\Users\malmal\Desktop\ARM\Projects_Atollic\Chicken_Device\Debug\Chicken_Device.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007144  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000450  08007258  08007258  00017258  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  080076a8  080076a8  000176a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  080076ac  080076ac  000176ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000080  20000000  080076b0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000000fc  20000080  08007730  00020080  2**2
                  ALLOC
  7 ._user_heap_stack 00000100  2000017c  08007730  0002017c  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
  9 .debug_info   0000791f  00000000  00000000  000200a9  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00001443  00000000  00000000  000279c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000b38  00000000  00000000  00028e10  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000a20  00000000  00000000  00029948  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00004614  00000000  00000000  0002a368  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00002a3f  00000000  00000000  0002e97c  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      0000007e  00000000  00000000  000313bb  2**0
                  CONTENTS, READONLY
 16 .debug_frame  00003378  00000000  00000000  0003143c  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .stabstr      0000003f  00000000  00000000  000347b4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000080 	.word	0x20000080
 800012c:	00000000 	.word	0x00000000
 8000130:	0800723c 	.word	0x0800723c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000084 	.word	0x20000084
 800014c:	0800723c 	.word	0x0800723c

08000150 <strcmp>:
 8000150:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000154:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000158:	2a01      	cmp	r2, #1
 800015a:	bf28      	it	cs
 800015c:	429a      	cmpcs	r2, r3
 800015e:	d0f7      	beq.n	8000150 <strcmp>
 8000160:	1ad0      	subs	r0, r2, r3
 8000162:	4770      	bx	lr

08000164 <strlen>:
 8000164:	4603      	mov	r3, r0
 8000166:	f813 2b01 	ldrb.w	r2, [r3], #1
 800016a:	2a00      	cmp	r2, #0
 800016c:	d1fb      	bne.n	8000166 <strlen+0x2>
 800016e:	1a18      	subs	r0, r3, r0
 8000170:	3801      	subs	r0, #1
 8000172:	4770      	bx	lr

08000174 <__aeabi_drsub>:
 8000174:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000178:	e002      	b.n	8000180 <__adddf3>
 800017a:	bf00      	nop

0800017c <__aeabi_dsub>:
 800017c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000180 <__adddf3>:
 8000180:	b530      	push	{r4, r5, lr}
 8000182:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000186:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800018a:	ea94 0f05 	teq	r4, r5
 800018e:	bf08      	it	eq
 8000190:	ea90 0f02 	teqeq	r0, r2
 8000194:	bf1f      	itttt	ne
 8000196:	ea54 0c00 	orrsne.w	ip, r4, r0
 800019a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800019e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001a2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001a6:	f000 80e2 	beq.w	800036e <__adddf3+0x1ee>
 80001aa:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001ae:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001b2:	bfb8      	it	lt
 80001b4:	426d      	neglt	r5, r5
 80001b6:	dd0c      	ble.n	80001d2 <__adddf3+0x52>
 80001b8:	442c      	add	r4, r5
 80001ba:	ea80 0202 	eor.w	r2, r0, r2
 80001be:	ea81 0303 	eor.w	r3, r1, r3
 80001c2:	ea82 0000 	eor.w	r0, r2, r0
 80001c6:	ea83 0101 	eor.w	r1, r3, r1
 80001ca:	ea80 0202 	eor.w	r2, r0, r2
 80001ce:	ea81 0303 	eor.w	r3, r1, r3
 80001d2:	2d36      	cmp	r5, #54	; 0x36
 80001d4:	bf88      	it	hi
 80001d6:	bd30      	pophi	{r4, r5, pc}
 80001d8:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001dc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001e0:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001e4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x70>
 80001ea:	4240      	negs	r0, r0
 80001ec:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001f0:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001f4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001f8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001fc:	d002      	beq.n	8000204 <__adddf3+0x84>
 80001fe:	4252      	negs	r2, r2
 8000200:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000204:	ea94 0f05 	teq	r4, r5
 8000208:	f000 80a7 	beq.w	800035a <__adddf3+0x1da>
 800020c:	f1a4 0401 	sub.w	r4, r4, #1
 8000210:	f1d5 0e20 	rsbs	lr, r5, #32
 8000214:	db0d      	blt.n	8000232 <__adddf3+0xb2>
 8000216:	fa02 fc0e 	lsl.w	ip, r2, lr
 800021a:	fa22 f205 	lsr.w	r2, r2, r5
 800021e:	1880      	adds	r0, r0, r2
 8000220:	f141 0100 	adc.w	r1, r1, #0
 8000224:	fa03 f20e 	lsl.w	r2, r3, lr
 8000228:	1880      	adds	r0, r0, r2
 800022a:	fa43 f305 	asr.w	r3, r3, r5
 800022e:	4159      	adcs	r1, r3
 8000230:	e00e      	b.n	8000250 <__adddf3+0xd0>
 8000232:	f1a5 0520 	sub.w	r5, r5, #32
 8000236:	f10e 0e20 	add.w	lr, lr, #32
 800023a:	2a01      	cmp	r2, #1
 800023c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000240:	bf28      	it	cs
 8000242:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000246:	fa43 f305 	asr.w	r3, r3, r5
 800024a:	18c0      	adds	r0, r0, r3
 800024c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000250:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000254:	d507      	bpl.n	8000266 <__adddf3+0xe6>
 8000256:	f04f 0e00 	mov.w	lr, #0
 800025a:	f1dc 0c00 	rsbs	ip, ip, #0
 800025e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000262:	eb6e 0101 	sbc.w	r1, lr, r1
 8000266:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800026a:	d31b      	bcc.n	80002a4 <__adddf3+0x124>
 800026c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000270:	d30c      	bcc.n	800028c <__adddf3+0x10c>
 8000272:	0849      	lsrs	r1, r1, #1
 8000274:	ea5f 0030 	movs.w	r0, r0, rrx
 8000278:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800027c:	f104 0401 	add.w	r4, r4, #1
 8000280:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000284:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000288:	f080 809a 	bcs.w	80003c0 <__adddf3+0x240>
 800028c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000290:	bf08      	it	eq
 8000292:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000296:	f150 0000 	adcs.w	r0, r0, #0
 800029a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800029e:	ea41 0105 	orr.w	r1, r1, r5
 80002a2:	bd30      	pop	{r4, r5, pc}
 80002a4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002a8:	4140      	adcs	r0, r0
 80002aa:	eb41 0101 	adc.w	r1, r1, r1
 80002ae:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80002b2:	f1a4 0401 	sub.w	r4, r4, #1
 80002b6:	d1e9      	bne.n	800028c <__adddf3+0x10c>
 80002b8:	f091 0f00 	teq	r1, #0
 80002bc:	bf04      	itt	eq
 80002be:	4601      	moveq	r1, r0
 80002c0:	2000      	moveq	r0, #0
 80002c2:	fab1 f381 	clz	r3, r1
 80002c6:	bf08      	it	eq
 80002c8:	3320      	addeq	r3, #32
 80002ca:	f1a3 030b 	sub.w	r3, r3, #11
 80002ce:	f1b3 0220 	subs.w	r2, r3, #32
 80002d2:	da0c      	bge.n	80002ee <__adddf3+0x16e>
 80002d4:	320c      	adds	r2, #12
 80002d6:	dd08      	ble.n	80002ea <__adddf3+0x16a>
 80002d8:	f102 0c14 	add.w	ip, r2, #20
 80002dc:	f1c2 020c 	rsb	r2, r2, #12
 80002e0:	fa01 f00c 	lsl.w	r0, r1, ip
 80002e4:	fa21 f102 	lsr.w	r1, r1, r2
 80002e8:	e00c      	b.n	8000304 <__adddf3+0x184>
 80002ea:	f102 0214 	add.w	r2, r2, #20
 80002ee:	bfd8      	it	le
 80002f0:	f1c2 0c20 	rsble	ip, r2, #32
 80002f4:	fa01 f102 	lsl.w	r1, r1, r2
 80002f8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002fc:	bfdc      	itt	le
 80002fe:	ea41 010c 	orrle.w	r1, r1, ip
 8000302:	4090      	lslle	r0, r2
 8000304:	1ae4      	subs	r4, r4, r3
 8000306:	bfa2      	ittt	ge
 8000308:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800030c:	4329      	orrge	r1, r5
 800030e:	bd30      	popge	{r4, r5, pc}
 8000310:	ea6f 0404 	mvn.w	r4, r4
 8000314:	3c1f      	subs	r4, #31
 8000316:	da1c      	bge.n	8000352 <__adddf3+0x1d2>
 8000318:	340c      	adds	r4, #12
 800031a:	dc0e      	bgt.n	800033a <__adddf3+0x1ba>
 800031c:	f104 0414 	add.w	r4, r4, #20
 8000320:	f1c4 0220 	rsb	r2, r4, #32
 8000324:	fa20 f004 	lsr.w	r0, r0, r4
 8000328:	fa01 f302 	lsl.w	r3, r1, r2
 800032c:	ea40 0003 	orr.w	r0, r0, r3
 8000330:	fa21 f304 	lsr.w	r3, r1, r4
 8000334:	ea45 0103 	orr.w	r1, r5, r3
 8000338:	bd30      	pop	{r4, r5, pc}
 800033a:	f1c4 040c 	rsb	r4, r4, #12
 800033e:	f1c4 0220 	rsb	r2, r4, #32
 8000342:	fa20 f002 	lsr.w	r0, r0, r2
 8000346:	fa01 f304 	lsl.w	r3, r1, r4
 800034a:	ea40 0003 	orr.w	r0, r0, r3
 800034e:	4629      	mov	r1, r5
 8000350:	bd30      	pop	{r4, r5, pc}
 8000352:	fa21 f004 	lsr.w	r0, r1, r4
 8000356:	4629      	mov	r1, r5
 8000358:	bd30      	pop	{r4, r5, pc}
 800035a:	f094 0f00 	teq	r4, #0
 800035e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000362:	bf06      	itte	eq
 8000364:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000368:	3401      	addeq	r4, #1
 800036a:	3d01      	subne	r5, #1
 800036c:	e74e      	b.n	800020c <__adddf3+0x8c>
 800036e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000372:	bf18      	it	ne
 8000374:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000378:	d029      	beq.n	80003ce <__adddf3+0x24e>
 800037a:	ea94 0f05 	teq	r4, r5
 800037e:	bf08      	it	eq
 8000380:	ea90 0f02 	teqeq	r0, r2
 8000384:	d005      	beq.n	8000392 <__adddf3+0x212>
 8000386:	ea54 0c00 	orrs.w	ip, r4, r0
 800038a:	bf04      	itt	eq
 800038c:	4619      	moveq	r1, r3
 800038e:	4610      	moveq	r0, r2
 8000390:	bd30      	pop	{r4, r5, pc}
 8000392:	ea91 0f03 	teq	r1, r3
 8000396:	bf1e      	ittt	ne
 8000398:	2100      	movne	r1, #0
 800039a:	2000      	movne	r0, #0
 800039c:	bd30      	popne	{r4, r5, pc}
 800039e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003a2:	d105      	bne.n	80003b0 <__adddf3+0x230>
 80003a4:	0040      	lsls	r0, r0, #1
 80003a6:	4149      	adcs	r1, r1
 80003a8:	bf28      	it	cs
 80003aa:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003b4:	bf3c      	itt	cc
 80003b6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003ba:	bd30      	popcc	{r4, r5, pc}
 80003bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003c0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003c4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003c8:	f04f 0000 	mov.w	r0, #0
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d2:	bf1a      	itte	ne
 80003d4:	4619      	movne	r1, r3
 80003d6:	4610      	movne	r0, r2
 80003d8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003dc:	bf1c      	itt	ne
 80003de:	460b      	movne	r3, r1
 80003e0:	4602      	movne	r2, r0
 80003e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003e6:	bf06      	itte	eq
 80003e8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003ec:	ea91 0f03 	teqeq	r1, r3
 80003f0:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	bf00      	nop

080003f8 <__aeabi_ui2d>:
 80003f8:	f090 0f00 	teq	r0, #0
 80003fc:	bf04      	itt	eq
 80003fe:	2100      	moveq	r1, #0
 8000400:	4770      	bxeq	lr
 8000402:	b530      	push	{r4, r5, lr}
 8000404:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000408:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800040c:	f04f 0500 	mov.w	r5, #0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e750      	b.n	80002b8 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_i2d>:
 8000418:	f090 0f00 	teq	r0, #0
 800041c:	bf04      	itt	eq
 800041e:	2100      	moveq	r1, #0
 8000420:	4770      	bxeq	lr
 8000422:	b530      	push	{r4, r5, lr}
 8000424:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000428:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800042c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000430:	bf48      	it	mi
 8000432:	4240      	negmi	r0, r0
 8000434:	f04f 0100 	mov.w	r1, #0
 8000438:	e73e      	b.n	80002b8 <__adddf3+0x138>
 800043a:	bf00      	nop

0800043c <__aeabi_f2d>:
 800043c:	0042      	lsls	r2, r0, #1
 800043e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000442:	ea4f 0131 	mov.w	r1, r1, rrx
 8000446:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800044a:	bf1f      	itttt	ne
 800044c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000450:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000454:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000458:	4770      	bxne	lr
 800045a:	f092 0f00 	teq	r2, #0
 800045e:	bf14      	ite	ne
 8000460:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 7460 	mov.w	r4, #896	; 0x380
 800046c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000470:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000474:	e720      	b.n	80002b8 <__adddf3+0x138>
 8000476:	bf00      	nop

08000478 <__aeabi_ul2d>:
 8000478:	ea50 0201 	orrs.w	r2, r0, r1
 800047c:	bf08      	it	eq
 800047e:	4770      	bxeq	lr
 8000480:	b530      	push	{r4, r5, lr}
 8000482:	f04f 0500 	mov.w	r5, #0
 8000486:	e00a      	b.n	800049e <__aeabi_l2d+0x16>

08000488 <__aeabi_l2d>:
 8000488:	ea50 0201 	orrs.w	r2, r0, r1
 800048c:	bf08      	it	eq
 800048e:	4770      	bxeq	lr
 8000490:	b530      	push	{r4, r5, lr}
 8000492:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000496:	d502      	bpl.n	800049e <__aeabi_l2d+0x16>
 8000498:	4240      	negs	r0, r0
 800049a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800049e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004a2:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004a6:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004aa:	f43f aedc 	beq.w	8000266 <__adddf3+0xe6>
 80004ae:	f04f 0203 	mov.w	r2, #3
 80004b2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b6:	bf18      	it	ne
 80004b8:	3203      	addne	r2, #3
 80004ba:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004be:	bf18      	it	ne
 80004c0:	3203      	addne	r2, #3
 80004c2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004c6:	f1c2 0320 	rsb	r3, r2, #32
 80004ca:	fa00 fc03 	lsl.w	ip, r0, r3
 80004ce:	fa20 f002 	lsr.w	r0, r0, r2
 80004d2:	fa01 fe03 	lsl.w	lr, r1, r3
 80004d6:	ea40 000e 	orr.w	r0, r0, lr
 80004da:	fa21 f102 	lsr.w	r1, r1, r2
 80004de:	4414      	add	r4, r2
 80004e0:	e6c1      	b.n	8000266 <__adddf3+0xe6>
 80004e2:	bf00      	nop

080004e4 <__aeabi_dmul>:
 80004e4:	b570      	push	{r4, r5, r6, lr}
 80004e6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ea:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004f2:	bf1d      	ittte	ne
 80004f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004f8:	ea94 0f0c 	teqne	r4, ip
 80004fc:	ea95 0f0c 	teqne	r5, ip
 8000500:	f000 f8de 	bleq	80006c0 <__aeabi_dmul+0x1dc>
 8000504:	442c      	add	r4, r5
 8000506:	ea81 0603 	eor.w	r6, r1, r3
 800050a:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800050e:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000512:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000516:	bf18      	it	ne
 8000518:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 800051c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000520:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000524:	d038      	beq.n	8000598 <__aeabi_dmul+0xb4>
 8000526:	fba0 ce02 	umull	ip, lr, r0, r2
 800052a:	f04f 0500 	mov.w	r5, #0
 800052e:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000532:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000536:	fbe0 e503 	umlal	lr, r5, r0, r3
 800053a:	f04f 0600 	mov.w	r6, #0
 800053e:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000542:	f09c 0f00 	teq	ip, #0
 8000546:	bf18      	it	ne
 8000548:	f04e 0e01 	orrne.w	lr, lr, #1
 800054c:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000550:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000554:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000558:	d204      	bcs.n	8000564 <__aeabi_dmul+0x80>
 800055a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800055e:	416d      	adcs	r5, r5
 8000560:	eb46 0606 	adc.w	r6, r6, r6
 8000564:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000568:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 800056c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000570:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000574:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000578:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800057c:	bf88      	it	hi
 800057e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000582:	d81e      	bhi.n	80005c2 <__aeabi_dmul+0xde>
 8000584:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000588:	bf08      	it	eq
 800058a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800058e:	f150 0000 	adcs.w	r0, r0, #0
 8000592:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000596:	bd70      	pop	{r4, r5, r6, pc}
 8000598:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 800059c:	ea46 0101 	orr.w	r1, r6, r1
 80005a0:	ea40 0002 	orr.w	r0, r0, r2
 80005a4:	ea81 0103 	eor.w	r1, r1, r3
 80005a8:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005ac:	bfc2      	ittt	gt
 80005ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005b6:	bd70      	popgt	{r4, r5, r6, pc}
 80005b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005bc:	f04f 0e00 	mov.w	lr, #0
 80005c0:	3c01      	subs	r4, #1
 80005c2:	f300 80ab 	bgt.w	800071c <__aeabi_dmul+0x238>
 80005c6:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ca:	bfde      	ittt	le
 80005cc:	2000      	movle	r0, #0
 80005ce:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005d2:	bd70      	pople	{r4, r5, r6, pc}
 80005d4:	f1c4 0400 	rsb	r4, r4, #0
 80005d8:	3c20      	subs	r4, #32
 80005da:	da35      	bge.n	8000648 <__aeabi_dmul+0x164>
 80005dc:	340c      	adds	r4, #12
 80005de:	dc1b      	bgt.n	8000618 <__aeabi_dmul+0x134>
 80005e0:	f104 0414 	add.w	r4, r4, #20
 80005e4:	f1c4 0520 	rsb	r5, r4, #32
 80005e8:	fa00 f305 	lsl.w	r3, r0, r5
 80005ec:	fa20 f004 	lsr.w	r0, r0, r4
 80005f0:	fa01 f205 	lsl.w	r2, r1, r5
 80005f4:	ea40 0002 	orr.w	r0, r0, r2
 80005f8:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005fc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000600:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000604:	fa21 f604 	lsr.w	r6, r1, r4
 8000608:	eb42 0106 	adc.w	r1, r2, r6
 800060c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000610:	bf08      	it	eq
 8000612:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000616:	bd70      	pop	{r4, r5, r6, pc}
 8000618:	f1c4 040c 	rsb	r4, r4, #12
 800061c:	f1c4 0520 	rsb	r5, r4, #32
 8000620:	fa00 f304 	lsl.w	r3, r0, r4
 8000624:	fa20 f005 	lsr.w	r0, r0, r5
 8000628:	fa01 f204 	lsl.w	r2, r1, r4
 800062c:	ea40 0002 	orr.w	r0, r0, r2
 8000630:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000634:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000638:	f141 0100 	adc.w	r1, r1, #0
 800063c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000640:	bf08      	it	eq
 8000642:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000646:	bd70      	pop	{r4, r5, r6, pc}
 8000648:	f1c4 0520 	rsb	r5, r4, #32
 800064c:	fa00 f205 	lsl.w	r2, r0, r5
 8000650:	ea4e 0e02 	orr.w	lr, lr, r2
 8000654:	fa20 f304 	lsr.w	r3, r0, r4
 8000658:	fa01 f205 	lsl.w	r2, r1, r5
 800065c:	ea43 0302 	orr.w	r3, r3, r2
 8000660:	fa21 f004 	lsr.w	r0, r1, r4
 8000664:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000668:	fa21 f204 	lsr.w	r2, r1, r4
 800066c:	ea20 0002 	bic.w	r0, r0, r2
 8000670:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000674:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000678:	bf08      	it	eq
 800067a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800067e:	bd70      	pop	{r4, r5, r6, pc}
 8000680:	f094 0f00 	teq	r4, #0
 8000684:	d10f      	bne.n	80006a6 <__aeabi_dmul+0x1c2>
 8000686:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800068a:	0040      	lsls	r0, r0, #1
 800068c:	eb41 0101 	adc.w	r1, r1, r1
 8000690:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000694:	bf08      	it	eq
 8000696:	3c01      	subeq	r4, #1
 8000698:	d0f7      	beq.n	800068a <__aeabi_dmul+0x1a6>
 800069a:	ea41 0106 	orr.w	r1, r1, r6
 800069e:	f095 0f00 	teq	r5, #0
 80006a2:	bf18      	it	ne
 80006a4:	4770      	bxne	lr
 80006a6:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006aa:	0052      	lsls	r2, r2, #1
 80006ac:	eb43 0303 	adc.w	r3, r3, r3
 80006b0:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006b4:	bf08      	it	eq
 80006b6:	3d01      	subeq	r5, #1
 80006b8:	d0f7      	beq.n	80006aa <__aeabi_dmul+0x1c6>
 80006ba:	ea43 0306 	orr.w	r3, r3, r6
 80006be:	4770      	bx	lr
 80006c0:	ea94 0f0c 	teq	r4, ip
 80006c4:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006c8:	bf18      	it	ne
 80006ca:	ea95 0f0c 	teqne	r5, ip
 80006ce:	d00c      	beq.n	80006ea <__aeabi_dmul+0x206>
 80006d0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d4:	bf18      	it	ne
 80006d6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006da:	d1d1      	bne.n	8000680 <__aeabi_dmul+0x19c>
 80006dc:	ea81 0103 	eor.w	r1, r1, r3
 80006e0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006e4:	f04f 0000 	mov.w	r0, #0
 80006e8:	bd70      	pop	{r4, r5, r6, pc}
 80006ea:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006ee:	bf06      	itte	eq
 80006f0:	4610      	moveq	r0, r2
 80006f2:	4619      	moveq	r1, r3
 80006f4:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006f8:	d019      	beq.n	800072e <__aeabi_dmul+0x24a>
 80006fa:	ea94 0f0c 	teq	r4, ip
 80006fe:	d102      	bne.n	8000706 <__aeabi_dmul+0x222>
 8000700:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000704:	d113      	bne.n	800072e <__aeabi_dmul+0x24a>
 8000706:	ea95 0f0c 	teq	r5, ip
 800070a:	d105      	bne.n	8000718 <__aeabi_dmul+0x234>
 800070c:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000710:	bf1c      	itt	ne
 8000712:	4610      	movne	r0, r2
 8000714:	4619      	movne	r1, r3
 8000716:	d10a      	bne.n	800072e <__aeabi_dmul+0x24a>
 8000718:	ea81 0103 	eor.w	r1, r1, r3
 800071c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000720:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000724:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000728:	f04f 0000 	mov.w	r0, #0
 800072c:	bd70      	pop	{r4, r5, r6, pc}
 800072e:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000732:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000736:	bd70      	pop	{r4, r5, r6, pc}

08000738 <__aeabi_ddiv>:
 8000738:	b570      	push	{r4, r5, r6, lr}
 800073a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800073e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000742:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000746:	bf1d      	ittte	ne
 8000748:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800074c:	ea94 0f0c 	teqne	r4, ip
 8000750:	ea95 0f0c 	teqne	r5, ip
 8000754:	f000 f8a7 	bleq	80008a6 <__aeabi_ddiv+0x16e>
 8000758:	eba4 0405 	sub.w	r4, r4, r5
 800075c:	ea81 0e03 	eor.w	lr, r1, r3
 8000760:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000764:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000768:	f000 8088 	beq.w	800087c <__aeabi_ddiv+0x144>
 800076c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000770:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000774:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000778:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 800077c:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000780:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000784:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000788:	ea4f 2600 	mov.w	r6, r0, lsl #8
 800078c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000790:	429d      	cmp	r5, r3
 8000792:	bf08      	it	eq
 8000794:	4296      	cmpeq	r6, r2
 8000796:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800079a:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800079e:	d202      	bcs.n	80007a6 <__aeabi_ddiv+0x6e>
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	1ab6      	subs	r6, r6, r2
 80007a8:	eb65 0503 	sbc.w	r5, r5, r3
 80007ac:	085b      	lsrs	r3, r3, #1
 80007ae:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b2:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007b6:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ba:	ebb6 0e02 	subs.w	lr, r6, r2
 80007be:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007c2:	bf22      	ittt	cs
 80007c4:	1ab6      	subcs	r6, r6, r2
 80007c6:	4675      	movcs	r5, lr
 80007c8:	ea40 000c 	orrcs.w	r0, r0, ip
 80007cc:	085b      	lsrs	r3, r3, #1
 80007ce:	ea4f 0232 	mov.w	r2, r2, rrx
 80007d2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007da:	bf22      	ittt	cs
 80007dc:	1ab6      	subcs	r6, r6, r2
 80007de:	4675      	movcs	r5, lr
 80007e0:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007e4:	085b      	lsrs	r3, r3, #1
 80007e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ea:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ee:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007f2:	bf22      	ittt	cs
 80007f4:	1ab6      	subcs	r6, r6, r2
 80007f6:	4675      	movcs	r5, lr
 80007f8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	ebb6 0e02 	subs.w	lr, r6, r2
 8000806:	eb75 0e03 	sbcs.w	lr, r5, r3
 800080a:	bf22      	ittt	cs
 800080c:	1ab6      	subcs	r6, r6, r2
 800080e:	4675      	movcs	r5, lr
 8000810:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000814:	ea55 0e06 	orrs.w	lr, r5, r6
 8000818:	d018      	beq.n	800084c <__aeabi_ddiv+0x114>
 800081a:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800081e:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000822:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000826:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800082a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800082e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000832:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000836:	d1c0      	bne.n	80007ba <__aeabi_ddiv+0x82>
 8000838:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800083c:	d10b      	bne.n	8000856 <__aeabi_ddiv+0x11e>
 800083e:	ea41 0100 	orr.w	r1, r1, r0
 8000842:	f04f 0000 	mov.w	r0, #0
 8000846:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800084a:	e7b6      	b.n	80007ba <__aeabi_ddiv+0x82>
 800084c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000850:	bf04      	itt	eq
 8000852:	4301      	orreq	r1, r0
 8000854:	2000      	moveq	r0, #0
 8000856:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800085a:	bf88      	it	hi
 800085c:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000860:	f63f aeaf 	bhi.w	80005c2 <__aeabi_dmul+0xde>
 8000864:	ebb5 0c03 	subs.w	ip, r5, r3
 8000868:	bf04      	itt	eq
 800086a:	ebb6 0c02 	subseq.w	ip, r6, r2
 800086e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000872:	f150 0000 	adcs.w	r0, r0, #0
 8000876:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800087a:	bd70      	pop	{r4, r5, r6, pc}
 800087c:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000880:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000884:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000888:	bfc2      	ittt	gt
 800088a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800088e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000892:	bd70      	popgt	{r4, r5, r6, pc}
 8000894:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000898:	f04f 0e00 	mov.w	lr, #0
 800089c:	3c01      	subs	r4, #1
 800089e:	e690      	b.n	80005c2 <__aeabi_dmul+0xde>
 80008a0:	ea45 0e06 	orr.w	lr, r5, r6
 80008a4:	e68d      	b.n	80005c2 <__aeabi_dmul+0xde>
 80008a6:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008aa:	ea94 0f0c 	teq	r4, ip
 80008ae:	bf08      	it	eq
 80008b0:	ea95 0f0c 	teqeq	r5, ip
 80008b4:	f43f af3b 	beq.w	800072e <__aeabi_dmul+0x24a>
 80008b8:	ea94 0f0c 	teq	r4, ip
 80008bc:	d10a      	bne.n	80008d4 <__aeabi_ddiv+0x19c>
 80008be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008c2:	f47f af34 	bne.w	800072e <__aeabi_dmul+0x24a>
 80008c6:	ea95 0f0c 	teq	r5, ip
 80008ca:	f47f af25 	bne.w	8000718 <__aeabi_dmul+0x234>
 80008ce:	4610      	mov	r0, r2
 80008d0:	4619      	mov	r1, r3
 80008d2:	e72c      	b.n	800072e <__aeabi_dmul+0x24a>
 80008d4:	ea95 0f0c 	teq	r5, ip
 80008d8:	d106      	bne.n	80008e8 <__aeabi_ddiv+0x1b0>
 80008da:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008de:	f43f aefd 	beq.w	80006dc <__aeabi_dmul+0x1f8>
 80008e2:	4610      	mov	r0, r2
 80008e4:	4619      	mov	r1, r3
 80008e6:	e722      	b.n	800072e <__aeabi_dmul+0x24a>
 80008e8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008ec:	bf18      	it	ne
 80008ee:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008f2:	f47f aec5 	bne.w	8000680 <__aeabi_dmul+0x19c>
 80008f6:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008fa:	f47f af0d 	bne.w	8000718 <__aeabi_dmul+0x234>
 80008fe:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000902:	f47f aeeb 	bne.w	80006dc <__aeabi_dmul+0x1f8>
 8000906:	e712      	b.n	800072e <__aeabi_dmul+0x24a>

08000908 <__gedf2>:
 8000908:	f04f 3cff 	mov.w	ip, #4294967295
 800090c:	e006      	b.n	800091c <__cmpdf2+0x4>
 800090e:	bf00      	nop

08000910 <__ledf2>:
 8000910:	f04f 0c01 	mov.w	ip, #1
 8000914:	e002      	b.n	800091c <__cmpdf2+0x4>
 8000916:	bf00      	nop

08000918 <__cmpdf2>:
 8000918:	f04f 0c01 	mov.w	ip, #1
 800091c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000920:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000924:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000928:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800092c:	bf18      	it	ne
 800092e:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000932:	d01b      	beq.n	800096c <__cmpdf2+0x54>
 8000934:	b001      	add	sp, #4
 8000936:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800093a:	bf0c      	ite	eq
 800093c:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000940:	ea91 0f03 	teqne	r1, r3
 8000944:	bf02      	ittt	eq
 8000946:	ea90 0f02 	teqeq	r0, r2
 800094a:	2000      	moveq	r0, #0
 800094c:	4770      	bxeq	lr
 800094e:	f110 0f00 	cmn.w	r0, #0
 8000952:	ea91 0f03 	teq	r1, r3
 8000956:	bf58      	it	pl
 8000958:	4299      	cmppl	r1, r3
 800095a:	bf08      	it	eq
 800095c:	4290      	cmpeq	r0, r2
 800095e:	bf2c      	ite	cs
 8000960:	17d8      	asrcs	r0, r3, #31
 8000962:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000966:	f040 0001 	orr.w	r0, r0, #1
 800096a:	4770      	bx	lr
 800096c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000970:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000974:	d102      	bne.n	800097c <__cmpdf2+0x64>
 8000976:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800097a:	d107      	bne.n	800098c <__cmpdf2+0x74>
 800097c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000980:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000984:	d1d6      	bne.n	8000934 <__cmpdf2+0x1c>
 8000986:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800098a:	d0d3      	beq.n	8000934 <__cmpdf2+0x1c>
 800098c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000990:	4770      	bx	lr
 8000992:	bf00      	nop

08000994 <__aeabi_cdrcmple>:
 8000994:	4684      	mov	ip, r0
 8000996:	4610      	mov	r0, r2
 8000998:	4662      	mov	r2, ip
 800099a:	468c      	mov	ip, r1
 800099c:	4619      	mov	r1, r3
 800099e:	4663      	mov	r3, ip
 80009a0:	e000      	b.n	80009a4 <__aeabi_cdcmpeq>
 80009a2:	bf00      	nop

080009a4 <__aeabi_cdcmpeq>:
 80009a4:	b501      	push	{r0, lr}
 80009a6:	f7ff ffb7 	bl	8000918 <__cmpdf2>
 80009aa:	2800      	cmp	r0, #0
 80009ac:	bf48      	it	mi
 80009ae:	f110 0f00 	cmnmi.w	r0, #0
 80009b2:	bd01      	pop	{r0, pc}

080009b4 <__aeabi_dcmpeq>:
 80009b4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009b8:	f7ff fff4 	bl	80009a4 <__aeabi_cdcmpeq>
 80009bc:	bf0c      	ite	eq
 80009be:	2001      	moveq	r0, #1
 80009c0:	2000      	movne	r0, #0
 80009c2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009c6:	bf00      	nop

080009c8 <__aeabi_dcmplt>:
 80009c8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009cc:	f7ff ffea 	bl	80009a4 <__aeabi_cdcmpeq>
 80009d0:	bf34      	ite	cc
 80009d2:	2001      	movcc	r0, #1
 80009d4:	2000      	movcs	r0, #0
 80009d6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009da:	bf00      	nop

080009dc <__aeabi_dcmple>:
 80009dc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e0:	f7ff ffe0 	bl	80009a4 <__aeabi_cdcmpeq>
 80009e4:	bf94      	ite	ls
 80009e6:	2001      	movls	r0, #1
 80009e8:	2000      	movhi	r0, #0
 80009ea:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ee:	bf00      	nop

080009f0 <__aeabi_dcmpge>:
 80009f0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009f4:	f7ff ffce 	bl	8000994 <__aeabi_cdrcmple>
 80009f8:	bf94      	ite	ls
 80009fa:	2001      	movls	r0, #1
 80009fc:	2000      	movhi	r0, #0
 80009fe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a02:	bf00      	nop

08000a04 <__aeabi_dcmpgt>:
 8000a04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a08:	f7ff ffc4 	bl	8000994 <__aeabi_cdrcmple>
 8000a0c:	bf34      	ite	cc
 8000a0e:	2001      	movcc	r0, #1
 8000a10:	2000      	movcs	r0, #0
 8000a12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a16:	bf00      	nop

08000a18 <__aeabi_dcmpun>:
 8000a18:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a20:	d102      	bne.n	8000a28 <__aeabi_dcmpun+0x10>
 8000a22:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a26:	d10a      	bne.n	8000a3e <__aeabi_dcmpun+0x26>
 8000a28:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a2c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a30:	d102      	bne.n	8000a38 <__aeabi_dcmpun+0x20>
 8000a32:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a36:	d102      	bne.n	8000a3e <__aeabi_dcmpun+0x26>
 8000a38:	f04f 0000 	mov.w	r0, #0
 8000a3c:	4770      	bx	lr
 8000a3e:	f04f 0001 	mov.w	r0, #1
 8000a42:	4770      	bx	lr

08000a44 <__aeabi_d2f>:
 8000a44:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a48:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a4c:	bf24      	itt	cs
 8000a4e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a52:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a56:	d90d      	bls.n	8000a74 <__aeabi_d2f+0x30>
 8000a58:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a5c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a60:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a64:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a68:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a6c:	bf08      	it	eq
 8000a6e:	f020 0001 	biceq.w	r0, r0, #1
 8000a72:	4770      	bx	lr
 8000a74:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a78:	d121      	bne.n	8000abe <__aeabi_d2f+0x7a>
 8000a7a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a7e:	bfbc      	itt	lt
 8000a80:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a84:	4770      	bxlt	lr
 8000a86:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a8a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a8e:	f1c2 0218 	rsb	r2, r2, #24
 8000a92:	f1c2 0c20 	rsb	ip, r2, #32
 8000a96:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a9a:	fa20 f002 	lsr.w	r0, r0, r2
 8000a9e:	bf18      	it	ne
 8000aa0:	f040 0001 	orrne.w	r0, r0, #1
 8000aa4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000aac:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ab0:	ea40 000c 	orr.w	r0, r0, ip
 8000ab4:	fa23 f302 	lsr.w	r3, r3, r2
 8000ab8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000abc:	e7cc      	b.n	8000a58 <__aeabi_d2f+0x14>
 8000abe:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ac2:	d107      	bne.n	8000ad4 <__aeabi_d2f+0x90>
 8000ac4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ac8:	bf1e      	ittt	ne
 8000aca:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ace:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ad2:	4770      	bxne	lr
 8000ad4:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ad8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000adc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ae0:	4770      	bx	lr
 8000ae2:	bf00      	nop

08000ae4 <__aeabi_frsub>:
 8000ae4:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000ae8:	e002      	b.n	8000af0 <__addsf3>
 8000aea:	bf00      	nop

08000aec <__aeabi_fsub>:
 8000aec:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000af0 <__addsf3>:
 8000af0:	0042      	lsls	r2, r0, #1
 8000af2:	bf1f      	itttt	ne
 8000af4:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000af8:	ea92 0f03 	teqne	r2, r3
 8000afc:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b00:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b04:	d06a      	beq.n	8000bdc <__addsf3+0xec>
 8000b06:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b0a:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b0e:	bfc1      	itttt	gt
 8000b10:	18d2      	addgt	r2, r2, r3
 8000b12:	4041      	eorgt	r1, r0
 8000b14:	4048      	eorgt	r0, r1
 8000b16:	4041      	eorgt	r1, r0
 8000b18:	bfb8      	it	lt
 8000b1a:	425b      	neglt	r3, r3
 8000b1c:	2b19      	cmp	r3, #25
 8000b1e:	bf88      	it	hi
 8000b20:	4770      	bxhi	lr
 8000b22:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b26:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b2a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b2e:	bf18      	it	ne
 8000b30:	4240      	negne	r0, r0
 8000b32:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b36:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b3a:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b3e:	bf18      	it	ne
 8000b40:	4249      	negne	r1, r1
 8000b42:	ea92 0f03 	teq	r2, r3
 8000b46:	d03f      	beq.n	8000bc8 <__addsf3+0xd8>
 8000b48:	f1a2 0201 	sub.w	r2, r2, #1
 8000b4c:	fa41 fc03 	asr.w	ip, r1, r3
 8000b50:	eb10 000c 	adds.w	r0, r0, ip
 8000b54:	f1c3 0320 	rsb	r3, r3, #32
 8000b58:	fa01 f103 	lsl.w	r1, r1, r3
 8000b5c:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b60:	d502      	bpl.n	8000b68 <__addsf3+0x78>
 8000b62:	4249      	negs	r1, r1
 8000b64:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b68:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000b6c:	d313      	bcc.n	8000b96 <__addsf3+0xa6>
 8000b6e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000b72:	d306      	bcc.n	8000b82 <__addsf3+0x92>
 8000b74:	0840      	lsrs	r0, r0, #1
 8000b76:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b7a:	f102 0201 	add.w	r2, r2, #1
 8000b7e:	2afe      	cmp	r2, #254	; 0xfe
 8000b80:	d251      	bcs.n	8000c26 <__addsf3+0x136>
 8000b82:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000b86:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b8a:	bf08      	it	eq
 8000b8c:	f020 0001 	biceq.w	r0, r0, #1
 8000b90:	ea40 0003 	orr.w	r0, r0, r3
 8000b94:	4770      	bx	lr
 8000b96:	0049      	lsls	r1, r1, #1
 8000b98:	eb40 0000 	adc.w	r0, r0, r0
 8000b9c:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000ba0:	f1a2 0201 	sub.w	r2, r2, #1
 8000ba4:	d1ed      	bne.n	8000b82 <__addsf3+0x92>
 8000ba6:	fab0 fc80 	clz	ip, r0
 8000baa:	f1ac 0c08 	sub.w	ip, ip, #8
 8000bae:	ebb2 020c 	subs.w	r2, r2, ip
 8000bb2:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bb6:	bfaa      	itet	ge
 8000bb8:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000bbc:	4252      	neglt	r2, r2
 8000bbe:	4318      	orrge	r0, r3
 8000bc0:	bfbc      	itt	lt
 8000bc2:	40d0      	lsrlt	r0, r2
 8000bc4:	4318      	orrlt	r0, r3
 8000bc6:	4770      	bx	lr
 8000bc8:	f092 0f00 	teq	r2, #0
 8000bcc:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000bd0:	bf06      	itte	eq
 8000bd2:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000bd6:	3201      	addeq	r2, #1
 8000bd8:	3b01      	subne	r3, #1
 8000bda:	e7b5      	b.n	8000b48 <__addsf3+0x58>
 8000bdc:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000be0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000be4:	bf18      	it	ne
 8000be6:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000bea:	d021      	beq.n	8000c30 <__addsf3+0x140>
 8000bec:	ea92 0f03 	teq	r2, r3
 8000bf0:	d004      	beq.n	8000bfc <__addsf3+0x10c>
 8000bf2:	f092 0f00 	teq	r2, #0
 8000bf6:	bf08      	it	eq
 8000bf8:	4608      	moveq	r0, r1
 8000bfa:	4770      	bx	lr
 8000bfc:	ea90 0f01 	teq	r0, r1
 8000c00:	bf1c      	itt	ne
 8000c02:	2000      	movne	r0, #0
 8000c04:	4770      	bxne	lr
 8000c06:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c0a:	d104      	bne.n	8000c16 <__addsf3+0x126>
 8000c0c:	0040      	lsls	r0, r0, #1
 8000c0e:	bf28      	it	cs
 8000c10:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c14:	4770      	bx	lr
 8000c16:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c1a:	bf3c      	itt	cc
 8000c1c:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c20:	4770      	bxcc	lr
 8000c22:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c26:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c2a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c2e:	4770      	bx	lr
 8000c30:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c34:	bf16      	itet	ne
 8000c36:	4608      	movne	r0, r1
 8000c38:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c3c:	4601      	movne	r1, r0
 8000c3e:	0242      	lsls	r2, r0, #9
 8000c40:	bf06      	itte	eq
 8000c42:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c46:	ea90 0f01 	teqeq	r0, r1
 8000c4a:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c4e:	4770      	bx	lr

08000c50 <__aeabi_ui2f>:
 8000c50:	f04f 0300 	mov.w	r3, #0
 8000c54:	e004      	b.n	8000c60 <__aeabi_i2f+0x8>
 8000c56:	bf00      	nop

08000c58 <__aeabi_i2f>:
 8000c58:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c5c:	bf48      	it	mi
 8000c5e:	4240      	negmi	r0, r0
 8000c60:	ea5f 0c00 	movs.w	ip, r0
 8000c64:	bf08      	it	eq
 8000c66:	4770      	bxeq	lr
 8000c68:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000c6c:	4601      	mov	r1, r0
 8000c6e:	f04f 0000 	mov.w	r0, #0
 8000c72:	e01c      	b.n	8000cae <__aeabi_l2f+0x2a>

08000c74 <__aeabi_ul2f>:
 8000c74:	ea50 0201 	orrs.w	r2, r0, r1
 8000c78:	bf08      	it	eq
 8000c7a:	4770      	bxeq	lr
 8000c7c:	f04f 0300 	mov.w	r3, #0
 8000c80:	e00a      	b.n	8000c98 <__aeabi_l2f+0x14>
 8000c82:	bf00      	nop

08000c84 <__aeabi_l2f>:
 8000c84:	ea50 0201 	orrs.w	r2, r0, r1
 8000c88:	bf08      	it	eq
 8000c8a:	4770      	bxeq	lr
 8000c8c:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000c90:	d502      	bpl.n	8000c98 <__aeabi_l2f+0x14>
 8000c92:	4240      	negs	r0, r0
 8000c94:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c98:	ea5f 0c01 	movs.w	ip, r1
 8000c9c:	bf02      	ittt	eq
 8000c9e:	4684      	moveq	ip, r0
 8000ca0:	4601      	moveq	r1, r0
 8000ca2:	2000      	moveq	r0, #0
 8000ca4:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000ca8:	bf08      	it	eq
 8000caa:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000cae:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000cb2:	fabc f28c 	clz	r2, ip
 8000cb6:	3a08      	subs	r2, #8
 8000cb8:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000cbc:	db10      	blt.n	8000ce0 <__aeabi_l2f+0x5c>
 8000cbe:	fa01 fc02 	lsl.w	ip, r1, r2
 8000cc2:	4463      	add	r3, ip
 8000cc4:	fa00 fc02 	lsl.w	ip, r0, r2
 8000cc8:	f1c2 0220 	rsb	r2, r2, #32
 8000ccc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000cd0:	fa20 f202 	lsr.w	r2, r0, r2
 8000cd4:	eb43 0002 	adc.w	r0, r3, r2
 8000cd8:	bf08      	it	eq
 8000cda:	f020 0001 	biceq.w	r0, r0, #1
 8000cde:	4770      	bx	lr
 8000ce0:	f102 0220 	add.w	r2, r2, #32
 8000ce4:	fa01 fc02 	lsl.w	ip, r1, r2
 8000ce8:	f1c2 0220 	rsb	r2, r2, #32
 8000cec:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000cf0:	fa21 f202 	lsr.w	r2, r1, r2
 8000cf4:	eb43 0002 	adc.w	r0, r3, r2
 8000cf8:	bf08      	it	eq
 8000cfa:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000cfe:	4770      	bx	lr

08000d00 <__aeabi_fmul>:
 8000d00:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d04:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d08:	bf1e      	ittt	ne
 8000d0a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d0e:	ea92 0f0c 	teqne	r2, ip
 8000d12:	ea93 0f0c 	teqne	r3, ip
 8000d16:	d06f      	beq.n	8000df8 <__aeabi_fmul+0xf8>
 8000d18:	441a      	add	r2, r3
 8000d1a:	ea80 0c01 	eor.w	ip, r0, r1
 8000d1e:	0240      	lsls	r0, r0, #9
 8000d20:	bf18      	it	ne
 8000d22:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d26:	d01e      	beq.n	8000d66 <__aeabi_fmul+0x66>
 8000d28:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000d2c:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d30:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d34:	fba0 3101 	umull	r3, r1, r0, r1
 8000d38:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d3c:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000d40:	bf3e      	ittt	cc
 8000d42:	0049      	lslcc	r1, r1, #1
 8000d44:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d48:	005b      	lslcc	r3, r3, #1
 8000d4a:	ea40 0001 	orr.w	r0, r0, r1
 8000d4e:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000d52:	2afd      	cmp	r2, #253	; 0xfd
 8000d54:	d81d      	bhi.n	8000d92 <__aeabi_fmul+0x92>
 8000d56:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000d5a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d5e:	bf08      	it	eq
 8000d60:	f020 0001 	biceq.w	r0, r0, #1
 8000d64:	4770      	bx	lr
 8000d66:	f090 0f00 	teq	r0, #0
 8000d6a:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000d6e:	bf08      	it	eq
 8000d70:	0249      	lsleq	r1, r1, #9
 8000d72:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d76:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d7a:	3a7f      	subs	r2, #127	; 0x7f
 8000d7c:	bfc2      	ittt	gt
 8000d7e:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000d82:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d86:	4770      	bxgt	lr
 8000d88:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d8c:	f04f 0300 	mov.w	r3, #0
 8000d90:	3a01      	subs	r2, #1
 8000d92:	dc5d      	bgt.n	8000e50 <__aeabi_fmul+0x150>
 8000d94:	f112 0f19 	cmn.w	r2, #25
 8000d98:	bfdc      	itt	le
 8000d9a:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000d9e:	4770      	bxle	lr
 8000da0:	f1c2 0200 	rsb	r2, r2, #0
 8000da4:	0041      	lsls	r1, r0, #1
 8000da6:	fa21 f102 	lsr.w	r1, r1, r2
 8000daa:	f1c2 0220 	rsb	r2, r2, #32
 8000dae:	fa00 fc02 	lsl.w	ip, r0, r2
 8000db2:	ea5f 0031 	movs.w	r0, r1, rrx
 8000db6:	f140 0000 	adc.w	r0, r0, #0
 8000dba:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000dbe:	bf08      	it	eq
 8000dc0:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000dc4:	4770      	bx	lr
 8000dc6:	f092 0f00 	teq	r2, #0
 8000dca:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000dce:	bf02      	ittt	eq
 8000dd0:	0040      	lsleq	r0, r0, #1
 8000dd2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000dd6:	3a01      	subeq	r2, #1
 8000dd8:	d0f9      	beq.n	8000dce <__aeabi_fmul+0xce>
 8000dda:	ea40 000c 	orr.w	r0, r0, ip
 8000dde:	f093 0f00 	teq	r3, #0
 8000de2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000de6:	bf02      	ittt	eq
 8000de8:	0049      	lsleq	r1, r1, #1
 8000dea:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000dee:	3b01      	subeq	r3, #1
 8000df0:	d0f9      	beq.n	8000de6 <__aeabi_fmul+0xe6>
 8000df2:	ea41 010c 	orr.w	r1, r1, ip
 8000df6:	e78f      	b.n	8000d18 <__aeabi_fmul+0x18>
 8000df8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000dfc:	ea92 0f0c 	teq	r2, ip
 8000e00:	bf18      	it	ne
 8000e02:	ea93 0f0c 	teqne	r3, ip
 8000e06:	d00a      	beq.n	8000e1e <__aeabi_fmul+0x11e>
 8000e08:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e0c:	bf18      	it	ne
 8000e0e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e12:	d1d8      	bne.n	8000dc6 <__aeabi_fmul+0xc6>
 8000e14:	ea80 0001 	eor.w	r0, r0, r1
 8000e18:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e1c:	4770      	bx	lr
 8000e1e:	f090 0f00 	teq	r0, #0
 8000e22:	bf17      	itett	ne
 8000e24:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000e28:	4608      	moveq	r0, r1
 8000e2a:	f091 0f00 	teqne	r1, #0
 8000e2e:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000e32:	d014      	beq.n	8000e5e <__aeabi_fmul+0x15e>
 8000e34:	ea92 0f0c 	teq	r2, ip
 8000e38:	d101      	bne.n	8000e3e <__aeabi_fmul+0x13e>
 8000e3a:	0242      	lsls	r2, r0, #9
 8000e3c:	d10f      	bne.n	8000e5e <__aeabi_fmul+0x15e>
 8000e3e:	ea93 0f0c 	teq	r3, ip
 8000e42:	d103      	bne.n	8000e4c <__aeabi_fmul+0x14c>
 8000e44:	024b      	lsls	r3, r1, #9
 8000e46:	bf18      	it	ne
 8000e48:	4608      	movne	r0, r1
 8000e4a:	d108      	bne.n	8000e5e <__aeabi_fmul+0x15e>
 8000e4c:	ea80 0001 	eor.w	r0, r0, r1
 8000e50:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e54:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e58:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e5c:	4770      	bx	lr
 8000e5e:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e62:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000e66:	4770      	bx	lr

08000e68 <__aeabi_fdiv>:
 8000e68:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000e6c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e70:	bf1e      	ittt	ne
 8000e72:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e76:	ea92 0f0c 	teqne	r2, ip
 8000e7a:	ea93 0f0c 	teqne	r3, ip
 8000e7e:	d069      	beq.n	8000f54 <__aeabi_fdiv+0xec>
 8000e80:	eba2 0203 	sub.w	r2, r2, r3
 8000e84:	ea80 0c01 	eor.w	ip, r0, r1
 8000e88:	0249      	lsls	r1, r1, #9
 8000e8a:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000e8e:	d037      	beq.n	8000f00 <__aeabi_fdiv+0x98>
 8000e90:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000e94:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000e98:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000e9c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ea0:	428b      	cmp	r3, r1
 8000ea2:	bf38      	it	cc
 8000ea4:	005b      	lslcc	r3, r3, #1
 8000ea6:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000eaa:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000eae:	428b      	cmp	r3, r1
 8000eb0:	bf24      	itt	cs
 8000eb2:	1a5b      	subcs	r3, r3, r1
 8000eb4:	ea40 000c 	orrcs.w	r0, r0, ip
 8000eb8:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000ebc:	bf24      	itt	cs
 8000ebe:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000ec2:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000ec6:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000eca:	bf24      	itt	cs
 8000ecc:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000ed0:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000ed4:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000ed8:	bf24      	itt	cs
 8000eda:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000ede:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000ee2:	011b      	lsls	r3, r3, #4
 8000ee4:	bf18      	it	ne
 8000ee6:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000eea:	d1e0      	bne.n	8000eae <__aeabi_fdiv+0x46>
 8000eec:	2afd      	cmp	r2, #253	; 0xfd
 8000eee:	f63f af50 	bhi.w	8000d92 <__aeabi_fmul+0x92>
 8000ef2:	428b      	cmp	r3, r1
 8000ef4:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000ef8:	bf08      	it	eq
 8000efa:	f020 0001 	biceq.w	r0, r0, #1
 8000efe:	4770      	bx	lr
 8000f00:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f04:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f08:	327f      	adds	r2, #127	; 0x7f
 8000f0a:	bfc2      	ittt	gt
 8000f0c:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f10:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f14:	4770      	bxgt	lr
 8000f16:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f1a:	f04f 0300 	mov.w	r3, #0
 8000f1e:	3a01      	subs	r2, #1
 8000f20:	e737      	b.n	8000d92 <__aeabi_fmul+0x92>
 8000f22:	f092 0f00 	teq	r2, #0
 8000f26:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f2a:	bf02      	ittt	eq
 8000f2c:	0040      	lsleq	r0, r0, #1
 8000f2e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f32:	3a01      	subeq	r2, #1
 8000f34:	d0f9      	beq.n	8000f2a <__aeabi_fdiv+0xc2>
 8000f36:	ea40 000c 	orr.w	r0, r0, ip
 8000f3a:	f093 0f00 	teq	r3, #0
 8000f3e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f42:	bf02      	ittt	eq
 8000f44:	0049      	lsleq	r1, r1, #1
 8000f46:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f4a:	3b01      	subeq	r3, #1
 8000f4c:	d0f9      	beq.n	8000f42 <__aeabi_fdiv+0xda>
 8000f4e:	ea41 010c 	orr.w	r1, r1, ip
 8000f52:	e795      	b.n	8000e80 <__aeabi_fdiv+0x18>
 8000f54:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f58:	ea92 0f0c 	teq	r2, ip
 8000f5c:	d108      	bne.n	8000f70 <__aeabi_fdiv+0x108>
 8000f5e:	0242      	lsls	r2, r0, #9
 8000f60:	f47f af7d 	bne.w	8000e5e <__aeabi_fmul+0x15e>
 8000f64:	ea93 0f0c 	teq	r3, ip
 8000f68:	f47f af70 	bne.w	8000e4c <__aeabi_fmul+0x14c>
 8000f6c:	4608      	mov	r0, r1
 8000f6e:	e776      	b.n	8000e5e <__aeabi_fmul+0x15e>
 8000f70:	ea93 0f0c 	teq	r3, ip
 8000f74:	d104      	bne.n	8000f80 <__aeabi_fdiv+0x118>
 8000f76:	024b      	lsls	r3, r1, #9
 8000f78:	f43f af4c 	beq.w	8000e14 <__aeabi_fmul+0x114>
 8000f7c:	4608      	mov	r0, r1
 8000f7e:	e76e      	b.n	8000e5e <__aeabi_fmul+0x15e>
 8000f80:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000f84:	bf18      	it	ne
 8000f86:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000f8a:	d1ca      	bne.n	8000f22 <__aeabi_fdiv+0xba>
 8000f8c:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000f90:	f47f af5c 	bne.w	8000e4c <__aeabi_fmul+0x14c>
 8000f94:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000f98:	f47f af3c 	bne.w	8000e14 <__aeabi_fmul+0x114>
 8000f9c:	e75f      	b.n	8000e5e <__aeabi_fmul+0x15e>
 8000f9e:	bf00      	nop

08000fa0 <__gesf2>:
 8000fa0:	f04f 3cff 	mov.w	ip, #4294967295
 8000fa4:	e006      	b.n	8000fb4 <__cmpsf2+0x4>
 8000fa6:	bf00      	nop

08000fa8 <__lesf2>:
 8000fa8:	f04f 0c01 	mov.w	ip, #1
 8000fac:	e002      	b.n	8000fb4 <__cmpsf2+0x4>
 8000fae:	bf00      	nop

08000fb0 <__cmpsf2>:
 8000fb0:	f04f 0c01 	mov.w	ip, #1
 8000fb4:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000fb8:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000fbc:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000fc0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000fc4:	bf18      	it	ne
 8000fc6:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000fca:	d011      	beq.n	8000ff0 <__cmpsf2+0x40>
 8000fcc:	b001      	add	sp, #4
 8000fce:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000fd2:	bf18      	it	ne
 8000fd4:	ea90 0f01 	teqne	r0, r1
 8000fd8:	bf58      	it	pl
 8000fda:	ebb2 0003 	subspl.w	r0, r2, r3
 8000fde:	bf88      	it	hi
 8000fe0:	17c8      	asrhi	r0, r1, #31
 8000fe2:	bf38      	it	cc
 8000fe4:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000fe8:	bf18      	it	ne
 8000fea:	f040 0001 	orrne.w	r0, r0, #1
 8000fee:	4770      	bx	lr
 8000ff0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000ff4:	d102      	bne.n	8000ffc <__cmpsf2+0x4c>
 8000ff6:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000ffa:	d105      	bne.n	8001008 <__cmpsf2+0x58>
 8000ffc:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001000:	d1e4      	bne.n	8000fcc <__cmpsf2+0x1c>
 8001002:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8001006:	d0e1      	beq.n	8000fcc <__cmpsf2+0x1c>
 8001008:	f85d 0b04 	ldr.w	r0, [sp], #4
 800100c:	4770      	bx	lr
 800100e:	bf00      	nop

08001010 <__aeabi_cfrcmple>:
 8001010:	4684      	mov	ip, r0
 8001012:	4608      	mov	r0, r1
 8001014:	4661      	mov	r1, ip
 8001016:	e7ff      	b.n	8001018 <__aeabi_cfcmpeq>

08001018 <__aeabi_cfcmpeq>:
 8001018:	b50f      	push	{r0, r1, r2, r3, lr}
 800101a:	f7ff ffc9 	bl	8000fb0 <__cmpsf2>
 800101e:	2800      	cmp	r0, #0
 8001020:	bf48      	it	mi
 8001022:	f110 0f00 	cmnmi.w	r0, #0
 8001026:	bd0f      	pop	{r0, r1, r2, r3, pc}

08001028 <__aeabi_fcmpeq>:
 8001028:	f84d ed08 	str.w	lr, [sp, #-8]!
 800102c:	f7ff fff4 	bl	8001018 <__aeabi_cfcmpeq>
 8001030:	bf0c      	ite	eq
 8001032:	2001      	moveq	r0, #1
 8001034:	2000      	movne	r0, #0
 8001036:	f85d fb08 	ldr.w	pc, [sp], #8
 800103a:	bf00      	nop

0800103c <__aeabi_fcmplt>:
 800103c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001040:	f7ff ffea 	bl	8001018 <__aeabi_cfcmpeq>
 8001044:	bf34      	ite	cc
 8001046:	2001      	movcc	r0, #1
 8001048:	2000      	movcs	r0, #0
 800104a:	f85d fb08 	ldr.w	pc, [sp], #8
 800104e:	bf00      	nop

08001050 <__aeabi_fcmple>:
 8001050:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001054:	f7ff ffe0 	bl	8001018 <__aeabi_cfcmpeq>
 8001058:	bf94      	ite	ls
 800105a:	2001      	movls	r0, #1
 800105c:	2000      	movhi	r0, #0
 800105e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001062:	bf00      	nop

08001064 <__aeabi_fcmpge>:
 8001064:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001068:	f7ff ffd2 	bl	8001010 <__aeabi_cfrcmple>
 800106c:	bf94      	ite	ls
 800106e:	2001      	movls	r0, #1
 8001070:	2000      	movhi	r0, #0
 8001072:	f85d fb08 	ldr.w	pc, [sp], #8
 8001076:	bf00      	nop

08001078 <__aeabi_fcmpgt>:
 8001078:	f84d ed08 	str.w	lr, [sp, #-8]!
 800107c:	f7ff ffc8 	bl	8001010 <__aeabi_cfrcmple>
 8001080:	bf34      	ite	cc
 8001082:	2001      	movcc	r0, #1
 8001084:	2000      	movcs	r0, #0
 8001086:	f85d fb08 	ldr.w	pc, [sp], #8
 800108a:	bf00      	nop

0800108c <__aeabi_f2iz>:
 800108c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001090:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8001094:	d30f      	bcc.n	80010b6 <__aeabi_f2iz+0x2a>
 8001096:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800109a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800109e:	d90d      	bls.n	80010bc <__aeabi_f2iz+0x30>
 80010a0:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80010a4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80010a8:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80010ac:	fa23 f002 	lsr.w	r0, r3, r2
 80010b0:	bf18      	it	ne
 80010b2:	4240      	negne	r0, r0
 80010b4:	4770      	bx	lr
 80010b6:	f04f 0000 	mov.w	r0, #0
 80010ba:	4770      	bx	lr
 80010bc:	f112 0f61 	cmn.w	r2, #97	; 0x61
 80010c0:	d101      	bne.n	80010c6 <__aeabi_f2iz+0x3a>
 80010c2:	0242      	lsls	r2, r0, #9
 80010c4:	d105      	bne.n	80010d2 <__aeabi_f2iz+0x46>
 80010c6:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 80010ca:	bf08      	it	eq
 80010cc:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80010d0:	4770      	bx	lr
 80010d2:	f04f 0000 	mov.w	r0, #0
 80010d6:	4770      	bx	lr

080010d8 <__aeabi_f2uiz>:
 80010d8:	0042      	lsls	r2, r0, #1
 80010da:	d20e      	bcs.n	80010fa <__aeabi_f2uiz+0x22>
 80010dc:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80010e0:	d30b      	bcc.n	80010fa <__aeabi_f2uiz+0x22>
 80010e2:	f04f 039e 	mov.w	r3, #158	; 0x9e
 80010e6:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80010ea:	d409      	bmi.n	8001100 <__aeabi_f2uiz+0x28>
 80010ec:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80010f0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80010f4:	fa23 f002 	lsr.w	r0, r3, r2
 80010f8:	4770      	bx	lr
 80010fa:	f04f 0000 	mov.w	r0, #0
 80010fe:	4770      	bx	lr
 8001100:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001104:	d101      	bne.n	800110a <__aeabi_f2uiz+0x32>
 8001106:	0242      	lsls	r2, r0, #9
 8001108:	d102      	bne.n	8001110 <__aeabi_f2uiz+0x38>
 800110a:	f04f 30ff 	mov.w	r0, #4294967295
 800110e:	4770      	bx	lr
 8001110:	f04f 0000 	mov.w	r0, #0
 8001114:	4770      	bx	lr
 8001116:	bf00      	nop

08001118 <AT24C02_Write>:

#include "AT24C02.h"
#include "stm32f10x_i2c.h"

void AT24C02_Write(I2C_TypeDef* I2Cx, unsigned char AddressDevice, unsigned char AddressByte, unsigned char Value)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	b082      	sub	sp, #8
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]
 8001120:	4608      	mov	r0, r1
 8001122:	4611      	mov	r1, r2
 8001124:	461a      	mov	r2, r3
 8001126:	4603      	mov	r3, r0
 8001128:	70fb      	strb	r3, [r7, #3]
 800112a:	460b      	mov	r3, r1
 800112c:	70bb      	strb	r3, [r7, #2]
 800112e:	4613      	mov	r3, r2
 8001130:	707b      	strb	r3, [r7, #1]
	while(I2C_GetFlagStatus(I2Cx, I2C_FLAG_BUSY));
 8001132:	bf00      	nop
 8001134:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 8001138:	6878      	ldr	r0, [r7, #4]
 800113a:	f004 fb27 	bl	800578c <I2C_GetFlagStatus>
 800113e:	4603      	mov	r3, r0
 8001140:	2b00      	cmp	r3, #0
 8001142:	d1f7      	bne.n	8001134 <AT24C02_Write+0x1c>
	I2C_AcknowledgeConfig(I2Cx, ENABLE);
 8001144:	2101      	movs	r1, #1
 8001146:	6878      	ldr	r0, [r7, #4]
 8001148:	f004 fa74 	bl	8005634 <I2C_AcknowledgeConfig>

	I2C_GenerateSTART(I2Cx, ENABLE);
 800114c:	2101      	movs	r1, #1
 800114e:	6878      	ldr	r0, [r7, #4]
 8001150:	f004 fa30 	bl	80055b4 <I2C_GenerateSTART>
	while( !I2C_GetFlagStatus(I2Cx, I2C_FLAG_SB) ); // wait Generate Start
 8001154:	bf00      	nop
 8001156:	491f      	ldr	r1, [pc, #124]	; (80011d4 <AT24C02_Write+0xbc>)
 8001158:	6878      	ldr	r0, [r7, #4]
 800115a:	f004 fb17 	bl	800578c <I2C_GetFlagStatus>
 800115e:	4603      	mov	r3, r0
 8001160:	2b00      	cmp	r3, #0
 8001162:	d0f8      	beq.n	8001156 <AT24C02_Write+0x3e>

	I2C_Send7bitAddress(I2Cx, AddressDevice, I2C_Direction_Transmitter);
 8001164:	78fb      	ldrb	r3, [r7, #3]
 8001166:	2200      	movs	r2, #0
 8001168:	4619      	mov	r1, r3
 800116a:	6878      	ldr	r0, [r7, #4]
 800116c:	f004 faa0 	bl	80056b0 <I2C_Send7bitAddress>
	while( !I2C_CheckEvent(I2Cx, I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED) ); // wait send Address
 8001170:	bf00      	nop
 8001172:	4919      	ldr	r1, [pc, #100]	; (80011d8 <AT24C02_Write+0xc0>)
 8001174:	6878      	ldr	r0, [r7, #4]
 8001176:	f004 fad9 	bl	800572c <I2C_CheckEvent>
 800117a:	4603      	mov	r3, r0
 800117c:	2b00      	cmp	r3, #0
 800117e:	d0f8      	beq.n	8001172 <AT24C02_Write+0x5a>

	I2C_SendData(I2Cx, AddressByte);
 8001180:	78bb      	ldrb	r3, [r7, #2]
 8001182:	4619      	mov	r1, r3
 8001184:	6878      	ldr	r0, [r7, #4]
 8001186:	f004 fa75 	bl	8005674 <I2C_SendData>
	while(!I2C_CheckEvent(I2Cx, I2C_EVENT_MASTER_BYTE_TRANSMITTED)); // wait send Address Byte
 800118a:	bf00      	nop
 800118c:	4913      	ldr	r1, [pc, #76]	; (80011dc <AT24C02_Write+0xc4>)
 800118e:	6878      	ldr	r0, [r7, #4]
 8001190:	f004 facc 	bl	800572c <I2C_CheckEvent>
 8001194:	4603      	mov	r3, r0
 8001196:	2b00      	cmp	r3, #0
 8001198:	d0f8      	beq.n	800118c <AT24C02_Write+0x74>

	I2C_SendData(I2Cx, Value);
 800119a:	787b      	ldrb	r3, [r7, #1]
 800119c:	4619      	mov	r1, r3
 800119e:	6878      	ldr	r0, [r7, #4]
 80011a0:	f004 fa68 	bl	8005674 <I2C_SendData>
	while(!I2C_CheckEvent(I2Cx, I2C_EVENT_MASTER_BYTE_TRANSMITTED)); // wait Send Value for Byte
 80011a4:	bf00      	nop
 80011a6:	490d      	ldr	r1, [pc, #52]	; (80011dc <AT24C02_Write+0xc4>)
 80011a8:	6878      	ldr	r0, [r7, #4]
 80011aa:	f004 fabf 	bl	800572c <I2C_CheckEvent>
 80011ae:	4603      	mov	r3, r0
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d0f8      	beq.n	80011a6 <AT24C02_Write+0x8e>

	I2C_GenerateSTOP(I2Cx, ENABLE);
 80011b4:	2101      	movs	r1, #1
 80011b6:	6878      	ldr	r0, [r7, #4]
 80011b8:	f004 fa1c 	bl	80055f4 <I2C_GenerateSTOP>
	while(I2C_GetFlagStatus(I2Cx, I2C_FLAG_STOPF)); // wait Generate Stop
 80011bc:	bf00      	nop
 80011be:	4908      	ldr	r1, [pc, #32]	; (80011e0 <AT24C02_Write+0xc8>)
 80011c0:	6878      	ldr	r0, [r7, #4]
 80011c2:	f004 fae3 	bl	800578c <I2C_GetFlagStatus>
 80011c6:	4603      	mov	r3, r0
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d1f8      	bne.n	80011be <AT24C02_Write+0xa6>
};
 80011cc:	bf00      	nop
 80011ce:	3708      	adds	r7, #8
 80011d0:	46bd      	mov	sp, r7
 80011d2:	bd80      	pop	{r7, pc}
 80011d4:	10000001 	.word	0x10000001
 80011d8:	00070082 	.word	0x00070082
 80011dc:	00070084 	.word	0x00070084
 80011e0:	10000010 	.word	0x10000010

080011e4 <AT24C02_Read>:

unsigned char AT24C02_Read(I2C_TypeDef* I2Cx, unsigned char AddressDevice, unsigned char AddressByte)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b084      	sub	sp, #16
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	6078      	str	r0, [r7, #4]
 80011ec:	460b      	mov	r3, r1
 80011ee:	70fb      	strb	r3, [r7, #3]
 80011f0:	4613      	mov	r3, r2
 80011f2:	70bb      	strb	r3, [r7, #2]
	unsigned char ReceiveData = 0;
 80011f4:	2300      	movs	r3, #0
 80011f6:	73fb      	strb	r3, [r7, #15]

	while(I2C_GetFlagStatus(I2Cx, I2C_FLAG_BUSY));
 80011f8:	bf00      	nop
 80011fa:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 80011fe:	6878      	ldr	r0, [r7, #4]
 8001200:	f004 fac4 	bl	800578c <I2C_GetFlagStatus>
 8001204:	4603      	mov	r3, r0
 8001206:	2b00      	cmp	r3, #0
 8001208:	d1f7      	bne.n	80011fa <AT24C02_Read+0x16>
	I2C_GenerateSTART(I2Cx, ENABLE);
 800120a:	2101      	movs	r1, #1
 800120c:	6878      	ldr	r0, [r7, #4]
 800120e:	f004 f9d1 	bl	80055b4 <I2C_GenerateSTART>
	while( !I2C_GetFlagStatus(I2Cx, I2C_FLAG_SB) ); // wait Generate Start
 8001212:	bf00      	nop
 8001214:	4933      	ldr	r1, [pc, #204]	; (80012e4 <AT24C02_Read+0x100>)
 8001216:	6878      	ldr	r0, [r7, #4]
 8001218:	f004 fab8 	bl	800578c <I2C_GetFlagStatus>
 800121c:	4603      	mov	r3, r0
 800121e:	2b00      	cmp	r3, #0
 8001220:	d0f8      	beq.n	8001214 <AT24C02_Read+0x30>

	I2C_Send7bitAddress(I2Cx, AddressDevice, I2C_Direction_Transmitter);
 8001222:	78fb      	ldrb	r3, [r7, #3]
 8001224:	2200      	movs	r2, #0
 8001226:	4619      	mov	r1, r3
 8001228:	6878      	ldr	r0, [r7, #4]
 800122a:	f004 fa41 	bl	80056b0 <I2C_Send7bitAddress>
	while( !I2C_CheckEvent(I2Cx, I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED) ); // wait send Address Device
 800122e:	bf00      	nop
 8001230:	492d      	ldr	r1, [pc, #180]	; (80012e8 <AT24C02_Read+0x104>)
 8001232:	6878      	ldr	r0, [r7, #4]
 8001234:	f004 fa7a 	bl	800572c <I2C_CheckEvent>
 8001238:	4603      	mov	r3, r0
 800123a:	2b00      	cmp	r3, #0
 800123c:	d0f8      	beq.n	8001230 <AT24C02_Read+0x4c>

	I2C_SendData(I2Cx, AddressByte);
 800123e:	78bb      	ldrb	r3, [r7, #2]
 8001240:	4619      	mov	r1, r3
 8001242:	6878      	ldr	r0, [r7, #4]
 8001244:	f004 fa16 	bl	8005674 <I2C_SendData>
	while( !I2C_CheckEvent(I2Cx, I2C_EVENT_MASTER_BYTE_TRANSMITTED) ); // wait send Address Byte
 8001248:	bf00      	nop
 800124a:	4928      	ldr	r1, [pc, #160]	; (80012ec <AT24C02_Read+0x108>)
 800124c:	6878      	ldr	r0, [r7, #4]
 800124e:	f004 fa6d 	bl	800572c <I2C_CheckEvent>
 8001252:	4603      	mov	r3, r0
 8001254:	2b00      	cmp	r3, #0
 8001256:	d0f8      	beq.n	800124a <AT24C02_Read+0x66>

	I2C_GenerateSTART(I2Cx, ENABLE);
 8001258:	2101      	movs	r1, #1
 800125a:	6878      	ldr	r0, [r7, #4]
 800125c:	f004 f9aa 	bl	80055b4 <I2C_GenerateSTART>
	while( !I2C_GetFlagStatus(I2Cx, I2C_FLAG_SB) ); // wait Generate Start
 8001260:	bf00      	nop
 8001262:	4920      	ldr	r1, [pc, #128]	; (80012e4 <AT24C02_Read+0x100>)
 8001264:	6878      	ldr	r0, [r7, #4]
 8001266:	f004 fa91 	bl	800578c <I2C_GetFlagStatus>
 800126a:	4603      	mov	r3, r0
 800126c:	2b00      	cmp	r3, #0
 800126e:	d0f8      	beq.n	8001262 <AT24C02_Read+0x7e>

	I2C_Send7bitAddress(I2Cx, AddressDevice, I2C_Direction_Receiver);
 8001270:	78fb      	ldrb	r3, [r7, #3]
 8001272:	2201      	movs	r2, #1
 8001274:	4619      	mov	r1, r3
 8001276:	6878      	ldr	r0, [r7, #4]
 8001278:	f004 fa1a 	bl	80056b0 <I2C_Send7bitAddress>
	while( !I2C_CheckEvent(I2Cx, I2C_EVENT_MASTER_RECEIVER_MODE_SELECTED) ); // wait Send Address Device As Receiver
 800127c:	bf00      	nop
 800127e:	491c      	ldr	r1, [pc, #112]	; (80012f0 <AT24C02_Read+0x10c>)
 8001280:	6878      	ldr	r0, [r7, #4]
 8001282:	f004 fa53 	bl	800572c <I2C_CheckEvent>
 8001286:	4603      	mov	r3, r0
 8001288:	2b00      	cmp	r3, #0
 800128a:	d0f8      	beq.n	800127e <AT24C02_Read+0x9a>

	while( !I2C_CheckEvent(I2Cx, I2C_EVENT_MASTER_BYTE_RECEIVED) ); // wait Receive a Byte
 800128c:	bf00      	nop
 800128e:	4919      	ldr	r1, [pc, #100]	; (80012f4 <AT24C02_Read+0x110>)
 8001290:	6878      	ldr	r0, [r7, #4]
 8001292:	f004 fa4b 	bl	800572c <I2C_CheckEvent>
 8001296:	4603      	mov	r3, r0
 8001298:	2b00      	cmp	r3, #0
 800129a:	d0f8      	beq.n	800128e <AT24C02_Read+0xaa>
	ReceiveData = I2C_ReceiveData(I2Cx);
 800129c:	6878      	ldr	r0, [r7, #4]
 800129e:	f004 f9f9 	bl	8005694 <I2C_ReceiveData>
 80012a2:	4603      	mov	r3, r0
 80012a4:	73fb      	strb	r3, [r7, #15]

	I2C_NACKPositionConfig(I2Cx, I2C_NACKPosition_Current); // send not acknowledge
 80012a6:	f24f 71ff 	movw	r1, #63487	; 0xf7ff
 80012aa:	6878      	ldr	r0, [r7, #4]
 80012ac:	f004 fa1e 	bl	80056ec <I2C_NACKPositionConfig>
	I2C_AcknowledgeConfig(I2Cx, DISABLE);// disable acknowledge
 80012b0:	2100      	movs	r1, #0
 80012b2:	6878      	ldr	r0, [r7, #4]
 80012b4:	f004 f9be 	bl	8005634 <I2C_AcknowledgeConfig>

	I2C_GenerateSTOP(I2Cx, ENABLE);
 80012b8:	2101      	movs	r1, #1
 80012ba:	6878      	ldr	r0, [r7, #4]
 80012bc:	f004 f99a 	bl	80055f4 <I2C_GenerateSTOP>
	while (I2C_GetFlagStatus(I2Cx, I2C_FLAG_STOPF)); // wait Generate Stop Condition
 80012c0:	bf00      	nop
 80012c2:	490d      	ldr	r1, [pc, #52]	; (80012f8 <AT24C02_Read+0x114>)
 80012c4:	6878      	ldr	r0, [r7, #4]
 80012c6:	f004 fa61 	bl	800578c <I2C_GetFlagStatus>
 80012ca:	4603      	mov	r3, r0
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d1f8      	bne.n	80012c2 <AT24C02_Read+0xde>

	I2C_AcknowledgeConfig(I2Cx, DISABLE);// disable acknowledge
 80012d0:	2100      	movs	r1, #0
 80012d2:	6878      	ldr	r0, [r7, #4]
 80012d4:	f004 f9ae 	bl	8005634 <I2C_AcknowledgeConfig>

	return ReceiveData;
 80012d8:	7bfb      	ldrb	r3, [r7, #15]
};
 80012da:	4618      	mov	r0, r3
 80012dc:	3710      	adds	r7, #16
 80012de:	46bd      	mov	sp, r7
 80012e0:	bd80      	pop	{r7, pc}
 80012e2:	bf00      	nop
 80012e4:	10000001 	.word	0x10000001
 80012e8:	00070082 	.word	0x00070082
 80012ec:	00070084 	.word	0x00070084
 80012f0:	00030002 	.word	0x00030002
 80012f4:	00030040 	.word	0x00030040
 80012f8:	10000010 	.word	0x10000010

080012fc <NVIC_EnableIRQ>:
    The interrupt number cannot be a negative value.

    \param [in]      IRQn  Number of the external interrupt to enable
 */
static __INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012fc:	b480      	push	{r7}
 80012fe:	b083      	sub	sp, #12
 8001300:	af00      	add	r7, sp, #0
 8001302:	4603      	mov	r3, r0
 8001304:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
 8001306:	4908      	ldr	r1, [pc, #32]	; (8001328 <NVIC_EnableIRQ+0x2c>)
 8001308:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800130c:	095b      	lsrs	r3, r3, #5
 800130e:	79fa      	ldrb	r2, [r7, #7]
 8001310:	f002 021f 	and.w	r2, r2, #31
 8001314:	2001      	movs	r0, #1
 8001316:	fa00 f202 	lsl.w	r2, r0, r2
 800131a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800131e:	bf00      	nop
 8001320:	370c      	adds	r7, #12
 8001322:	46bd      	mov	sp, r7
 8001324:	bc80      	pop	{r7}
 8001326:	4770      	bx	lr
 8001328:	e000e100 	.word	0xe000e100

0800132c <Chicken_Init>:
// gloal variable
uint8_t LengthTimeStartIncubator = 0;// for save length time start incubator
uint16_t SaveSecond = 0;

void Chicken_Init()
{
 800132c:	b580      	push	{r7, lr}
 800132e:	b084      	sub	sp, #16
 8001330:	af00      	add	r7, sp, #0
// set clock 18 MHz for MCU
	PLL_SRC_Sel(2);
 8001332:	2002      	movs	r0, #2
 8001334:	f003 f81e 	bl	8004374 <PLL_SRC_Sel>
	PLL_MUL(2);
 8001338:	2002      	movs	r0, #2
 800133a:	f002 fff7 	bl	800432c <PLL_MUL>
	Src_Sys_Clk(3);
 800133e:	2003      	movs	r0, #3
 8001340:	f003 f846 	bl	80043d0 <Src_Sys_Clk>
	AHB_Div(4);
 8001344:	2004      	movs	r0, #4
 8001346:	f003 f86d 	bl	8004424 <AHB_Div>
	APB1_APB2_Div(1, 1);
 800134a:	2101      	movs	r1, #1
 800134c:	2001      	movs	r0, #1
 800134e:	f003 f965 	bl	800461c <APB1_APB2_Div>

// set Clocks Peripherals MCU
	SetPeriphAPB2(APB2_TIM1);
 8001352:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8001356:	f003 fa8f 	bl	8004878 <SetPeriphAPB2>
	SetPeriphAPB1(APB1_TIM2);
 800135a:	2001      	movs	r0, #1
 800135c:	f003 faa6 	bl	80048ac <SetPeriphAPB1>
	SetPeriphAPB1(APB1_I2C1);
 8001360:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8001364:	f003 faa2 	bl	80048ac <SetPeriphAPB1>
	SetPeriphAPB2(APB2_USART1);
 8001368:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800136c:	f003 fa84 	bl	8004878 <SetPeriphAPB2>
	SetPeriphAPB2(APB2_IOPB);
 8001370:	2008      	movs	r0, #8
 8001372:	f003 fa81 	bl	8004878 <SetPeriphAPB2>
	SetPeriphAPB2(APB2_IOPA);
 8001376:	2004      	movs	r0, #4
 8001378:	f003 fa7e 	bl	8004878 <SetPeriphAPB2>
	SetPeriphAPB2(APB2_AFIO);
 800137c:	2001      	movs	r0, #1
 800137e:	f003 fa7b 	bl	8004878 <SetPeriphAPB2>

// changes pins Peripherals
	AFIO->MAPR |= (1 << 1); // pins for I2C1 (SCL/PB8, SDA/PB9)
 8001382:	4a66      	ldr	r2, [pc, #408]	; (800151c <Chicken_Init+0x1f0>)
 8001384:	4b65      	ldr	r3, [pc, #404]	; (800151c <Chicken_Init+0x1f0>)
 8001386:	685b      	ldr	r3, [r3, #4]
 8001388:	f043 0302 	orr.w	r3, r3, #2
 800138c:	6053      	str	r3, [r2, #4]
	AFIO->MAPR |= (1 << 2); // pins for USART1  (TX/PB6, RX/PB7)
 800138e:	4a63      	ldr	r2, [pc, #396]	; (800151c <Chicken_Init+0x1f0>)
 8001390:	4b62      	ldr	r3, [pc, #392]	; (800151c <Chicken_Init+0x1f0>)
 8001392:	685b      	ldr	r3, [r3, #4]
 8001394:	f043 0304 	orr.w	r3, r3, #4
 8001398:	6053      	str	r3, [r2, #4]

// Initialize TIMER1, TIMER2, IWDG, TIMER2
	Tim1_PWM_Enable(2, 1); //enable TIMER1 CH2(FAN)
 800139a:	2101      	movs	r1, #1
 800139c:	2002      	movs	r0, #2
 800139e:	f003 fab1 	bl	8004904 <Tim1_PWM_Enable>
	Tim1_PWM_Enable(3, 1); //enable TIMER1 CH3(HEATER)
 80013a2:	2101      	movs	r1, #1
 80013a4:	2003      	movs	r0, #3
 80013a6:	f003 faad 	bl	8004904 <Tim1_PWM_Enable>
	TIM1->ARR = 60000;// set frequency Timer1 = 400Hz
 80013aa:	4b5d      	ldr	r3, [pc, #372]	; (8001520 <Chicken_Init+0x1f4>)
 80013ac:	f64e 2260 	movw	r2, #60000	; 0xea60
 80013b0:	859a      	strh	r2, [r3, #44]	; 0x2c
	Tim2Enable(1, 1, 4);// Enable Tim2 CH1 None event for pin
 80013b2:	2204      	movs	r2, #4
 80013b4:	2101      	movs	r1, #1
 80013b6:	2001      	movs	r0, #1
 80013b8:	f003 fb82 	bl	8004ac0 <Tim2Enable>
	TIM2->PSC = 18000;// every 1 second reload Register CNT
 80013bc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80013c0:	f244 6250 	movw	r2, #18000	; 0x4650
 80013c4:	851a      	strh	r2, [r3, #40]	; 0x28
	TIM2->ARR = 1000;// every 1 second reload Register CNT
 80013c6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80013ca:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80013ce:	859a      	strh	r2, [r3, #44]	; 0x2c
	NVIC_EnableIRQ(TIM2_IRQn);// enable interrupt time 2
 80013d0:	201c      	movs	r0, #28
 80013d2:	f7ff ff93 	bl	80012fc <NVIC_EnableIRQ>
	IWDG_Init(256); // Enable IWDG any 26214.4 ms reset MCU
 80013d6:	f44f 7080 	mov.w	r0, #256	; 0x100
 80013da:	f002 fc8f 	bl	8003cfc <IWDG_Init>
	IWDG_Reset();
 80013de:	f002 fce1 	bl	8003da4 <IWDG_Reset>

// set Pins As Output
	TimPinOutInit(PORTA, PIN9); // Enable PIN for TIMER1, CH 2(FAN)
 80013e2:	2109      	movs	r1, #9
 80013e4:	2001      	movs	r0, #1
 80013e6:	f003 fa7b 	bl	80048e0 <TimPinOutInit>
	TimPinOutInit(PORTA, PIN10); // Enable PIN for TIMER1, CH 3(HEATER)
 80013ea:	210a      	movs	r1, #10
 80013ec:	2001      	movs	r0, #1
 80013ee:	f003 fa77 	bl	80048e0 <TimPinOutInit>
	Init_PIN(PORTB,PIN6,Config_Out_50MHz,Alter_Out_PP); // set output for USART1 Tx
 80013f2:	2302      	movs	r3, #2
 80013f4:	2203      	movs	r2, #3
 80013f6:	2106      	movs	r1, #6
 80013f8:	2002      	movs	r0, #2
 80013fa:	f001 ff8b 	bl	8003314 <Init_PIN>
	Init_PIN(PORTB, PIN8, Config_Out_50MHz, Alter_Out_PP); // configuration out pin for I2C1 SCL
 80013fe:	2302      	movs	r3, #2
 8001400:	2203      	movs	r2, #3
 8001402:	2108      	movs	r1, #8
 8001404:	2002      	movs	r0, #2
 8001406:	f001 ff85 	bl	8003314 <Init_PIN>
	Init_PIN(PORTB, PIN9, Config_Out_50MHz, Alter_Out_PP); // Configuration out pin for I2C1 SDA
 800140a:	2302      	movs	r3, #2
 800140c:	2203      	movs	r2, #3
 800140e:	2109      	movs	r1, #9
 8001410:	2002      	movs	r0, #2
 8001412:	f001 ff7f 	bl	8003314 <Init_PIN>

// initialize USART1
	USART_InitTypeDef USART1_Config;
	USART1_Config.USART_BaudRate = 4800;
 8001416:	f44f 5396 	mov.w	r3, #4800	; 0x12c0
 800141a:	603b      	str	r3, [r7, #0]
	USART1_Config.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
 800141c:	2300      	movs	r3, #0
 800141e:	81bb      	strh	r3, [r7, #12]
	USART1_Config.USART_Mode = USART_Mode_Tx | USART_Mode_Rx;
 8001420:	230c      	movs	r3, #12
 8001422:	817b      	strh	r3, [r7, #10]
	USART1_Config.USART_Parity = USART_Parity_No;
 8001424:	2300      	movs	r3, #0
 8001426:	813b      	strh	r3, [r7, #8]
	USART1_Config.USART_StopBits = USART_StopBits_1;
 8001428:	2300      	movs	r3, #0
 800142a:	80fb      	strh	r3, [r7, #6]
	USART1_Config.USART_WordLength = USART_WordLength_8b;
 800142c:	2300      	movs	r3, #0
 800142e:	80bb      	strh	r3, [r7, #4]
	USART_Init(USART1, &USART1_Config);
 8001430:	463b      	mov	r3, r7
 8001432:	4619      	mov	r1, r3
 8001434:	483b      	ldr	r0, [pc, #236]	; (8001524 <Chicken_Init+0x1f8>)
 8001436:	f004 fa9b 	bl	8005970 <USART_Init>
	USART_Cmd(USART1, ENABLE);// enable usart1
 800143a:	2101      	movs	r1, #1
 800143c:	4839      	ldr	r0, [pc, #228]	; (8001524 <Chicken_Init+0x1f8>)
 800143e:	f004 fb51 	bl	8005ae4 <USART_Cmd>

// initialize I2C1
	I2C_Cmd(I2C1, ENABLE);
 8001442:	2101      	movs	r1, #1
 8001444:	4838      	ldr	r0, [pc, #224]	; (8001528 <Chicken_Init+0x1fc>)
 8001446:	f004 f895 	bl	8005574 <I2C_Cmd>
	I2C1_Init.I2C_Ack = I2C_Ack_Enable;
 800144a:	4b38      	ldr	r3, [pc, #224]	; (800152c <Chicken_Init+0x200>)
 800144c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001450:	815a      	strh	r2, [r3, #10]
	I2C1_Init.I2C_AcknowledgedAddress = I2C_AcknowledgedAddress_7bit;
 8001452:	4b36      	ldr	r3, [pc, #216]	; (800152c <Chicken_Init+0x200>)
 8001454:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001458:	819a      	strh	r2, [r3, #12]
	I2C1_Init.I2C_ClockSpeed = 70000;
 800145a:	4b34      	ldr	r3, [pc, #208]	; (800152c <Chicken_Init+0x200>)
 800145c:	4a34      	ldr	r2, [pc, #208]	; (8001530 <Chicken_Init+0x204>)
 800145e:	601a      	str	r2, [r3, #0]
	I2C1_Init.I2C_DutyCycle = I2C_DutyCycle_2;
 8001460:	4b32      	ldr	r3, [pc, #200]	; (800152c <Chicken_Init+0x200>)
 8001462:	f64b 72ff 	movw	r2, #49151	; 0xbfff
 8001466:	80da      	strh	r2, [r3, #6]
	I2C1_Init.I2C_Mode = I2C_Mode_I2C;
 8001468:	4b30      	ldr	r3, [pc, #192]	; (800152c <Chicken_Init+0x200>)
 800146a:	2200      	movs	r2, #0
 800146c:	809a      	strh	r2, [r3, #4]
	I2C1_Init.I2C_OwnAddress1 = 0x00;
 800146e:	4b2f      	ldr	r3, [pc, #188]	; (800152c <Chicken_Init+0x200>)
 8001470:	2200      	movs	r2, #0
 8001472:	811a      	strh	r2, [r3, #8]
	I2C_Init(I2C1, &I2C1_Init);
 8001474:	492d      	ldr	r1, [pc, #180]	; (800152c <Chicken_Init+0x200>)
 8001476:	482c      	ldr	r0, [pc, #176]	; (8001528 <Chicken_Init+0x1fc>)
 8001478:	f003 ffba 	bl	80053f0 <I2C_Init>
	I2C_Cmd(I2C1, ENABLE);
 800147c:	2101      	movs	r1, #1
 800147e:	482a      	ldr	r0, [pc, #168]	; (8001528 <Chicken_Init+0x1fc>)
 8001480:	f004 f878 	bl	8005574 <I2C_Cmd>

// Initialize LCD Character
	LCD_PIN.PIN_BIT0 = PIN0;
 8001484:	4b2b      	ldr	r3, [pc, #172]	; (8001534 <Chicken_Init+0x208>)
 8001486:	2200      	movs	r2, #0
 8001488:	701a      	strb	r2, [r3, #0]
	LCD_PIN.PORT_BIT0 = PORTB;
 800148a:	4b2a      	ldr	r3, [pc, #168]	; (8001534 <Chicken_Init+0x208>)
 800148c:	2202      	movs	r2, #2
 800148e:	705a      	strb	r2, [r3, #1]
	LCD_PIN.PIN_BIT1 = PIN7;
 8001490:	4b28      	ldr	r3, [pc, #160]	; (8001534 <Chicken_Init+0x208>)
 8001492:	2207      	movs	r2, #7
 8001494:	709a      	strb	r2, [r3, #2]
	LCD_PIN.PORT_BIT1 = PORTA;
 8001496:	4b27      	ldr	r3, [pc, #156]	; (8001534 <Chicken_Init+0x208>)
 8001498:	2201      	movs	r2, #1
 800149a:	70da      	strb	r2, [r3, #3]
	LCD_PIN.PIN_BIT2 = PIN6;
 800149c:	4b25      	ldr	r3, [pc, #148]	; (8001534 <Chicken_Init+0x208>)
 800149e:	2206      	movs	r2, #6
 80014a0:	711a      	strb	r2, [r3, #4]
	LCD_PIN.PORT_BIT2 = PORTA;
 80014a2:	4b24      	ldr	r3, [pc, #144]	; (8001534 <Chicken_Init+0x208>)
 80014a4:	2201      	movs	r2, #1
 80014a6:	715a      	strb	r2, [r3, #5]
	LCD_PIN.PIN_BIT3 = PIN5;
 80014a8:	4b22      	ldr	r3, [pc, #136]	; (8001534 <Chicken_Init+0x208>)
 80014aa:	2205      	movs	r2, #5
 80014ac:	719a      	strb	r2, [r3, #6]
	LCD_PIN.PORT_BIT3 =PORTA;
 80014ae:	4b21      	ldr	r3, [pc, #132]	; (8001534 <Chicken_Init+0x208>)
 80014b0:	2201      	movs	r2, #1
 80014b2:	71da      	strb	r2, [r3, #7]
	LCD_PIN.PIN_BIT4 = PIN4;
 80014b4:	4b1f      	ldr	r3, [pc, #124]	; (8001534 <Chicken_Init+0x208>)
 80014b6:	2204      	movs	r2, #4
 80014b8:	721a      	strb	r2, [r3, #8]
	LCD_PIN.PORT_BIT4 = PORTA;
 80014ba:	4b1e      	ldr	r3, [pc, #120]	; (8001534 <Chicken_Init+0x208>)
 80014bc:	2201      	movs	r2, #1
 80014be:	725a      	strb	r2, [r3, #9]
	LCD_PIN.PIN_BIT5 = PIN3;
 80014c0:	4b1c      	ldr	r3, [pc, #112]	; (8001534 <Chicken_Init+0x208>)
 80014c2:	2203      	movs	r2, #3
 80014c4:	729a      	strb	r2, [r3, #10]
	LCD_PIN.PORT_BIT5 = PORTA;
 80014c6:	4b1b      	ldr	r3, [pc, #108]	; (8001534 <Chicken_Init+0x208>)
 80014c8:	2201      	movs	r2, #1
 80014ca:	72da      	strb	r2, [r3, #11]
	LCD_PIN.PIN_BIT6 = PIN2;
 80014cc:	4b19      	ldr	r3, [pc, #100]	; (8001534 <Chicken_Init+0x208>)
 80014ce:	2202      	movs	r2, #2
 80014d0:	731a      	strb	r2, [r3, #12]
	LCD_PIN.PORT_BIT6 = PORTA;
 80014d2:	4b18      	ldr	r3, [pc, #96]	; (8001534 <Chicken_Init+0x208>)
 80014d4:	2201      	movs	r2, #1
 80014d6:	735a      	strb	r2, [r3, #13]
	LCD_PIN.PIN_BIT7 = PIN1;
 80014d8:	4b16      	ldr	r3, [pc, #88]	; (8001534 <Chicken_Init+0x208>)
 80014da:	2201      	movs	r2, #1
 80014dc:	739a      	strb	r2, [r3, #14]
	LCD_PIN.PORT_BIT7 = PORTA;
 80014de:	4b15      	ldr	r3, [pc, #84]	; (8001534 <Chicken_Init+0x208>)
 80014e0:	2201      	movs	r2, #1
 80014e2:	73da      	strb	r2, [r3, #15]
	LCD_PIN.PIN_E = PIN1;
 80014e4:	4b13      	ldr	r3, [pc, #76]	; (8001534 <Chicken_Init+0x208>)
 80014e6:	2201      	movs	r2, #1
 80014e8:	755a      	strb	r2, [r3, #21]
	LCD_PIN.PORT_E = PORTB;
 80014ea:	4b12      	ldr	r3, [pc, #72]	; (8001534 <Chicken_Init+0x208>)
 80014ec:	2202      	movs	r2, #2
 80014ee:	751a      	strb	r2, [r3, #20]
	LCD_PIN.PIN_RS = PIN11;
 80014f0:	4b10      	ldr	r3, [pc, #64]	; (8001534 <Chicken_Init+0x208>)
 80014f2:	220b      	movs	r2, #11
 80014f4:	745a      	strb	r2, [r3, #17]
	LCD_PIN.PORT_RS = PORTB;
 80014f6:	4b0f      	ldr	r3, [pc, #60]	; (8001534 <Chicken_Init+0x208>)
 80014f8:	2202      	movs	r2, #2
 80014fa:	741a      	strb	r2, [r3, #16]
	LCD_PIN.PIN_RW = PIN10;
 80014fc:	4b0d      	ldr	r3, [pc, #52]	; (8001534 <Chicken_Init+0x208>)
 80014fe:	220a      	movs	r2, #10
 8001500:	74da      	strb	r2, [r3, #19]
	LCD_PIN.PORT_RW = PORTB;
 8001502:	4b0c      	ldr	r3, [pc, #48]	; (8001534 <Chicken_Init+0x208>)
 8001504:	2202      	movs	r2, #2
 8001506:	749a      	strb	r2, [r3, #18]

	LCD_8BIT_Init(&LCD_PIN);
 8001508:	480a      	ldr	r0, [pc, #40]	; (8001534 <Chicken_Init+0x208>)
 800150a:	f002 fc71 	bl	8003df0 <LCD_8BIT_Init>

	Chicken_EggInfo();
 800150e:	f001 f819 	bl	8002544 <Chicken_EggInfo>
};
 8001512:	bf00      	nop
 8001514:	3710      	adds	r7, #16
 8001516:	46bd      	mov	sp, r7
 8001518:	bd80      	pop	{r7, pc}
 800151a:	bf00      	nop
 800151c:	40010000 	.word	0x40010000
 8001520:	40012c00 	.word	0x40012c00
 8001524:	40013800 	.word	0x40013800
 8001528:	40005400 	.word	0x40005400
 800152c:	200000ac 	.word	0x200000ac
 8001530:	00011170 	.word	0x00011170
 8001534:	200000bc 	.word	0x200000bc

08001538 <Chicken_MainMenu>:


void Chicken_MainMenu()
{
 8001538:	b580      	push	{r7, lr}
 800153a:	b082      	sub	sp, #8
 800153c:	af00      	add	r7, sp, #0
	unsigned char CharReceive = 0;
 800153e:	2300      	movs	r3, #0
 8001540:	71fb      	strb	r3, [r7, #7]

	USART_Printf(USART1, "welcome to menu for configuration chicken device\n");
 8001542:	4920      	ldr	r1, [pc, #128]	; (80015c4 <Chicken_MainMenu+0x8c>)
 8001544:	4820      	ldr	r0, [pc, #128]	; (80015c8 <Chicken_MainMenu+0x90>)
 8001546:	f000 fee3 	bl	8002310 <USART_Printf>
	USART_Printf(USART1, "you should enter number\n\n");
 800154a:	4920      	ldr	r1, [pc, #128]	; (80015cc <Chicken_MainMenu+0x94>)
 800154c:	481e      	ldr	r0, [pc, #120]	; (80015c8 <Chicken_MainMenu+0x90>)
 800154e:	f000 fedf 	bl	8002310 <USART_Printf>
	USART_Printf(USART1, "1. select type egg\n");
 8001552:	491f      	ldr	r1, [pc, #124]	; (80015d0 <Chicken_MainMenu+0x98>)
 8001554:	481c      	ldr	r0, [pc, #112]	; (80015c8 <Chicken_MainMenu+0x90>)
 8001556:	f000 fedb 	bl	8002310 <USART_Printf>
	USART_Printf(USART1, "2. configuration date\n");
 800155a:	491e      	ldr	r1, [pc, #120]	; (80015d4 <Chicken_MainMenu+0x9c>)
 800155c:	481a      	ldr	r0, [pc, #104]	; (80015c8 <Chicken_MainMenu+0x90>)
 800155e:	f000 fed7 	bl	8002310 <USART_Printf>
	USART_Printf(USART1, "3. start incubation\n");
 8001562:	491d      	ldr	r1, [pc, #116]	; (80015d8 <Chicken_MainMenu+0xa0>)
 8001564:	4818      	ldr	r0, [pc, #96]	; (80015c8 <Chicken_MainMenu+0x90>)
 8001566:	f000 fed3 	bl	8002310 <USART_Printf>
	USART_Printf(USART1, "4. exit from menu\n");
 800156a:	491c      	ldr	r1, [pc, #112]	; (80015dc <Chicken_MainMenu+0xa4>)
 800156c:	4816      	ldr	r0, [pc, #88]	; (80015c8 <Chicken_MainMenu+0x90>)
 800156e:	f000 fecf 	bl	8002310 <USART_Printf>
	IWDG_Reset();
 8001572:	f002 fc17 	bl	8003da4 <IWDG_Reset>

	CharReceive = USART_GetChar(USART1);// receive number 1 to 4
 8001576:	4814      	ldr	r0, [pc, #80]	; (80015c8 <Chicken_MainMenu+0x90>)
 8001578:	f000 feb2 	bl	80022e0 <USART_GetChar>
 800157c:	4603      	mov	r3, r0
 800157e:	71fb      	strb	r3, [r7, #7]
	if(CharReceive == '1'){// execute menu select type egg
 8001580:	79fb      	ldrb	r3, [r7, #7]
 8001582:	2b31      	cmp	r3, #49	; 0x31
 8001584:	d104      	bne.n	8001590 <Chicken_MainMenu+0x58>
		IWDG_Reset();
 8001586:	f002 fc0d 	bl	8003da4 <IWDG_Reset>
		Chicken_MenuEggSelect();
 800158a:	f000 f829 	bl	80015e0 <Chicken_MenuEggSelect>
	}
	else{

	};

};
 800158e:	e014      	b.n	80015ba <Chicken_MainMenu+0x82>
	CharReceive = USART_GetChar(USART1);// receive number 1 to 4
	if(CharReceive == '1'){// execute menu select type egg
		IWDG_Reset();
		Chicken_MenuEggSelect();
	}
	else if(CharReceive == '2'){// execute menu configuration date
 8001590:	79fb      	ldrb	r3, [r7, #7]
 8001592:	2b32      	cmp	r3, #50	; 0x32
 8001594:	d104      	bne.n	80015a0 <Chicken_MainMenu+0x68>
		IWDG_Reset();
 8001596:	f002 fc05 	bl	8003da4 <IWDG_Reset>
		Chicken_MenuConfigDate();
 800159a:	f000 f875 	bl	8001688 <Chicken_MenuConfigDate>
	}
	else{

	};

};
 800159e:	e00c      	b.n	80015ba <Chicken_MainMenu+0x82>
	}
	else if(CharReceive == '2'){// execute menu configuration date
		IWDG_Reset();
		Chicken_MenuConfigDate();
	}
	else if(CharReceive == '3'){
 80015a0:	79fb      	ldrb	r3, [r7, #7]
 80015a2:	2b33      	cmp	r3, #51	; 0x33
 80015a4:	d104      	bne.n	80015b0 <Chicken_MainMenu+0x78>
		IWDG_Reset();
 80015a6:	f002 fbfd 	bl	8003da4 <IWDG_Reset>
		Chicken_MenuStartIncubator();// execute menu start incubator
 80015aa:	f000 f915 	bl	80017d8 <Chicken_MenuStartIncubator>
	}
	else{

	};

};
 80015ae:	e004      	b.n	80015ba <Chicken_MainMenu+0x82>
	else if(CharReceive == '3'){
		IWDG_Reset();
		Chicken_MenuStartIncubator();// execute menu start incubator

	}
	else if(CharReceive == '4'){
 80015b0:	79fb      	ldrb	r3, [r7, #7]
 80015b2:	2b34      	cmp	r3, #52	; 0x34
 80015b4:	d101      	bne.n	80015ba <Chicken_MainMenu+0x82>
		IWDG_Reset();
 80015b6:	f002 fbf5 	bl	8003da4 <IWDG_Reset>
	}
	else{

	};

};
 80015ba:	bf00      	nop
 80015bc:	3708      	adds	r7, #8
 80015be:	46bd      	mov	sp, r7
 80015c0:	bd80      	pop	{r7, pc}
 80015c2:	bf00      	nop
 80015c4:	08007258 	.word	0x08007258
 80015c8:	40013800 	.word	0x40013800
 80015cc:	0800728c 	.word	0x0800728c
 80015d0:	080072a8 	.word	0x080072a8
 80015d4:	080072bc 	.word	0x080072bc
 80015d8:	080072d4 	.word	0x080072d4
 80015dc:	080072ec 	.word	0x080072ec

080015e0 <Chicken_MenuEggSelect>:
void Chicken_MenuEggSelect()
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b082      	sub	sp, #8
 80015e4:	af00      	add	r7, sp, #0
	USART_Printf(USART1, "\n\nPlease select egg");
 80015e6:	491f      	ldr	r1, [pc, #124]	; (8001664 <Chicken_MenuEggSelect+0x84>)
 80015e8:	481f      	ldr	r0, [pc, #124]	; (8001668 <Chicken_MenuEggSelect+0x88>)
 80015ea:	f000 fe91 	bl	8002310 <USART_Printf>
	USART_Printf(USART1, "\n\n1. hen");
 80015ee:	491f      	ldr	r1, [pc, #124]	; (800166c <Chicken_MenuEggSelect+0x8c>)
 80015f0:	481d      	ldr	r0, [pc, #116]	; (8001668 <Chicken_MenuEggSelect+0x88>)
 80015f2:	f000 fe8d 	bl	8002310 <USART_Printf>
	USART_Printf(USART1, "\n2. duck");
 80015f6:	491e      	ldr	r1, [pc, #120]	; (8001670 <Chicken_MenuEggSelect+0x90>)
 80015f8:	481b      	ldr	r0, [pc, #108]	; (8001668 <Chicken_MenuEggSelect+0x88>)
 80015fa:	f000 fe89 	bl	8002310 <USART_Printf>
	USART_Printf(USART1, "\n3. goose");
 80015fe:	491d      	ldr	r1, [pc, #116]	; (8001674 <Chicken_MenuEggSelect+0x94>)
 8001600:	4819      	ldr	r0, [pc, #100]	; (8001668 <Chicken_MenuEggSelect+0x88>)
 8001602:	f000 fe85 	bl	8002310 <USART_Printf>
	USART_Printf(USART1, "\n4. quail");
 8001606:	491c      	ldr	r1, [pc, #112]	; (8001678 <Chicken_MenuEggSelect+0x98>)
 8001608:	4817      	ldr	r0, [pc, #92]	; (8001668 <Chicken_MenuEggSelect+0x88>)
 800160a:	f000 fe81 	bl	8002310 <USART_Printf>
	USART_Printf(USART1, "\n5. Quail baht White");
 800160e:	491b      	ldr	r1, [pc, #108]	; (800167c <Chicken_MenuEggSelect+0x9c>)
 8001610:	4815      	ldr	r0, [pc, #84]	; (8001668 <Chicken_MenuEggSelect+0x88>)
 8001612:	f000 fe7d 	bl	8002310 <USART_Printf>
	USART_Printf(USART1, "\n6. turkey");
 8001616:	491a      	ldr	r1, [pc, #104]	; (8001680 <Chicken_MenuEggSelect+0xa0>)
 8001618:	4813      	ldr	r0, [pc, #76]	; (8001668 <Chicken_MenuEggSelect+0x88>)
 800161a:	f000 fe79 	bl	8002310 <USART_Printf>

	unsigned char EggType = 0;
 800161e:	2300      	movs	r3, #0
 8001620:	71fb      	strb	r3, [r7, #7]
	char USART_StringReceive[5];

	USART_Scanf(USART1, &USART_StringReceive, '.');// receive number for egg type
 8001622:	463b      	mov	r3, r7
 8001624:	222e      	movs	r2, #46	; 0x2e
 8001626:	4619      	mov	r1, r3
 8001628:	480f      	ldr	r0, [pc, #60]	; (8001668 <Chicken_MenuEggSelect+0x88>)
 800162a:	f000 fe93 	bl	8002354 <USART_Scanf>

	if( (EggType = atoi(USART_StringReceive)) <=  NUMBER_EGG){// convert string to integer
 800162e:	463b      	mov	r3, r7
 8001630:	4618      	mov	r0, r3
 8001632:	f004 fbdd 	bl	8005df0 <atoi>
 8001636:	4603      	mov	r3, r0
 8001638:	71fb      	strb	r3, [r7, #7]
 800163a:	79fb      	ldrb	r3, [r7, #7]
 800163c:	2b06      	cmp	r3, #6
 800163e:	d80a      	bhi.n	8001656 <Chicken_MenuEggSelect+0x76>
		AT24C02_Write(I2C1, 0xA0, 9, EggType);// write egg type(example: hen)
 8001640:	79fb      	ldrb	r3, [r7, #7]
 8001642:	2209      	movs	r2, #9
 8001644:	21a0      	movs	r1, #160	; 0xa0
 8001646:	480f      	ldr	r0, [pc, #60]	; (8001684 <Chicken_MenuEggSelect+0xa4>)
 8001648:	f7ff fd66 	bl	8001118 <AT24C02_Write>
		Chicken_Delay(12);// wait 12ms
 800164c:	200c      	movs	r0, #12
 800164e:	f001 f8e9 	bl	8002824 <Chicken_Delay>
		IWDG_Reset();
 8001652:	f002 fba7 	bl	8003da4 <IWDG_Reset>
	};

	Chicken_SelectEgg();// set structure MainEggInfo = EggInfo(example: hen, duck)
 8001656:	f000 fea3 	bl	80023a0 <Chicken_SelectEgg>
};
 800165a:	bf00      	nop
 800165c:	3708      	adds	r7, #8
 800165e:	46bd      	mov	sp, r7
 8001660:	bd80      	pop	{r7, pc}
 8001662:	bf00      	nop
 8001664:	08007300 	.word	0x08007300
 8001668:	40013800 	.word	0x40013800
 800166c:	08007314 	.word	0x08007314
 8001670:	08007320 	.word	0x08007320
 8001674:	0800732c 	.word	0x0800732c
 8001678:	08007338 	.word	0x08007338
 800167c:	08007344 	.word	0x08007344
 8001680:	0800735c 	.word	0x0800735c
 8001684:	40005400 	.word	0x40005400

08001688 <Chicken_MenuConfigDate>:
void Chicken_MenuConfigDate()
{
 8001688:	b580      	push	{r7, lr}
 800168a:	b082      	sub	sp, #8
 800168c:	af00      	add	r7, sp, #0
	char date[4];

	USART_Printf(USART1, "\nPlease Enter Year: ");
 800168e:	4948      	ldr	r1, [pc, #288]	; (80017b0 <Chicken_MenuConfigDate+0x128>)
 8001690:	4848      	ldr	r0, [pc, #288]	; (80017b4 <Chicken_MenuConfigDate+0x12c>)
 8001692:	f000 fe3d 	bl	8002310 <USART_Printf>
	USART_Scanf(USART1, &date, '.');// get year
 8001696:	1d3b      	adds	r3, r7, #4
 8001698:	222e      	movs	r2, #46	; 0x2e
 800169a:	4619      	mov	r1, r3
 800169c:	4845      	ldr	r0, [pc, #276]	; (80017b4 <Chicken_MenuConfigDate+0x12c>)
 800169e:	f000 fe59 	bl	8002354 <USART_Scanf>
	DS3231_WriteDate.Year = atoi(date);// convert string to int
 80016a2:	1d3b      	adds	r3, r7, #4
 80016a4:	4618      	mov	r0, r3
 80016a6:	f004 fba3 	bl	8005df0 <atoi>
 80016aa:	4603      	mov	r3, r0
 80016ac:	b2da      	uxtb	r2, r3
 80016ae:	4b42      	ldr	r3, [pc, #264]	; (80017b8 <Chicken_MenuConfigDate+0x130>)
 80016b0:	719a      	strb	r2, [r3, #6]
	IWDG_Reset();
 80016b2:	f002 fb77 	bl	8003da4 <IWDG_Reset>

	USART_Printf(USART1, "\nPlease Enter Month: ");
 80016b6:	4941      	ldr	r1, [pc, #260]	; (80017bc <Chicken_MenuConfigDate+0x134>)
 80016b8:	483e      	ldr	r0, [pc, #248]	; (80017b4 <Chicken_MenuConfigDate+0x12c>)
 80016ba:	f000 fe29 	bl	8002310 <USART_Printf>
	USART_Scanf(USART1, &date, '.');// get Month
 80016be:	1d3b      	adds	r3, r7, #4
 80016c0:	222e      	movs	r2, #46	; 0x2e
 80016c2:	4619      	mov	r1, r3
 80016c4:	483b      	ldr	r0, [pc, #236]	; (80017b4 <Chicken_MenuConfigDate+0x12c>)
 80016c6:	f000 fe45 	bl	8002354 <USART_Scanf>
	DS3231_WriteDate.Month = atoi(date);// convert string to int
 80016ca:	1d3b      	adds	r3, r7, #4
 80016cc:	4618      	mov	r0, r3
 80016ce:	f004 fb8f 	bl	8005df0 <atoi>
 80016d2:	4603      	mov	r3, r0
 80016d4:	b2da      	uxtb	r2, r3
 80016d6:	4b38      	ldr	r3, [pc, #224]	; (80017b8 <Chicken_MenuConfigDate+0x130>)
 80016d8:	715a      	strb	r2, [r3, #5]
	IWDG_Reset();
 80016da:	f002 fb63 	bl	8003da4 <IWDG_Reset>

	USART1_Printf("\nPlease Enter Date: ");
 80016de:	4838      	ldr	r0, [pc, #224]	; (80017c0 <Chicken_MenuConfigDate+0x138>)
 80016e0:	f003 fccc 	bl	800507c <USART1_Printf>
	USART_Scanf(USART1, &date, '.');// get Date range 1-31
 80016e4:	1d3b      	adds	r3, r7, #4
 80016e6:	222e      	movs	r2, #46	; 0x2e
 80016e8:	4619      	mov	r1, r3
 80016ea:	4832      	ldr	r0, [pc, #200]	; (80017b4 <Chicken_MenuConfigDate+0x12c>)
 80016ec:	f000 fe32 	bl	8002354 <USART_Scanf>
	DS3231_WriteDate.Date = atoi(date);// convert string to int
 80016f0:	1d3b      	adds	r3, r7, #4
 80016f2:	4618      	mov	r0, r3
 80016f4:	f004 fb7c 	bl	8005df0 <atoi>
 80016f8:	4603      	mov	r3, r0
 80016fa:	b2da      	uxtb	r2, r3
 80016fc:	4b2e      	ldr	r3, [pc, #184]	; (80017b8 <Chicken_MenuConfigDate+0x130>)
 80016fe:	711a      	strb	r2, [r3, #4]
	IWDG_Reset();
 8001700:	f002 fb50 	bl	8003da4 <IWDG_Reset>

	USART1_Printf("\nPlease Enter Day: ");
 8001704:	482f      	ldr	r0, [pc, #188]	; (80017c4 <Chicken_MenuConfigDate+0x13c>)
 8001706:	f003 fcb9 	bl	800507c <USART1_Printf>
	USART_Scanf(USART1, &date, '.');// get day range 1-7
 800170a:	1d3b      	adds	r3, r7, #4
 800170c:	222e      	movs	r2, #46	; 0x2e
 800170e:	4619      	mov	r1, r3
 8001710:	4828      	ldr	r0, [pc, #160]	; (80017b4 <Chicken_MenuConfigDate+0x12c>)
 8001712:	f000 fe1f 	bl	8002354 <USART_Scanf>
	DS3231_WriteDate.Day = atoi(date);// convert string to int
 8001716:	1d3b      	adds	r3, r7, #4
 8001718:	4618      	mov	r0, r3
 800171a:	f004 fb69 	bl	8005df0 <atoi>
 800171e:	4603      	mov	r3, r0
 8001720:	b2da      	uxtb	r2, r3
 8001722:	4b25      	ldr	r3, [pc, #148]	; (80017b8 <Chicken_MenuConfigDate+0x130>)
 8001724:	70da      	strb	r2, [r3, #3]
	IWDG_Reset();
 8001726:	f002 fb3d 	bl	8003da4 <IWDG_Reset>

	USART1_Printf("\nPlease Enter Hour: ");
 800172a:	4827      	ldr	r0, [pc, #156]	; (80017c8 <Chicken_MenuConfigDate+0x140>)
 800172c:	f003 fca6 	bl	800507c <USART1_Printf>
	USART_Scanf(USART1, &date, '.');// get Hour
 8001730:	1d3b      	adds	r3, r7, #4
 8001732:	222e      	movs	r2, #46	; 0x2e
 8001734:	4619      	mov	r1, r3
 8001736:	481f      	ldr	r0, [pc, #124]	; (80017b4 <Chicken_MenuConfigDate+0x12c>)
 8001738:	f000 fe0c 	bl	8002354 <USART_Scanf>
	DS3231_WriteDate.Hour = atoi(date);// convert string to int
 800173c:	1d3b      	adds	r3, r7, #4
 800173e:	4618      	mov	r0, r3
 8001740:	f004 fb56 	bl	8005df0 <atoi>
 8001744:	4603      	mov	r3, r0
 8001746:	b2da      	uxtb	r2, r3
 8001748:	4b1b      	ldr	r3, [pc, #108]	; (80017b8 <Chicken_MenuConfigDate+0x130>)
 800174a:	709a      	strb	r2, [r3, #2]
	IWDG_Reset();
 800174c:	f002 fb2a 	bl	8003da4 <IWDG_Reset>

	USART1_Printf("\nPlease Enter Minutes: ");
 8001750:	481e      	ldr	r0, [pc, #120]	; (80017cc <Chicken_MenuConfigDate+0x144>)
 8001752:	f003 fc93 	bl	800507c <USART1_Printf>
	USART_Scanf(USART1, &date, '.');// get Minutes
 8001756:	1d3b      	adds	r3, r7, #4
 8001758:	222e      	movs	r2, #46	; 0x2e
 800175a:	4619      	mov	r1, r3
 800175c:	4815      	ldr	r0, [pc, #84]	; (80017b4 <Chicken_MenuConfigDate+0x12c>)
 800175e:	f000 fdf9 	bl	8002354 <USART_Scanf>
	DS3231_WriteDate.Minutes = atoi(date);// convert string to int
 8001762:	1d3b      	adds	r3, r7, #4
 8001764:	4618      	mov	r0, r3
 8001766:	f004 fb43 	bl	8005df0 <atoi>
 800176a:	4603      	mov	r3, r0
 800176c:	b2da      	uxtb	r2, r3
 800176e:	4b12      	ldr	r3, [pc, #72]	; (80017b8 <Chicken_MenuConfigDate+0x130>)
 8001770:	705a      	strb	r2, [r3, #1]
	IWDG_Reset();
 8001772:	f002 fb17 	bl	8003da4 <IWDG_Reset>

	USART1_Printf("\nPlease Enter Seconds: ");
 8001776:	4816      	ldr	r0, [pc, #88]	; (80017d0 <Chicken_MenuConfigDate+0x148>)
 8001778:	f003 fc80 	bl	800507c <USART1_Printf>
	USART_Scanf(USART1, &date, '.');// get Seconds
 800177c:	1d3b      	adds	r3, r7, #4
 800177e:	222e      	movs	r2, #46	; 0x2e
 8001780:	4619      	mov	r1, r3
 8001782:	480c      	ldr	r0, [pc, #48]	; (80017b4 <Chicken_MenuConfigDate+0x12c>)
 8001784:	f000 fde6 	bl	8002354 <USART_Scanf>
	DS3231_WriteDate.Seconds = atoi(date);// convert string to int
 8001788:	1d3b      	adds	r3, r7, #4
 800178a:	4618      	mov	r0, r3
 800178c:	f004 fb30 	bl	8005df0 <atoi>
 8001790:	4603      	mov	r3, r0
 8001792:	b2da      	uxtb	r2, r3
 8001794:	4b08      	ldr	r3, [pc, #32]	; (80017b8 <Chicken_MenuConfigDate+0x130>)
 8001796:	701a      	strb	r2, [r3, #0]
	IWDG_Reset();
 8001798:	f002 fb04 	bl	8003da4 <IWDG_Reset>

	DS3231_WriteDateTime(I2C1, &DS3231_WriteDate);// set date and time
 800179c:	4906      	ldr	r1, [pc, #24]	; (80017b8 <Chicken_MenuConfigDate+0x130>)
 800179e:	480d      	ldr	r0, [pc, #52]	; (80017d4 <Chicken_MenuConfigDate+0x14c>)
 80017a0:	f001 f934 	bl	8002a0c <DS3231_WriteDateTime>
	IWDG_Reset();
 80017a4:	f002 fafe 	bl	8003da4 <IWDG_Reset>
};
 80017a8:	bf00      	nop
 80017aa:	3708      	adds	r7, #8
 80017ac:	46bd      	mov	sp, r7
 80017ae:	bd80      	pop	{r7, pc}
 80017b0:	08007368 	.word	0x08007368
 80017b4:	40013800 	.word	0x40013800
 80017b8:	20000150 	.word	0x20000150
 80017bc:	08007380 	.word	0x08007380
 80017c0:	08007398 	.word	0x08007398
 80017c4:	080073b0 	.word	0x080073b0
 80017c8:	080073c4 	.word	0x080073c4
 80017cc:	080073dc 	.word	0x080073dc
 80017d0:	080073f4 	.word	0x080073f4
 80017d4:	40005400 	.word	0x40005400

080017d8 <Chicken_MenuStartIncubator>:
void Chicken_MenuStartIncubator()
{
 80017d8:	b590      	push	{r4, r7, lr}
 80017da:	b085      	sub	sp, #20
 80017dc:	af00      	add	r7, sp, #0
	USART_Printf(USART1, "\nDo you Want to start Incubator\n\n");
 80017de:	494a      	ldr	r1, [pc, #296]	; (8001908 <Chicken_MenuStartIncubator+0x130>)
 80017e0:	484a      	ldr	r0, [pc, #296]	; (800190c <Chicken_MenuStartIncubator+0x134>)
 80017e2:	f000 fd95 	bl	8002310 <USART_Printf>
	USART_Printf(USART1, "1.YES\n");
 80017e6:	494a      	ldr	r1, [pc, #296]	; (8001910 <Chicken_MenuStartIncubator+0x138>)
 80017e8:	4848      	ldr	r0, [pc, #288]	; (800190c <Chicken_MenuStartIncubator+0x134>)
 80017ea:	f000 fd91 	bl	8002310 <USART_Printf>
	USART_Printf(USART1, "2.NO\n");
 80017ee:	4949      	ldr	r1, [pc, #292]	; (8001914 <Chicken_MenuStartIncubator+0x13c>)
 80017f0:	4846      	ldr	r0, [pc, #280]	; (800190c <Chicken_MenuStartIncubator+0x134>)
 80017f2:	f000 fd8d 	bl	8002310 <USART_Printf>

	if(USART_GetChar(USART1) == '1'){
 80017f6:	4845      	ldr	r0, [pc, #276]	; (800190c <Chicken_MenuStartIncubator+0x134>)
 80017f8:	f000 fd72 	bl	80022e0 <USART_GetChar>
 80017fc:	4603      	mov	r3, r0
 80017fe:	2b31      	cmp	r3, #49	; 0x31
 8001800:	d17d      	bne.n	80018fe <Chicken_MenuStartIncubator+0x126>
		IWDG_Reset();
 8001802:	f002 facf 	bl	8003da4 <IWDG_Reset>
		unsigned char ReceiveRandomPast = AT24C02_Read(I2C1, 0xA0, 0x0A);
 8001806:	220a      	movs	r2, #10
 8001808:	21a0      	movs	r1, #160	; 0xa0
 800180a:	4843      	ldr	r0, [pc, #268]	; (8001918 <Chicken_MenuStartIncubator+0x140>)
 800180c:	f7ff fcea 	bl	80011e4 <AT24C02_Read>
 8001810:	4603      	mov	r3, r0
 8001812:	73fb      	strb	r3, [r7, #15]
		unsigned char RandomNumberNow = 0;
 8001814:	2300      	movs	r3, #0
 8001816:	73bb      	strb	r3, [r7, #14]

		do{
			srand(ReceiveRandomPast);
 8001818:	7bfb      	ldrb	r3, [r7, #15]
 800181a:	4618      	mov	r0, r3
 800181c:	f004 fb2c 	bl	8005e78 <srand>
			RandomNumberNow = rand() % 255;// create random number
 8001820:	f004 fb52 	bl	8005ec8 <rand>
 8001824:	4602      	mov	r2, r0
 8001826:	4b3d      	ldr	r3, [pc, #244]	; (800191c <Chicken_MenuStartIncubator+0x144>)
 8001828:	fb82 3403 	smull	r3, r4, r2, r3
 800182c:	1913      	adds	r3, r2, r4
 800182e:	11d9      	asrs	r1, r3, #7
 8001830:	17d3      	asrs	r3, r2, #31
 8001832:	1ac9      	subs	r1, r1, r3
 8001834:	460b      	mov	r3, r1
 8001836:	021b      	lsls	r3, r3, #8
 8001838:	1a5b      	subs	r3, r3, r1
 800183a:	1ad1      	subs	r1, r2, r3
 800183c:	460b      	mov	r3, r1
 800183e:	73bb      	strb	r3, [r7, #14]
			}while(RandomNumberNow == ReceiveRandomPast);// if ReceiveRandomPast != RandomNumberNow exit from loop
 8001840:	7bba      	ldrb	r2, [r7, #14]
 8001842:	7bfb      	ldrb	r3, [r7, #15]
 8001844:	429a      	cmp	r2, r3
 8001846:	d0e7      	beq.n	8001818 <Chicken_MenuStartIncubator+0x40>

		AT24C02_Write(I2C1, 0xA0, 0x0A, RandomNumberNow);
 8001848:	7bbb      	ldrb	r3, [r7, #14]
 800184a:	220a      	movs	r2, #10
 800184c:	21a0      	movs	r1, #160	; 0xa0
 800184e:	4832      	ldr	r0, [pc, #200]	; (8001918 <Chicken_MenuStartIncubator+0x140>)
 8001850:	f7ff fc62 	bl	8001118 <AT24C02_Write>
		Chicken_Delay(12);// wait 12ms
 8001854:	200c      	movs	r0, #12
 8001856:	f000 ffe5 	bl	8002824 <Chicken_Delay>

		DS3231_ReadDateTime(I2C1, &TimeStartIncubator);// receive date and time start incubator
 800185a:	4931      	ldr	r1, [pc, #196]	; (8001920 <Chicken_MenuStartIncubator+0x148>)
 800185c:	482e      	ldr	r0, [pc, #184]	; (8001918 <Chicken_MenuStartIncubator+0x140>)
 800185e:	f001 f987 	bl	8002b70 <DS3231_ReadDateTime>
		AT24C02_Write(I2C1, 0xA0, 5, TimeStartIncubator.Year);
 8001862:	4b2f      	ldr	r3, [pc, #188]	; (8001920 <Chicken_MenuStartIncubator+0x148>)
 8001864:	799b      	ldrb	r3, [r3, #6]
 8001866:	2205      	movs	r2, #5
 8001868:	21a0      	movs	r1, #160	; 0xa0
 800186a:	482b      	ldr	r0, [pc, #172]	; (8001918 <Chicken_MenuStartIncubator+0x140>)
 800186c:	f7ff fc54 	bl	8001118 <AT24C02_Write>
		Chicken_Delay(12);// wait 12ms
 8001870:	200c      	movs	r0, #12
 8001872:	f000 ffd7 	bl	8002824 <Chicken_Delay>
		AT24C02_Write(I2C1, 0xA0, 6, TimeStartIncubator.Month);
 8001876:	4b2a      	ldr	r3, [pc, #168]	; (8001920 <Chicken_MenuStartIncubator+0x148>)
 8001878:	795b      	ldrb	r3, [r3, #5]
 800187a:	2206      	movs	r2, #6
 800187c:	21a0      	movs	r1, #160	; 0xa0
 800187e:	4826      	ldr	r0, [pc, #152]	; (8001918 <Chicken_MenuStartIncubator+0x140>)
 8001880:	f7ff fc4a 	bl	8001118 <AT24C02_Write>
		Chicken_Delay(12);// wait 12ms
 8001884:	200c      	movs	r0, #12
 8001886:	f000 ffcd 	bl	8002824 <Chicken_Delay>
		AT24C02_Write(I2C1, 0xA0, 7, TimeStartIncubator.Day);
 800188a:	4b25      	ldr	r3, [pc, #148]	; (8001920 <Chicken_MenuStartIncubator+0x148>)
 800188c:	78db      	ldrb	r3, [r3, #3]
 800188e:	2207      	movs	r2, #7
 8001890:	21a0      	movs	r1, #160	; 0xa0
 8001892:	4821      	ldr	r0, [pc, #132]	; (8001918 <Chicken_MenuStartIncubator+0x140>)
 8001894:	f7ff fc40 	bl	8001118 <AT24C02_Write>
		Chicken_Delay(12);// wait 12ms
 8001898:	200c      	movs	r0, #12
 800189a:	f000 ffc3 	bl	8002824 <Chicken_Delay>
		AT24C02_Write(I2C1, 0xA0, 8, TimeStartIncubator.Hour);
 800189e:	4b20      	ldr	r3, [pc, #128]	; (8001920 <Chicken_MenuStartIncubator+0x148>)
 80018a0:	789b      	ldrb	r3, [r3, #2]
 80018a2:	2208      	movs	r2, #8
 80018a4:	21a0      	movs	r1, #160	; 0xa0
 80018a6:	481c      	ldr	r0, [pc, #112]	; (8001918 <Chicken_MenuStartIncubator+0x140>)
 80018a8:	f7ff fc36 	bl	8001118 <AT24C02_Write>
		Chicken_Delay(12);// wait 12ms
 80018ac:	200c      	movs	r0, #12
 80018ae:	f000 ffb9 	bl	8002824 <Chicken_Delay>

		AT24C02_Write(I2C1, 0xA0, 0x0B, 1);// address byte 11 = 0 (length time incubator)
 80018b2:	2301      	movs	r3, #1
 80018b4:	220b      	movs	r2, #11
 80018b6:	21a0      	movs	r1, #160	; 0xa0
 80018b8:	4817      	ldr	r0, [pc, #92]	; (8001918 <Chicken_MenuStartIncubator+0x140>)
 80018ba:	f7ff fc2d 	bl	8001118 <AT24C02_Write>
		LengthTimeStartIncubator = 1;// for save length time start incubator
 80018be:	4b19      	ldr	r3, [pc, #100]	; (8001924 <Chicken_MenuStartIncubator+0x14c>)
 80018c0:	2201      	movs	r2, #1
 80018c2:	701a      	strb	r2, [r3, #0]

		Chicken_Delay(12);// wait 12ms
 80018c4:	200c      	movs	r0, #12
 80018c6:	f000 ffad 	bl	8002824 <Chicken_Delay>
		IWDG_Reset();
 80018ca:	f002 fa6b 	bl	8003da4 <IWDG_Reset>

		struct DS3231_DateTime NextDay;// structure for save next day
		Chicken_CalculateNextDay(&TimeStartIncubator, &NextDay);// calculate next day
 80018ce:	1d3b      	adds	r3, r7, #4
 80018d0:	4619      	mov	r1, r3
 80018d2:	4813      	ldr	r0, [pc, #76]	; (8001920 <Chicken_MenuStartIncubator+0x148>)
 80018d4:	f000 fbe0 	bl	8002098 <Chicken_CalculateNextDay>

		DS3231_WriteAlarm1.Seconds = NextDay.Seconds;
 80018d8:	793a      	ldrb	r2, [r7, #4]
 80018da:	4b13      	ldr	r3, [pc, #76]	; (8001928 <Chicken_MenuStartIncubator+0x150>)
 80018dc:	701a      	strb	r2, [r3, #0]
		DS3231_WriteAlarm1.Minutes = NextDay.Minutes;
 80018de:	797a      	ldrb	r2, [r7, #5]
 80018e0:	4b11      	ldr	r3, [pc, #68]	; (8001928 <Chicken_MenuStartIncubator+0x150>)
 80018e2:	705a      	strb	r2, [r3, #1]
		DS3231_WriteAlarm1.Hour = NextDay.Hour;
 80018e4:	79ba      	ldrb	r2, [r7, #6]
 80018e6:	4b10      	ldr	r3, [pc, #64]	; (8001928 <Chicken_MenuStartIncubator+0x150>)
 80018e8:	709a      	strb	r2, [r3, #2]
		DS3231_WriteAlarm1.Day = NextDay.Day;
 80018ea:	79fa      	ldrb	r2, [r7, #7]
 80018ec:	4b0e      	ldr	r3, [pc, #56]	; (8001928 <Chicken_MenuStartIncubator+0x150>)
 80018ee:	70da      	strb	r2, [r3, #3]
		DS3231_WriteAlarm1.Date = NextDay.Date;
 80018f0:	7a3a      	ldrb	r2, [r7, #8]
 80018f2:	4b0d      	ldr	r3, [pc, #52]	; (8001928 <Chicken_MenuStartIncubator+0x150>)
 80018f4:	711a      	strb	r2, [r3, #4]
		DS3231_SetAlarm1(I2C1, &DS3231_WriteAlarm1);// set ALARM1 for next day
 80018f6:	490c      	ldr	r1, [pc, #48]	; (8001928 <Chicken_MenuStartIncubator+0x150>)
 80018f8:	4807      	ldr	r0, [pc, #28]	; (8001918 <Chicken_MenuStartIncubator+0x140>)
 80018fa:	f001 fa33 	bl	8002d64 <DS3231_SetAlarm1>
	}
};
 80018fe:	bf00      	nop
 8001900:	3714      	adds	r7, #20
 8001902:	46bd      	mov	sp, r7
 8001904:	bd90      	pop	{r4, r7, pc}
 8001906:	bf00      	nop
 8001908:	0800740c 	.word	0x0800740c
 800190c:	40013800 	.word	0x40013800
 8001910:	08007430 	.word	0x08007430
 8001914:	08007438 	.word	0x08007438
 8001918:	40005400 	.word	0x40005400
 800191c:	80808081 	.word	0x80808081
 8001920:	200000f8 	.word	0x200000f8
 8001924:	2000009c 	.word	0x2000009c
 8001928:	200000d4 	.word	0x200000d4

0800192c <Chicken_Monitoring>:


void Chicken_Monitoring(float *temp, float *humidity, struct DS3231_DateTime *TimeStartIncubator, char SelectDisplay)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	b084      	sub	sp, #16
 8001930:	af00      	add	r7, sp, #0
 8001932:	60f8      	str	r0, [r7, #12]
 8001934:	60b9      	str	r1, [r7, #8]
 8001936:	607a      	str	r2, [r7, #4]
 8001938:	70fb      	strb	r3, [r7, #3]
	switch(SelectDisplay){
 800193a:	78fb      	ldrb	r3, [r7, #3]
 800193c:	3b01      	subs	r3, #1
 800193e:	2b04      	cmp	r3, #4
 8001940:	d828      	bhi.n	8001994 <Chicken_Monitoring+0x68>
 8001942:	a201      	add	r2, pc, #4	; (adr r2, 8001948 <Chicken_Monitoring+0x1c>)
 8001944:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001948:	0800195d 	.word	0x0800195d
 800194c:	0800196b 	.word	0x0800196b
 8001950:	08001975 	.word	0x08001975
 8001954:	08001981 	.word	0x08001981
 8001958:	0800198b 	.word	0x0800198b
	case 1:
		Chicken_MonitoringHumiTemp(temp, humidity);// display humidity and temperature
 800195c:	68b9      	ldr	r1, [r7, #8]
 800195e:	68f8      	ldr	r0, [r7, #12]
 8001960:	f000 f81c 	bl	800199c <Chicken_MonitoringHumiTemp>
		IWDG_Reset();
 8001964:	f002 fa1e 	bl	8003da4 <IWDG_Reset>
		break;
 8001968:	e014      	b.n	8001994 <Chicken_Monitoring+0x68>
	case 2:
		Chicken_MonitoringTimeNow();
 800196a:	f000 f85b 	bl	8001a24 <Chicken_MonitoringTimeNow>
		IWDG_Reset();
 800196e:	f002 fa19 	bl	8003da4 <IWDG_Reset>
		break;
 8001972:	e00f      	b.n	8001994 <Chicken_Monitoring+0x68>
	case 3:
		Chicken_MonitoringTimeStartIncubator(TimeStartIncubator);// display time start incubator
 8001974:	6878      	ldr	r0, [r7, #4]
 8001976:	f000 f909 	bl	8001b8c <Chicken_MonitoringTimeStartIncubator>
		IWDG_Reset();
 800197a:	f002 fa13 	bl	8003da4 <IWDG_Reset>
		break;
 800197e:	e009      	b.n	8001994 <Chicken_Monitoring+0x68>
	case 4:
		Chicken_MonitoringTimeStopIncubator();// display time stop incubator
 8001980:	f000 f9bc 	bl	8001cfc <Chicken_MonitoringTimeStopIncubator>
		IWDG_Reset();
 8001984:	f002 fa0e 	bl	8003da4 <IWDG_Reset>
		break;
 8001988:	e004      	b.n	8001994 <Chicken_Monitoring+0x68>
	case 5:
		Chicken_MonitoringTypePeriod();
 800198a:	f000 fa85 	bl	8001e98 <Chicken_MonitoringTypePeriod>
		IWDG_Reset();
 800198e:	f002 fa09 	bl	8003da4 <IWDG_Reset>
		break;
 8001992:	bf00      	nop
	}
};
 8001994:	bf00      	nop
 8001996:	3710      	adds	r7, #16
 8001998:	46bd      	mov	sp, r7
 800199a:	bd80      	pop	{r7, pc}

0800199c <Chicken_MonitoringHumiTemp>:
void Chicken_MonitoringHumiTemp(float *temp, float *humidity)
{
 800199c:	b580      	push	{r7, lr}
 800199e:	b086      	sub	sp, #24
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	6078      	str	r0, [r7, #4]
 80019a4:	6039      	str	r1, [r7, #0]
	char tempStr[6];
	char humidityStr[6];

	ftoa(*temp, tempStr, 2);// convert temperature(float) to string
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	f107 0110 	add.w	r1, r7, #16
 80019ae:	2202      	movs	r2, #2
 80019b0:	4618      	mov	r0, r3
 80019b2:	f000 ffd9 	bl	8002968 <ftoa>
	ftoa(*humidity, humidityStr, 2);// convert humidity(float) to string
 80019b6:	683b      	ldr	r3, [r7, #0]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	f107 0108 	add.w	r1, r7, #8
 80019be:	2202      	movs	r2, #2
 80019c0:	4618      	mov	r0, r3
 80019c2:	f000 ffd1 	bl	8002968 <ftoa>

	LCD_CLS(&LCD_PIN);
 80019c6:	4814      	ldr	r0, [pc, #80]	; (8001a18 <Chicken_MonitoringHumiTemp+0x7c>)
 80019c8:	f002 fb1a 	bl	8004000 <LCD_CLS>
	LCD_Home(&LCD_PIN);
 80019cc:	4812      	ldr	r0, [pc, #72]	; (8001a18 <Chicken_MonitoringHumiTemp+0x7c>)
 80019ce:	f002 fb23 	bl	8004018 <LCD_Home>
	LCD_Printf("temp: ", &LCD_PIN);
 80019d2:	4911      	ldr	r1, [pc, #68]	; (8001a18 <Chicken_MonitoringHumiTemp+0x7c>)
 80019d4:	4811      	ldr	r0, [pc, #68]	; (8001a1c <Chicken_MonitoringHumiTemp+0x80>)
 80019d6:	f002 faf3 	bl	8003fc0 <LCD_Printf>
	LCD_Printf(tempStr, &LCD_PIN);// display temperature
 80019da:	f107 0310 	add.w	r3, r7, #16
 80019de:	490e      	ldr	r1, [pc, #56]	; (8001a18 <Chicken_MonitoringHumiTemp+0x7c>)
 80019e0:	4618      	mov	r0, r3
 80019e2:	f002 faed 	bl	8003fc0 <LCD_Printf>

	LCD_XY(0, 2, &LCD_PIN);// go to x = 0, y = 2
 80019e6:	4a0c      	ldr	r2, [pc, #48]	; (8001a18 <Chicken_MonitoringHumiTemp+0x7c>)
 80019e8:	2102      	movs	r1, #2
 80019ea:	2000      	movs	r0, #0
 80019ec:	f002 fb20 	bl	8004030 <LCD_XY>
	LCD_Printf("humi: ", &LCD_PIN);
 80019f0:	4909      	ldr	r1, [pc, #36]	; (8001a18 <Chicken_MonitoringHumiTemp+0x7c>)
 80019f2:	480b      	ldr	r0, [pc, #44]	; (8001a20 <Chicken_MonitoringHumiTemp+0x84>)
 80019f4:	f002 fae4 	bl	8003fc0 <LCD_Printf>
	LCD_Printf(humidityStr, &LCD_PIN);// display humidity
 80019f8:	f107 0308 	add.w	r3, r7, #8
 80019fc:	4906      	ldr	r1, [pc, #24]	; (8001a18 <Chicken_MonitoringHumiTemp+0x7c>)
 80019fe:	4618      	mov	r0, r3
 8001a00:	f002 fade 	bl	8003fc0 <LCD_Printf>
	LCD_PutChar('%', &LCD_PIN);
 8001a04:	4904      	ldr	r1, [pc, #16]	; (8001a18 <Chicken_MonitoringHumiTemp+0x7c>)
 8001a06:	2025      	movs	r0, #37	; 0x25
 8001a08:	f002 faa0 	bl	8003f4c <LCD_PutChar>
	IWDG_Reset();
 8001a0c:	f002 f9ca 	bl	8003da4 <IWDG_Reset>
};
 8001a10:	bf00      	nop
 8001a12:	3718      	adds	r7, #24
 8001a14:	46bd      	mov	sp, r7
 8001a16:	bd80      	pop	{r7, pc}
 8001a18:	200000bc 	.word	0x200000bc
 8001a1c:	08007440 	.word	0x08007440
 8001a20:	08007448 	.word	0x08007448

08001a24 <Chicken_MonitoringTimeNow>:
void Chicken_MonitoringTimeNow()
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	b088      	sub	sp, #32
 8001a28:	af00      	add	r7, sp, #0
	char buffer[10];// array for convert int to string
	char timeString[15];// variable for display date (example: 95/12/01 22:55)

	LCD_CLS(&LCD_PIN);
 8001a2a:	4851      	ldr	r0, [pc, #324]	; (8001b70 <Chicken_MonitoringTimeNow+0x14c>)
 8001a2c:	f002 fae8 	bl	8004000 <LCD_CLS>
	LCD_Home(&LCD_PIN);
 8001a30:	484f      	ldr	r0, [pc, #316]	; (8001b70 <Chicken_MonitoringTimeNow+0x14c>)
 8001a32:	f002 faf1 	bl	8004018 <LCD_Home>
	LCD_Printf("time now: ", &LCD_PIN);
 8001a36:	494e      	ldr	r1, [pc, #312]	; (8001b70 <Chicken_MonitoringTimeNow+0x14c>)
 8001a38:	484e      	ldr	r0, [pc, #312]	; (8001b74 <Chicken_MonitoringTimeNow+0x150>)
 8001a3a:	f002 fac1 	bl	8003fc0 <LCD_Printf>

	DS3231_ReadDateTime(I2C1, &DS3231_ReadDate);// read date and time
 8001a3e:	494e      	ldr	r1, [pc, #312]	; (8001b78 <Chicken_MonitoringTimeNow+0x154>)
 8001a40:	484e      	ldr	r0, [pc, #312]	; (8001b7c <Chicken_MonitoringTimeNow+0x158>)
 8001a42:	f001 f895 	bl	8002b70 <DS3231_ReadDateTime>

	itoa(DS3231_ReadDate.Year, buffer, 10);// convert year to string (10 = decimal)
 8001a46:	4b4c      	ldr	r3, [pc, #304]	; (8001b78 <Chicken_MonitoringTimeNow+0x154>)
 8001a48:	799b      	ldrb	r3, [r3, #6]
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	f107 0314 	add.w	r3, r7, #20
 8001a50:	220a      	movs	r2, #10
 8001a52:	4619      	mov	r1, r3
 8001a54:	f004 fa0d 	bl	8005e72 <itoa>
	strcat(timeString, buffer);
 8001a58:	f107 0214 	add.w	r2, r7, #20
 8001a5c:	1d3b      	adds	r3, r7, #4
 8001a5e:	4611      	mov	r1, r2
 8001a60:	4618      	mov	r0, r3
 8001a62:	f004 fa6b 	bl	8005f3c <strcat>

	strcat(timeString, "/");
 8001a66:	1d3b      	adds	r3, r7, #4
 8001a68:	4618      	mov	r0, r3
 8001a6a:	f7fe fb7b 	bl	8000164 <strlen>
 8001a6e:	4603      	mov	r3, r0
 8001a70:	461a      	mov	r2, r3
 8001a72:	1d3b      	adds	r3, r7, #4
 8001a74:	4413      	add	r3, r2
 8001a76:	4942      	ldr	r1, [pc, #264]	; (8001b80 <Chicken_MonitoringTimeNow+0x15c>)
 8001a78:	461a      	mov	r2, r3
 8001a7a:	460b      	mov	r3, r1
 8001a7c:	881b      	ldrh	r3, [r3, #0]
 8001a7e:	8013      	strh	r3, [r2, #0]

	itoa(DS3231_ReadDate.Month, buffer, 10);// convert Month to string
 8001a80:	4b3d      	ldr	r3, [pc, #244]	; (8001b78 <Chicken_MonitoringTimeNow+0x154>)
 8001a82:	795b      	ldrb	r3, [r3, #5]
 8001a84:	4618      	mov	r0, r3
 8001a86:	f107 0314 	add.w	r3, r7, #20
 8001a8a:	220a      	movs	r2, #10
 8001a8c:	4619      	mov	r1, r3
 8001a8e:	f004 f9f0 	bl	8005e72 <itoa>
	strcat(timeString, buffer);
 8001a92:	f107 0214 	add.w	r2, r7, #20
 8001a96:	1d3b      	adds	r3, r7, #4
 8001a98:	4611      	mov	r1, r2
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	f004 fa4e 	bl	8005f3c <strcat>

	strcat(timeString, "/");
 8001aa0:	1d3b      	adds	r3, r7, #4
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	f7fe fb5e 	bl	8000164 <strlen>
 8001aa8:	4603      	mov	r3, r0
 8001aaa:	461a      	mov	r2, r3
 8001aac:	1d3b      	adds	r3, r7, #4
 8001aae:	4413      	add	r3, r2
 8001ab0:	4933      	ldr	r1, [pc, #204]	; (8001b80 <Chicken_MonitoringTimeNow+0x15c>)
 8001ab2:	461a      	mov	r2, r3
 8001ab4:	460b      	mov	r3, r1
 8001ab6:	881b      	ldrh	r3, [r3, #0]
 8001ab8:	8013      	strh	r3, [r2, #0]

	itoa(DS3231_ReadDate.Date, buffer, 10);// convert Date(range 1-31) to string
 8001aba:	4b2f      	ldr	r3, [pc, #188]	; (8001b78 <Chicken_MonitoringTimeNow+0x154>)
 8001abc:	791b      	ldrb	r3, [r3, #4]
 8001abe:	4618      	mov	r0, r3
 8001ac0:	f107 0314 	add.w	r3, r7, #20
 8001ac4:	220a      	movs	r2, #10
 8001ac6:	4619      	mov	r1, r3
 8001ac8:	f004 f9d3 	bl	8005e72 <itoa>
	strcat(timeString, buffer);
 8001acc:	f107 0214 	add.w	r2, r7, #20
 8001ad0:	1d3b      	adds	r3, r7, #4
 8001ad2:	4611      	mov	r1, r2
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	f004 fa31 	bl	8005f3c <strcat>

	strcat(timeString, " "); // add character space to time
 8001ada:	1d3b      	adds	r3, r7, #4
 8001adc:	4618      	mov	r0, r3
 8001ade:	f7fe fb41 	bl	8000164 <strlen>
 8001ae2:	4603      	mov	r3, r0
 8001ae4:	461a      	mov	r2, r3
 8001ae6:	1d3b      	adds	r3, r7, #4
 8001ae8:	4413      	add	r3, r2
 8001aea:	4926      	ldr	r1, [pc, #152]	; (8001b84 <Chicken_MonitoringTimeNow+0x160>)
 8001aec:	461a      	mov	r2, r3
 8001aee:	460b      	mov	r3, r1
 8001af0:	881b      	ldrh	r3, [r3, #0]
 8001af2:	8013      	strh	r3, [r2, #0]

	itoa(DS3231_ReadDate.Hour, buffer, 10);// convert hour to string
 8001af4:	4b20      	ldr	r3, [pc, #128]	; (8001b78 <Chicken_MonitoringTimeNow+0x154>)
 8001af6:	789b      	ldrb	r3, [r3, #2]
 8001af8:	4618      	mov	r0, r3
 8001afa:	f107 0314 	add.w	r3, r7, #20
 8001afe:	220a      	movs	r2, #10
 8001b00:	4619      	mov	r1, r3
 8001b02:	f004 f9b6 	bl	8005e72 <itoa>
	strcat(timeString, buffer);
 8001b06:	f107 0214 	add.w	r2, r7, #20
 8001b0a:	1d3b      	adds	r3, r7, #4
 8001b0c:	4611      	mov	r1, r2
 8001b0e:	4618      	mov	r0, r3
 8001b10:	f004 fa14 	bl	8005f3c <strcat>

	strcat(timeString, ":");
 8001b14:	1d3b      	adds	r3, r7, #4
 8001b16:	4618      	mov	r0, r3
 8001b18:	f7fe fb24 	bl	8000164 <strlen>
 8001b1c:	4603      	mov	r3, r0
 8001b1e:	461a      	mov	r2, r3
 8001b20:	1d3b      	adds	r3, r7, #4
 8001b22:	4413      	add	r3, r2
 8001b24:	4918      	ldr	r1, [pc, #96]	; (8001b88 <Chicken_MonitoringTimeNow+0x164>)
 8001b26:	461a      	mov	r2, r3
 8001b28:	460b      	mov	r3, r1
 8001b2a:	881b      	ldrh	r3, [r3, #0]
 8001b2c:	8013      	strh	r3, [r2, #0]

	itoa(DS3231_ReadDate.Minutes, buffer, 10);// convert Minutes to string
 8001b2e:	4b12      	ldr	r3, [pc, #72]	; (8001b78 <Chicken_MonitoringTimeNow+0x154>)
 8001b30:	785b      	ldrb	r3, [r3, #1]
 8001b32:	4618      	mov	r0, r3
 8001b34:	f107 0314 	add.w	r3, r7, #20
 8001b38:	220a      	movs	r2, #10
 8001b3a:	4619      	mov	r1, r3
 8001b3c:	f004 f999 	bl	8005e72 <itoa>
	strcat(timeString, buffer);
 8001b40:	f107 0214 	add.w	r2, r7, #20
 8001b44:	1d3b      	adds	r3, r7, #4
 8001b46:	4611      	mov	r1, r2
 8001b48:	4618      	mov	r0, r3
 8001b4a:	f004 f9f7 	bl	8005f3c <strcat>

	LCD_XY(0, 2, &LCD_PIN);// go to x=0, y=2
 8001b4e:	4a08      	ldr	r2, [pc, #32]	; (8001b70 <Chicken_MonitoringTimeNow+0x14c>)
 8001b50:	2102      	movs	r1, #2
 8001b52:	2000      	movs	r0, #0
 8001b54:	f002 fa6c 	bl	8004030 <LCD_XY>
	LCD_Printf(timeString, &LCD_PIN);// display time(example 95/02/011 10:58)
 8001b58:	1d3b      	adds	r3, r7, #4
 8001b5a:	4905      	ldr	r1, [pc, #20]	; (8001b70 <Chicken_MonitoringTimeNow+0x14c>)
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	f002 fa2f 	bl	8003fc0 <LCD_Printf>
	IWDG_Reset();
 8001b62:	f002 f91f 	bl	8003da4 <IWDG_Reset>
};
 8001b66:	bf00      	nop
 8001b68:	3720      	adds	r7, #32
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	bd80      	pop	{r7, pc}
 8001b6e:	bf00      	nop
 8001b70:	200000bc 	.word	0x200000bc
 8001b74:	08007450 	.word	0x08007450
 8001b78:	200000f0 	.word	0x200000f0
 8001b7c:	40005400 	.word	0x40005400
 8001b80:	0800745c 	.word	0x0800745c
 8001b84:	08007460 	.word	0x08007460
 8001b88:	08007464 	.word	0x08007464

08001b8c <Chicken_MonitoringTimeStartIncubator>:
void Chicken_MonitoringTimeStartIncubator(struct DS3231_DateTime *TimeStartIncubator)
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	b08a      	sub	sp, #40	; 0x28
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	6078      	str	r0, [r7, #4]
	char TimeStartString[15];
	char buffer[10];// array for convert int to string

	LCD_CLS(&LCD_PIN);
 8001b94:	4854      	ldr	r0, [pc, #336]	; (8001ce8 <Chicken_MonitoringTimeStartIncubator+0x15c>)
 8001b96:	f002 fa33 	bl	8004000 <LCD_CLS>
	LCD_Home(&LCD_PIN);
 8001b9a:	4853      	ldr	r0, [pc, #332]	; (8001ce8 <Chicken_MonitoringTimeStartIncubator+0x15c>)
 8001b9c:	f002 fa3c 	bl	8004018 <LCD_Home>
	LCD_Printf("Start Incubator:", &LCD_PIN);
 8001ba0:	4951      	ldr	r1, [pc, #324]	; (8001ce8 <Chicken_MonitoringTimeStartIncubator+0x15c>)
 8001ba2:	4852      	ldr	r0, [pc, #328]	; (8001cec <Chicken_MonitoringTimeStartIncubator+0x160>)
 8001ba4:	f002 fa0c 	bl	8003fc0 <LCD_Printf>

	itoa(TimeStartIncubator->Year, buffer, 10);// convert year to string
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	799b      	ldrb	r3, [r3, #6]
 8001bac:	4618      	mov	r0, r3
 8001bae:	f107 030c 	add.w	r3, r7, #12
 8001bb2:	220a      	movs	r2, #10
 8001bb4:	4619      	mov	r1, r3
 8001bb6:	f004 f95c 	bl	8005e72 <itoa>
	strcat(TimeStartString, buffer);// collect array TimeStartString and buffer
 8001bba:	f107 020c 	add.w	r2, r7, #12
 8001bbe:	f107 0318 	add.w	r3, r7, #24
 8001bc2:	4611      	mov	r1, r2
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	f004 f9b9 	bl	8005f3c <strcat>

	strcat(TimeStartString, "/");// collect array TimeStartString and slash character(/)
 8001bca:	f107 0318 	add.w	r3, r7, #24
 8001bce:	4618      	mov	r0, r3
 8001bd0:	f7fe fac8 	bl	8000164 <strlen>
 8001bd4:	4603      	mov	r3, r0
 8001bd6:	461a      	mov	r2, r3
 8001bd8:	f107 0318 	add.w	r3, r7, #24
 8001bdc:	4413      	add	r3, r2
 8001bde:	4944      	ldr	r1, [pc, #272]	; (8001cf0 <Chicken_MonitoringTimeStartIncubator+0x164>)
 8001be0:	461a      	mov	r2, r3
 8001be2:	460b      	mov	r3, r1
 8001be4:	881b      	ldrh	r3, [r3, #0]
 8001be6:	8013      	strh	r3, [r2, #0]

	itoa(TimeStartIncubator->Month, buffer, 10);// convert Month to string
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	795b      	ldrb	r3, [r3, #5]
 8001bec:	4618      	mov	r0, r3
 8001bee:	f107 030c 	add.w	r3, r7, #12
 8001bf2:	220a      	movs	r2, #10
 8001bf4:	4619      	mov	r1, r3
 8001bf6:	f004 f93c 	bl	8005e72 <itoa>
	strcat(TimeStartString, buffer);// collect array TimeStartString and buffer
 8001bfa:	f107 020c 	add.w	r2, r7, #12
 8001bfe:	f107 0318 	add.w	r3, r7, #24
 8001c02:	4611      	mov	r1, r2
 8001c04:	4618      	mov	r0, r3
 8001c06:	f004 f999 	bl	8005f3c <strcat>

	strcat(TimeStartString, "/");// collect array TimeStartString and slash character(/)
 8001c0a:	f107 0318 	add.w	r3, r7, #24
 8001c0e:	4618      	mov	r0, r3
 8001c10:	f7fe faa8 	bl	8000164 <strlen>
 8001c14:	4603      	mov	r3, r0
 8001c16:	461a      	mov	r2, r3
 8001c18:	f107 0318 	add.w	r3, r7, #24
 8001c1c:	4413      	add	r3, r2
 8001c1e:	4934      	ldr	r1, [pc, #208]	; (8001cf0 <Chicken_MonitoringTimeStartIncubator+0x164>)
 8001c20:	461a      	mov	r2, r3
 8001c22:	460b      	mov	r3, r1
 8001c24:	881b      	ldrh	r3, [r3, #0]
 8001c26:	8013      	strh	r3, [r2, #0]

	itoa(TimeStartIncubator->Date, buffer, 10);// convert date(1-31) to string
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	791b      	ldrb	r3, [r3, #4]
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	f107 030c 	add.w	r3, r7, #12
 8001c32:	220a      	movs	r2, #10
 8001c34:	4619      	mov	r1, r3
 8001c36:	f004 f91c 	bl	8005e72 <itoa>
	strcat(TimeStartString, buffer);// collect array TimeStartString and buffer
 8001c3a:	f107 020c 	add.w	r2, r7, #12
 8001c3e:	f107 0318 	add.w	r3, r7, #24
 8001c42:	4611      	mov	r1, r2
 8001c44:	4618      	mov	r0, r3
 8001c46:	f004 f979 	bl	8005f3c <strcat>

	strcat(TimeStartString, " ");// collect array TimeStartString and space character
 8001c4a:	f107 0318 	add.w	r3, r7, #24
 8001c4e:	4618      	mov	r0, r3
 8001c50:	f7fe fa88 	bl	8000164 <strlen>
 8001c54:	4603      	mov	r3, r0
 8001c56:	461a      	mov	r2, r3
 8001c58:	f107 0318 	add.w	r3, r7, #24
 8001c5c:	4413      	add	r3, r2
 8001c5e:	4925      	ldr	r1, [pc, #148]	; (8001cf4 <Chicken_MonitoringTimeStartIncubator+0x168>)
 8001c60:	461a      	mov	r2, r3
 8001c62:	460b      	mov	r3, r1
 8001c64:	881b      	ldrh	r3, [r3, #0]
 8001c66:	8013      	strh	r3, [r2, #0]

	itoa(TimeStartIncubator->Hour, buffer, 10);// convert hour to string
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	789b      	ldrb	r3, [r3, #2]
 8001c6c:	4618      	mov	r0, r3
 8001c6e:	f107 030c 	add.w	r3, r7, #12
 8001c72:	220a      	movs	r2, #10
 8001c74:	4619      	mov	r1, r3
 8001c76:	f004 f8fc 	bl	8005e72 <itoa>
	strcat(TimeStartString, buffer);// collect arrays TimeStartString and buffer
 8001c7a:	f107 020c 	add.w	r2, r7, #12
 8001c7e:	f107 0318 	add.w	r3, r7, #24
 8001c82:	4611      	mov	r1, r2
 8001c84:	4618      	mov	r0, r3
 8001c86:	f004 f959 	bl	8005f3c <strcat>

	strcat(TimeStartString, ":");// collect array TimeStartString and character (:)
 8001c8a:	f107 0318 	add.w	r3, r7, #24
 8001c8e:	4618      	mov	r0, r3
 8001c90:	f7fe fa68 	bl	8000164 <strlen>
 8001c94:	4603      	mov	r3, r0
 8001c96:	461a      	mov	r2, r3
 8001c98:	f107 0318 	add.w	r3, r7, #24
 8001c9c:	4413      	add	r3, r2
 8001c9e:	4916      	ldr	r1, [pc, #88]	; (8001cf8 <Chicken_MonitoringTimeStartIncubator+0x16c>)
 8001ca0:	461a      	mov	r2, r3
 8001ca2:	460b      	mov	r3, r1
 8001ca4:	881b      	ldrh	r3, [r3, #0]
 8001ca6:	8013      	strh	r3, [r2, #0]

	itoa(TimeStartIncubator->Minutes, buffer, 10);// convert Minutes to sting
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	785b      	ldrb	r3, [r3, #1]
 8001cac:	4618      	mov	r0, r3
 8001cae:	f107 030c 	add.w	r3, r7, #12
 8001cb2:	220a      	movs	r2, #10
 8001cb4:	4619      	mov	r1, r3
 8001cb6:	f004 f8dc 	bl	8005e72 <itoa>
	strcat(TimeStartString, buffer);// collect arrays TimeStartString and buffer
 8001cba:	f107 020c 	add.w	r2, r7, #12
 8001cbe:	f107 0318 	add.w	r3, r7, #24
 8001cc2:	4611      	mov	r1, r2
 8001cc4:	4618      	mov	r0, r3
 8001cc6:	f004 f939 	bl	8005f3c <strcat>

	LCD_XY(0, 2, &LCD_PIN);// go to x(0), y(2)
 8001cca:	4a07      	ldr	r2, [pc, #28]	; (8001ce8 <Chicken_MonitoringTimeStartIncubator+0x15c>)
 8001ccc:	2102      	movs	r1, #2
 8001cce:	2000      	movs	r0, #0
 8001cd0:	f002 f9ae 	bl	8004030 <LCD_XY>
	LCD_Printf(TimeStartString, &LCD_PIN);// display variable TimeStartString (Time start Incubator)
 8001cd4:	f107 0318 	add.w	r3, r7, #24
 8001cd8:	4903      	ldr	r1, [pc, #12]	; (8001ce8 <Chicken_MonitoringTimeStartIncubator+0x15c>)
 8001cda:	4618      	mov	r0, r3
 8001cdc:	f002 f970 	bl	8003fc0 <LCD_Printf>
};
 8001ce0:	bf00      	nop
 8001ce2:	3728      	adds	r7, #40	; 0x28
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	bd80      	pop	{r7, pc}
 8001ce8:	200000bc 	.word	0x200000bc
 8001cec:	08007468 	.word	0x08007468
 8001cf0:	0800745c 	.word	0x0800745c
 8001cf4:	08007460 	.word	0x08007460
 8001cf8:	08007464 	.word	0x08007464

08001cfc <Chicken_MonitoringTimeStopIncubator>:
void Chicken_MonitoringTimeStopIncubator()
{
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	b08a      	sub	sp, #40	; 0x28
 8001d00:	af00      	add	r7, sp, #0
	struct DS3231_DateTime TimeStopIncubator;
	TimeStopIncubator = TimeStartIncubator;
 8001d02:	4a5e      	ldr	r2, [pc, #376]	; (8001e7c <Chicken_MonitoringTimeStopIncubator+0x180>)
 8001d04:	f107 031c 	add.w	r3, r7, #28
 8001d08:	6810      	ldr	r0, [r2, #0]
 8001d0a:	6018      	str	r0, [r3, #0]
 8001d0c:	8891      	ldrh	r1, [r2, #4]
 8001d0e:	7992      	ldrb	r2, [r2, #6]
 8001d10:	8099      	strh	r1, [r3, #4]
 8001d12:	719a      	strb	r2, [r3, #6]

	for(int i = 1; i <= MainEggInfo.AllTime; i++)
 8001d14:	2301      	movs	r3, #1
 8001d16:	627b      	str	r3, [r7, #36]	; 0x24
 8001d18:	e00a      	b.n	8001d30 <Chicken_MonitoringTimeStopIncubator+0x34>
		Chicken_CalculateNextDay(&TimeStopIncubator, &TimeStopIncubator);// calculate stop incubator
 8001d1a:	f107 021c 	add.w	r2, r7, #28
 8001d1e:	f107 031c 	add.w	r3, r7, #28
 8001d22:	4611      	mov	r1, r2
 8001d24:	4618      	mov	r0, r3
 8001d26:	f000 f9b7 	bl	8002098 <Chicken_CalculateNextDay>
void Chicken_MonitoringTimeStopIncubator()
{
	struct DS3231_DateTime TimeStopIncubator;
	TimeStopIncubator = TimeStartIncubator;

	for(int i = 1; i <= MainEggInfo.AllTime; i++)
 8001d2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d2c:	3301      	adds	r3, #1
 8001d2e:	627b      	str	r3, [r7, #36]	; 0x24
 8001d30:	4b53      	ldr	r3, [pc, #332]	; (8001e80 <Chicken_MonitoringTimeStopIncubator+0x184>)
 8001d32:	7adb      	ldrb	r3, [r3, #11]
 8001d34:	461a      	mov	r2, r3
 8001d36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d38:	429a      	cmp	r2, r3
 8001d3a:	daee      	bge.n	8001d1a <Chicken_MonitoringTimeStopIncubator+0x1e>
		Chicken_CalculateNextDay(&TimeStopIncubator, &TimeStopIncubator);// calculate stop incubator

	char TimeStopString[15];
	char buffer[10];// array for convert int to string

	LCD_CLS(&LCD_PIN);
 8001d3c:	4851      	ldr	r0, [pc, #324]	; (8001e84 <Chicken_MonitoringTimeStopIncubator+0x188>)
 8001d3e:	f002 f95f 	bl	8004000 <LCD_CLS>
	LCD_Home(&LCD_PIN);
 8001d42:	4850      	ldr	r0, [pc, #320]	; (8001e84 <Chicken_MonitoringTimeStopIncubator+0x188>)
 8001d44:	f002 f968 	bl	8004018 <LCD_Home>
	LCD_Printf("Stop Incubator:", &LCD_PIN);
 8001d48:	494e      	ldr	r1, [pc, #312]	; (8001e84 <Chicken_MonitoringTimeStopIncubator+0x188>)
 8001d4a:	484f      	ldr	r0, [pc, #316]	; (8001e88 <Chicken_MonitoringTimeStopIncubator+0x18c>)
 8001d4c:	f002 f938 	bl	8003fc0 <LCD_Printf>

	itoa(TimeStopIncubator.Year, buffer, 10);// convert year to string
 8001d50:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8001d54:	4618      	mov	r0, r3
 8001d56:	463b      	mov	r3, r7
 8001d58:	220a      	movs	r2, #10
 8001d5a:	4619      	mov	r1, r3
 8001d5c:	f004 f889 	bl	8005e72 <itoa>
	strcat(TimeStopString, buffer);// collect array TimeStopString and buffer
 8001d60:	463a      	mov	r2, r7
 8001d62:	f107 030c 	add.w	r3, r7, #12
 8001d66:	4611      	mov	r1, r2
 8001d68:	4618      	mov	r0, r3
 8001d6a:	f004 f8e7 	bl	8005f3c <strcat>

	strcat(TimeStopString, "/");// collect array TimeStopString and slash character(/)
 8001d6e:	f107 030c 	add.w	r3, r7, #12
 8001d72:	4618      	mov	r0, r3
 8001d74:	f7fe f9f6 	bl	8000164 <strlen>
 8001d78:	4603      	mov	r3, r0
 8001d7a:	461a      	mov	r2, r3
 8001d7c:	f107 030c 	add.w	r3, r7, #12
 8001d80:	4413      	add	r3, r2
 8001d82:	4942      	ldr	r1, [pc, #264]	; (8001e8c <Chicken_MonitoringTimeStopIncubator+0x190>)
 8001d84:	461a      	mov	r2, r3
 8001d86:	460b      	mov	r3, r1
 8001d88:	881b      	ldrh	r3, [r3, #0]
 8001d8a:	8013      	strh	r3, [r2, #0]

	itoa(TimeStopIncubator.Month, buffer, 10);// convert Month to string
 8001d8c:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8001d90:	4618      	mov	r0, r3
 8001d92:	463b      	mov	r3, r7
 8001d94:	220a      	movs	r2, #10
 8001d96:	4619      	mov	r1, r3
 8001d98:	f004 f86b 	bl	8005e72 <itoa>
	strcat(TimeStopString, buffer);// collect array TimeStopString and buffer
 8001d9c:	463a      	mov	r2, r7
 8001d9e:	f107 030c 	add.w	r3, r7, #12
 8001da2:	4611      	mov	r1, r2
 8001da4:	4618      	mov	r0, r3
 8001da6:	f004 f8c9 	bl	8005f3c <strcat>

	strcat(TimeStopString, "/");// collect array TimeStopString and slash character(/)
 8001daa:	f107 030c 	add.w	r3, r7, #12
 8001dae:	4618      	mov	r0, r3
 8001db0:	f7fe f9d8 	bl	8000164 <strlen>
 8001db4:	4603      	mov	r3, r0
 8001db6:	461a      	mov	r2, r3
 8001db8:	f107 030c 	add.w	r3, r7, #12
 8001dbc:	4413      	add	r3, r2
 8001dbe:	4933      	ldr	r1, [pc, #204]	; (8001e8c <Chicken_MonitoringTimeStopIncubator+0x190>)
 8001dc0:	461a      	mov	r2, r3
 8001dc2:	460b      	mov	r3, r1
 8001dc4:	881b      	ldrh	r3, [r3, #0]
 8001dc6:	8013      	strh	r3, [r2, #0]

	itoa(TimeStopIncubator.Date, buffer, 10);// convert date(1-31) to string
 8001dc8:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001dcc:	4618      	mov	r0, r3
 8001dce:	463b      	mov	r3, r7
 8001dd0:	220a      	movs	r2, #10
 8001dd2:	4619      	mov	r1, r3
 8001dd4:	f004 f84d 	bl	8005e72 <itoa>
	strcat(TimeStopString, buffer);// collect array TimeStopString and buffer
 8001dd8:	463a      	mov	r2, r7
 8001dda:	f107 030c 	add.w	r3, r7, #12
 8001dde:	4611      	mov	r1, r2
 8001de0:	4618      	mov	r0, r3
 8001de2:	f004 f8ab 	bl	8005f3c <strcat>

	strcat(TimeStopString, " ");// collect array TimeStopString and space character
 8001de6:	f107 030c 	add.w	r3, r7, #12
 8001dea:	4618      	mov	r0, r3
 8001dec:	f7fe f9ba 	bl	8000164 <strlen>
 8001df0:	4603      	mov	r3, r0
 8001df2:	461a      	mov	r2, r3
 8001df4:	f107 030c 	add.w	r3, r7, #12
 8001df8:	4413      	add	r3, r2
 8001dfa:	4925      	ldr	r1, [pc, #148]	; (8001e90 <Chicken_MonitoringTimeStopIncubator+0x194>)
 8001dfc:	461a      	mov	r2, r3
 8001dfe:	460b      	mov	r3, r1
 8001e00:	881b      	ldrh	r3, [r3, #0]
 8001e02:	8013      	strh	r3, [r2, #0]

	itoa(TimeStopIncubator.Hour, buffer, 10);// convert hour to string
 8001e04:	7fbb      	ldrb	r3, [r7, #30]
 8001e06:	4618      	mov	r0, r3
 8001e08:	463b      	mov	r3, r7
 8001e0a:	220a      	movs	r2, #10
 8001e0c:	4619      	mov	r1, r3
 8001e0e:	f004 f830 	bl	8005e72 <itoa>
	strcat(TimeStopString, buffer);// collect arrays TimeStopString and buffer
 8001e12:	463a      	mov	r2, r7
 8001e14:	f107 030c 	add.w	r3, r7, #12
 8001e18:	4611      	mov	r1, r2
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	f004 f88e 	bl	8005f3c <strcat>

	strcat(TimeStopString, ":");// collect array TimeStopString and character (:)
 8001e20:	f107 030c 	add.w	r3, r7, #12
 8001e24:	4618      	mov	r0, r3
 8001e26:	f7fe f99d 	bl	8000164 <strlen>
 8001e2a:	4603      	mov	r3, r0
 8001e2c:	461a      	mov	r2, r3
 8001e2e:	f107 030c 	add.w	r3, r7, #12
 8001e32:	4413      	add	r3, r2
 8001e34:	4917      	ldr	r1, [pc, #92]	; (8001e94 <Chicken_MonitoringTimeStopIncubator+0x198>)
 8001e36:	461a      	mov	r2, r3
 8001e38:	460b      	mov	r3, r1
 8001e3a:	881b      	ldrh	r3, [r3, #0]
 8001e3c:	8013      	strh	r3, [r2, #0]

	itoa(TimeStopIncubator.Minutes, buffer, 10);// convert Minutes to sting
 8001e3e:	7f7b      	ldrb	r3, [r7, #29]
 8001e40:	4618      	mov	r0, r3
 8001e42:	463b      	mov	r3, r7
 8001e44:	220a      	movs	r2, #10
 8001e46:	4619      	mov	r1, r3
 8001e48:	f004 f813 	bl	8005e72 <itoa>
	strcat(TimeStopString, buffer);// collect arrays TimeStopString and buffer
 8001e4c:	463a      	mov	r2, r7
 8001e4e:	f107 030c 	add.w	r3, r7, #12
 8001e52:	4611      	mov	r1, r2
 8001e54:	4618      	mov	r0, r3
 8001e56:	f004 f871 	bl	8005f3c <strcat>

	LCD_XY(0, 2, &LCD_PIN);// go to x(0), y(2)
 8001e5a:	4a0a      	ldr	r2, [pc, #40]	; (8001e84 <Chicken_MonitoringTimeStopIncubator+0x188>)
 8001e5c:	2102      	movs	r1, #2
 8001e5e:	2000      	movs	r0, #0
 8001e60:	f002 f8e6 	bl	8004030 <LCD_XY>
	LCD_Printf(TimeStopString, &LCD_PIN);// display variable TimeStartString (Time start Incubator)
 8001e64:	f107 030c 	add.w	r3, r7, #12
 8001e68:	4906      	ldr	r1, [pc, #24]	; (8001e84 <Chicken_MonitoringTimeStopIncubator+0x188>)
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	f002 f8a8 	bl	8003fc0 <LCD_Printf>
	IWDG_Reset();
 8001e70:	f001 ff98 	bl	8003da4 <IWDG_Reset>
};
 8001e74:	bf00      	nop
 8001e76:	3728      	adds	r7, #40	; 0x28
 8001e78:	46bd      	mov	sp, r7
 8001e7a:	bd80      	pop	{r7, pc}
 8001e7c:	200000f8 	.word	0x200000f8
 8001e80:	20000120 	.word	0x20000120
 8001e84:	200000bc 	.word	0x200000bc
 8001e88:	0800747c 	.word	0x0800747c
 8001e8c:	0800745c 	.word	0x0800745c
 8001e90:	08007460 	.word	0x08007460
 8001e94:	08007464 	.word	0x08007464

08001e98 <Chicken_MonitoringTypePeriod>:
void Chicken_MonitoringTypePeriod()
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	af00      	add	r7, sp, #0
	LCD_CLS(&LCD_PIN);
 8001e9c:	4817      	ldr	r0, [pc, #92]	; (8001efc <Chicken_MonitoringTypePeriod+0x64>)
 8001e9e:	f002 f8af 	bl	8004000 <LCD_CLS>
	LCD_Home(&LCD_PIN);
 8001ea2:	4816      	ldr	r0, [pc, #88]	; (8001efc <Chicken_MonitoringTypePeriod+0x64>)
 8001ea4:	f002 f8b8 	bl	8004018 <LCD_Home>
	LCD_Printf("type period is:", &LCD_PIN);
 8001ea8:	4914      	ldr	r1, [pc, #80]	; (8001efc <Chicken_MonitoringTypePeriod+0x64>)
 8001eaa:	4815      	ldr	r0, [pc, #84]	; (8001f00 <Chicken_MonitoringTypePeriod+0x68>)
 8001eac:	f002 f888 	bl	8003fc0 <LCD_Printf>
	LCD_XY(0, 2, &LCD_PIN);// go to x=0, y=2 from LCD
 8001eb0:	4a12      	ldr	r2, [pc, #72]	; (8001efc <Chicken_MonitoringTypePeriod+0x64>)
 8001eb2:	2102      	movs	r1, #2
 8001eb4:	2000      	movs	r0, #0
 8001eb6:	f002 f8bb 	bl	8004030 <LCD_XY>

	if(Chicken_CalculateTypePeriod(LengthTimeStartIncubator) == PERIOD_SETTER)
 8001eba:	4b12      	ldr	r3, [pc, #72]	; (8001f04 <Chicken_MonitoringTypePeriod+0x6c>)
 8001ebc:	781b      	ldrb	r3, [r3, #0]
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	f000 f9d0 	bl	8002264 <Chicken_CalculateTypePeriod>
 8001ec4:	4603      	mov	r3, r0
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d104      	bne.n	8001ed4 <Chicken_MonitoringTypePeriod+0x3c>
		LCD_Printf("Setter", &LCD_PIN);
 8001eca:	490c      	ldr	r1, [pc, #48]	; (8001efc <Chicken_MonitoringTypePeriod+0x64>)
 8001ecc:	480e      	ldr	r0, [pc, #56]	; (8001f08 <Chicken_MonitoringTypePeriod+0x70>)
 8001ece:	f002 f877 	bl	8003fc0 <LCD_Printf>
	else if(Chicken_CalculateTypePeriod(LengthTimeStartIncubator == PERIOD_HATCHER))
		LCD_Printf("Hatcher", &LCD_PIN);
};
 8001ed2:	e010      	b.n	8001ef6 <Chicken_MonitoringTypePeriod+0x5e>
	LCD_Printf("type period is:", &LCD_PIN);
	LCD_XY(0, 2, &LCD_PIN);// go to x=0, y=2 from LCD

	if(Chicken_CalculateTypePeriod(LengthTimeStartIncubator) == PERIOD_SETTER)
		LCD_Printf("Setter", &LCD_PIN);
	else if(Chicken_CalculateTypePeriod(LengthTimeStartIncubator == PERIOD_HATCHER))
 8001ed4:	4b0b      	ldr	r3, [pc, #44]	; (8001f04 <Chicken_MonitoringTypePeriod+0x6c>)
 8001ed6:	781b      	ldrb	r3, [r3, #0]
 8001ed8:	2b01      	cmp	r3, #1
 8001eda:	bf0c      	ite	eq
 8001edc:	2301      	moveq	r3, #1
 8001ede:	2300      	movne	r3, #0
 8001ee0:	b2db      	uxtb	r3, r3
 8001ee2:	4618      	mov	r0, r3
 8001ee4:	f000 f9be 	bl	8002264 <Chicken_CalculateTypePeriod>
 8001ee8:	4603      	mov	r3, r0
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d003      	beq.n	8001ef6 <Chicken_MonitoringTypePeriod+0x5e>
		LCD_Printf("Hatcher", &LCD_PIN);
 8001eee:	4903      	ldr	r1, [pc, #12]	; (8001efc <Chicken_MonitoringTypePeriod+0x64>)
 8001ef0:	4806      	ldr	r0, [pc, #24]	; (8001f0c <Chicken_MonitoringTypePeriod+0x74>)
 8001ef2:	f002 f865 	bl	8003fc0 <LCD_Printf>
};
 8001ef6:	bf00      	nop
 8001ef8:	bd80      	pop	{r7, pc}
 8001efa:	bf00      	nop
 8001efc:	200000bc 	.word	0x200000bc
 8001f00:	0800748c 	.word	0x0800748c
 8001f04:	2000009c 	.word	0x2000009c
 8001f08:	0800749c 	.word	0x0800749c
 8001f0c:	080074a4 	.word	0x080074a4

08001f10 <Chicken_ControlTempFan>:


void Chicken_ControlTempFan(float *Temp, uint8_t *LengthTimeStartIncubator)
{
 8001f10:	b580      	push	{r7, lr}
 8001f12:	b084      	sub	sp, #16
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	6078      	str	r0, [r7, #4]
 8001f18:	6039      	str	r1, [r7, #0]
	float TempDiffer = (*Temp - MainEggInfo.TempIncubator) * (float)15;// calculate temperature difference
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681a      	ldr	r2, [r3, #0]
 8001f1e:	4b2e      	ldr	r3, [pc, #184]	; (8001fd8 <Chicken_ControlTempFan+0xc8>)
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	4619      	mov	r1, r3
 8001f24:	4610      	mov	r0, r2
 8001f26:	f7fe fde1 	bl	8000aec <__aeabi_fsub>
 8001f2a:	4603      	mov	r3, r0
 8001f2c:	492b      	ldr	r1, [pc, #172]	; (8001fdc <Chicken_ControlTempFan+0xcc>)
 8001f2e:	4618      	mov	r0, r3
 8001f30:	f7fe fee6 	bl	8000d00 <__aeabi_fmul>
 8001f34:	4603      	mov	r3, r0
 8001f36:	60fb      	str	r3, [r7, #12]

	switch (Chicken_CalculateTypePeriod(*LengthTimeStartIncubator))// calculate type period
 8001f38:	683b      	ldr	r3, [r7, #0]
 8001f3a:	781b      	ldrb	r3, [r3, #0]
 8001f3c:	4618      	mov	r0, r3
 8001f3e:	f000 f991 	bl	8002264 <Chicken_CalculateTypePeriod>
 8001f42:	4603      	mov	r3, r0
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d002      	beq.n	8001f4e <Chicken_ControlTempFan+0x3e>
 8001f48:	2b01      	cmp	r3, #1
 8001f4a:	d020      	beq.n	8001f8e <Chicken_ControlTempFan+0x7e>
		case PERIOD_HATCHER:// type time is hatcher
			if((*Temp > MainEggInfo.TempHatcher) && (TempDiffer >= (float)1.5))// if temperature now > Temperature setter(incubator)
				PWM_SetCCR(TIM1, TIMER_CHANNEL_FAN, TempDiffer + 25);// set PWM FAN = TempDiffer + 25
			break;
	}
};
 8001f4c:	e03f      	b.n	8001fce <Chicken_ControlTempFan+0xbe>
	float TempDiffer = (*Temp - MainEggInfo.TempIncubator) * (float)15;// calculate temperature difference

	switch (Chicken_CalculateTypePeriod(*LengthTimeStartIncubator))// calculate type period
	{
		case PERIOD_SETTER:// type time is setter
			if((*Temp > MainEggInfo.TempIncubator) && (TempDiffer >= (float)1.5))// if temperature now > Temperature setter(incubator)
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681a      	ldr	r2, [r3, #0]
 8001f52:	4b21      	ldr	r3, [pc, #132]	; (8001fd8 <Chicken_ControlTempFan+0xc8>)
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	4619      	mov	r1, r3
 8001f58:	4610      	mov	r0, r2
 8001f5a:	f7ff f88d 	bl	8001078 <__aeabi_fcmpgt>
 8001f5e:	4603      	mov	r3, r0
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d100      	bne.n	8001f66 <Chicken_ControlTempFan+0x56>
				PWM_SetCCR(TIM1, TIMER_CHANNEL_FAN, TempDiffer + 25);// set PWM FAN = TempDiffer + 25
			break;
 8001f64:	e033      	b.n	8001fce <Chicken_ControlTempFan+0xbe>
	float TempDiffer = (*Temp - MainEggInfo.TempIncubator) * (float)15;// calculate temperature difference

	switch (Chicken_CalculateTypePeriod(*LengthTimeStartIncubator))// calculate type period
	{
		case PERIOD_SETTER:// type time is setter
			if((*Temp > MainEggInfo.TempIncubator) && (TempDiffer >= (float)1.5))// if temperature now > Temperature setter(incubator)
 8001f66:	f04f 517f 	mov.w	r1, #1069547520	; 0x3fc00000
 8001f6a:	68f8      	ldr	r0, [r7, #12]
 8001f6c:	f7ff f87a 	bl	8001064 <__aeabi_fcmpge>
 8001f70:	4603      	mov	r3, r0
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d100      	bne.n	8001f78 <Chicken_ControlTempFan+0x68>
				PWM_SetCCR(TIM1, TIMER_CHANNEL_FAN, TempDiffer + 25);// set PWM FAN = TempDiffer + 25
			break;
 8001f76:	e02a      	b.n	8001fce <Chicken_ControlTempFan+0xbe>

	switch (Chicken_CalculateTypePeriod(*LengthTimeStartIncubator))// calculate type period
	{
		case PERIOD_SETTER:// type time is setter
			if((*Temp > MainEggInfo.TempIncubator) && (TempDiffer >= (float)1.5))// if temperature now > Temperature setter(incubator)
				PWM_SetCCR(TIM1, TIMER_CHANNEL_FAN, TempDiffer + 25);// set PWM FAN = TempDiffer + 25
 8001f78:	4919      	ldr	r1, [pc, #100]	; (8001fe0 <Chicken_ControlTempFan+0xd0>)
 8001f7a:	68f8      	ldr	r0, [r7, #12]
 8001f7c:	f7fe fdb8 	bl	8000af0 <__addsf3>
 8001f80:	4603      	mov	r3, r0
 8001f82:	461a      	mov	r2, r3
 8001f84:	2102      	movs	r1, #2
 8001f86:	4817      	ldr	r0, [pc, #92]	; (8001fe4 <Chicken_ControlTempFan+0xd4>)
 8001f88:	f002 ff68 	bl	8004e5c <PWM_SetCCR>
			break;
 8001f8c:	e01f      	b.n	8001fce <Chicken_ControlTempFan+0xbe>

		case PERIOD_HATCHER:// type time is hatcher
			if((*Temp > MainEggInfo.TempHatcher) && (TempDiffer >= (float)1.5))// if temperature now > Temperature setter(incubator)
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681a      	ldr	r2, [r3, #0]
 8001f92:	4b11      	ldr	r3, [pc, #68]	; (8001fd8 <Chicken_ControlTempFan+0xc8>)
 8001f94:	685b      	ldr	r3, [r3, #4]
 8001f96:	4619      	mov	r1, r3
 8001f98:	4610      	mov	r0, r2
 8001f9a:	f7ff f86d 	bl	8001078 <__aeabi_fcmpgt>
 8001f9e:	4603      	mov	r3, r0
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d100      	bne.n	8001fa6 <Chicken_ControlTempFan+0x96>
				PWM_SetCCR(TIM1, TIMER_CHANNEL_FAN, TempDiffer + 25);// set PWM FAN = TempDiffer + 25
			break;
 8001fa4:	e012      	b.n	8001fcc <Chicken_ControlTempFan+0xbc>
			if((*Temp > MainEggInfo.TempIncubator) && (TempDiffer >= (float)1.5))// if temperature now > Temperature setter(incubator)
				PWM_SetCCR(TIM1, TIMER_CHANNEL_FAN, TempDiffer + 25);// set PWM FAN = TempDiffer + 25
			break;

		case PERIOD_HATCHER:// type time is hatcher
			if((*Temp > MainEggInfo.TempHatcher) && (TempDiffer >= (float)1.5))// if temperature now > Temperature setter(incubator)
 8001fa6:	f04f 517f 	mov.w	r1, #1069547520	; 0x3fc00000
 8001faa:	68f8      	ldr	r0, [r7, #12]
 8001fac:	f7ff f85a 	bl	8001064 <__aeabi_fcmpge>
 8001fb0:	4603      	mov	r3, r0
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d100      	bne.n	8001fb8 <Chicken_ControlTempFan+0xa8>
				PWM_SetCCR(TIM1, TIMER_CHANNEL_FAN, TempDiffer + 25);// set PWM FAN = TempDiffer + 25
			break;
 8001fb6:	e009      	b.n	8001fcc <Chicken_ControlTempFan+0xbc>
				PWM_SetCCR(TIM1, TIMER_CHANNEL_FAN, TempDiffer + 25);// set PWM FAN = TempDiffer + 25
			break;

		case PERIOD_HATCHER:// type time is hatcher
			if((*Temp > MainEggInfo.TempHatcher) && (TempDiffer >= (float)1.5))// if temperature now > Temperature setter(incubator)
				PWM_SetCCR(TIM1, TIMER_CHANNEL_FAN, TempDiffer + 25);// set PWM FAN = TempDiffer + 25
 8001fb8:	4909      	ldr	r1, [pc, #36]	; (8001fe0 <Chicken_ControlTempFan+0xd0>)
 8001fba:	68f8      	ldr	r0, [r7, #12]
 8001fbc:	f7fe fd98 	bl	8000af0 <__addsf3>
 8001fc0:	4603      	mov	r3, r0
 8001fc2:	461a      	mov	r2, r3
 8001fc4:	2102      	movs	r1, #2
 8001fc6:	4807      	ldr	r0, [pc, #28]	; (8001fe4 <Chicken_ControlTempFan+0xd4>)
 8001fc8:	f002 ff48 	bl	8004e5c <PWM_SetCCR>
			break;
 8001fcc:	bf00      	nop
	}
};
 8001fce:	bf00      	nop
 8001fd0:	3710      	adds	r7, #16
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	bd80      	pop	{r7, pc}
 8001fd6:	bf00      	nop
 8001fd8:	20000120 	.word	0x20000120
 8001fdc:	41700000 	.word	0x41700000
 8001fe0:	41c80000 	.word	0x41c80000
 8001fe4:	40012c00 	.word	0x40012c00

08001fe8 <Chicken_ControlTempHeater>:
void Chicken_ControlTempHeater(float *Temp, uint8_t *LengthTimeStartIncubator)
{
 8001fe8:	b590      	push	{r4, r7, lr}
 8001fea:	b083      	sub	sp, #12
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	6078      	str	r0, [r7, #4]
 8001ff0:	6039      	str	r1, [r7, #0]
	switch (Chicken_CalculateTypePeriod(*LengthTimeStartIncubator))// calculate type period
 8001ff2:	683b      	ldr	r3, [r7, #0]
 8001ff4:	781b      	ldrb	r3, [r3, #0]
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	f000 f934 	bl	8002264 <Chicken_CalculateTypePeriod>
 8001ffc:	4603      	mov	r3, r0
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d002      	beq.n	8002008 <Chicken_ControlTempHeater+0x20>
 8002002:	2b01      	cmp	r3, #1
 8002004:	d01f      	beq.n	8002046 <Chicken_ControlTempHeater+0x5e>

		case PERIOD_HATCHER:// type time is hatcher
			PWM_SetCCR(TIM1, TIMER_CHANNEL_HEATER, ((MainEggInfo.TempHatcher - *Temp) * 3) + PWM_GetCCR(TIM1, TIMER_CHANNEL_HEATER));
			break;
	}
};
 8002006:	e03d      	b.n	8002084 <Chicken_ControlTempHeater+0x9c>
void Chicken_ControlTempHeater(float *Temp, uint8_t *LengthTimeStartIncubator)
{
	switch (Chicken_CalculateTypePeriod(*LengthTimeStartIncubator))// calculate type period
	{
		case PERIOD_SETTER:// type time is setter
			PWM_SetCCR(TIM1, TIMER_CHANNEL_HEATER,  ((MainEggInfo.TempIncubator - *Temp) * 3) + PWM_GetCCR(TIM1, TIMER_CHANNEL_HEATER));// set CCR value => (TempMain - TempNow * 3) + CCR value in the past
 8002008:	4b20      	ldr	r3, [pc, #128]	; (800208c <Chicken_ControlTempHeater+0xa4>)
 800200a:	681a      	ldr	r2, [r3, #0]
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	4619      	mov	r1, r3
 8002012:	4610      	mov	r0, r2
 8002014:	f7fe fd6a 	bl	8000aec <__aeabi_fsub>
 8002018:	4603      	mov	r3, r0
 800201a:	491d      	ldr	r1, [pc, #116]	; (8002090 <Chicken_ControlTempHeater+0xa8>)
 800201c:	4618      	mov	r0, r3
 800201e:	f7fe fe6f 	bl	8000d00 <__aeabi_fmul>
 8002022:	4603      	mov	r3, r0
 8002024:	461c      	mov	r4, r3
 8002026:	2103      	movs	r1, #3
 8002028:	481a      	ldr	r0, [pc, #104]	; (8002094 <Chicken_ControlTempHeater+0xac>)
 800202a:	f002 ffad 	bl	8004f88 <PWM_GetCCR>
 800202e:	4603      	mov	r3, r0
 8002030:	4619      	mov	r1, r3
 8002032:	4620      	mov	r0, r4
 8002034:	f7fe fd5c 	bl	8000af0 <__addsf3>
 8002038:	4603      	mov	r3, r0
 800203a:	461a      	mov	r2, r3
 800203c:	2103      	movs	r1, #3
 800203e:	4815      	ldr	r0, [pc, #84]	; (8002094 <Chicken_ControlTempHeater+0xac>)
 8002040:	f002 ff0c 	bl	8004e5c <PWM_SetCCR>
			break;
 8002044:	e01e      	b.n	8002084 <Chicken_ControlTempHeater+0x9c>

		case PERIOD_HATCHER:// type time is hatcher
			PWM_SetCCR(TIM1, TIMER_CHANNEL_HEATER, ((MainEggInfo.TempHatcher - *Temp) * 3) + PWM_GetCCR(TIM1, TIMER_CHANNEL_HEATER));
 8002046:	4b11      	ldr	r3, [pc, #68]	; (800208c <Chicken_ControlTempHeater+0xa4>)
 8002048:	685a      	ldr	r2, [r3, #4]
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	4619      	mov	r1, r3
 8002050:	4610      	mov	r0, r2
 8002052:	f7fe fd4b 	bl	8000aec <__aeabi_fsub>
 8002056:	4603      	mov	r3, r0
 8002058:	490d      	ldr	r1, [pc, #52]	; (8002090 <Chicken_ControlTempHeater+0xa8>)
 800205a:	4618      	mov	r0, r3
 800205c:	f7fe fe50 	bl	8000d00 <__aeabi_fmul>
 8002060:	4603      	mov	r3, r0
 8002062:	461c      	mov	r4, r3
 8002064:	2103      	movs	r1, #3
 8002066:	480b      	ldr	r0, [pc, #44]	; (8002094 <Chicken_ControlTempHeater+0xac>)
 8002068:	f002 ff8e 	bl	8004f88 <PWM_GetCCR>
 800206c:	4603      	mov	r3, r0
 800206e:	4619      	mov	r1, r3
 8002070:	4620      	mov	r0, r4
 8002072:	f7fe fd3d 	bl	8000af0 <__addsf3>
 8002076:	4603      	mov	r3, r0
 8002078:	461a      	mov	r2, r3
 800207a:	2103      	movs	r1, #3
 800207c:	4805      	ldr	r0, [pc, #20]	; (8002094 <Chicken_ControlTempHeater+0xac>)
 800207e:	f002 feed 	bl	8004e5c <PWM_SetCCR>
			break;
 8002082:	bf00      	nop
	}
};
 8002084:	bf00      	nop
 8002086:	370c      	adds	r7, #12
 8002088:	46bd      	mov	sp, r7
 800208a:	bd90      	pop	{r4, r7, pc}
 800208c:	20000120 	.word	0x20000120
 8002090:	40400000 	.word	0x40400000
 8002094:	40012c00 	.word	0x40012c00

08002098 <Chicken_CalculateNextDay>:
void Chicken_CalculateNextDay(struct DS3231_DateTime *TimeNow, struct DS3231_DateTime *NextDay)
{
 8002098:	b480      	push	{r7}
 800209a:	b083      	sub	sp, #12
 800209c:	af00      	add	r7, sp, #0
 800209e:	6078      	str	r0, [r7, #4]
 80020a0:	6039      	str	r1, [r7, #0]
	*NextDay = *TimeNow;
 80020a2:	683b      	ldr	r3, [r7, #0]
 80020a4:	687a      	ldr	r2, [r7, #4]
 80020a6:	6811      	ldr	r1, [r2, #0]
 80020a8:	6019      	str	r1, [r3, #0]
 80020aa:	8891      	ldrh	r1, [r2, #4]
 80020ac:	7992      	ldrb	r2, [r2, #6]
 80020ae:	8099      	strh	r1, [r3, #4]
 80020b0:	719a      	strb	r2, [r3, #6]
	NextDay->Date++;//increase day for calculate next day(date range is 1-31)
 80020b2:	683b      	ldr	r3, [r7, #0]
 80020b4:	791b      	ldrb	r3, [r3, #4]
 80020b6:	3301      	adds	r3, #1
 80020b8:	b2da      	uxtb	r2, r3
 80020ba:	683b      	ldr	r3, [r7, #0]
 80020bc:	711a      	strb	r2, [r3, #4]
	NextDay->Day++;// day range is 1-7
 80020be:	683b      	ldr	r3, [r7, #0]
 80020c0:	78db      	ldrb	r3, [r3, #3]
 80020c2:	3301      	adds	r3, #1
 80020c4:	b2da      	uxtb	r2, r3
 80020c6:	683b      	ldr	r3, [r7, #0]
 80020c8:	70da      	strb	r2, [r3, #3]

	if(NextDay->Day > 7)
 80020ca:	683b      	ldr	r3, [r7, #0]
 80020cc:	78db      	ldrb	r3, [r3, #3]
 80020ce:	2b07      	cmp	r3, #7
 80020d0:	d902      	bls.n	80020d8 <Chicken_CalculateNextDay+0x40>
		NextDay->Day = 1;// (if day after increase > 7) day = 1
 80020d2:	683b      	ldr	r3, [r7, #0]
 80020d4:	2201      	movs	r2, #1
 80020d6:	70da      	strb	r2, [r3, #3]

	if(NextDay->Month >= 1 && NextDay->Month <= 6 && NextDay->Date == 32)// if month between 1 & 6 and date(1-31) == 32, date = 1 and month + 1
 80020d8:	683b      	ldr	r3, [r7, #0]
 80020da:	795b      	ldrb	r3, [r3, #5]
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d011      	beq.n	8002104 <Chicken_CalculateNextDay+0x6c>
 80020e0:	683b      	ldr	r3, [r7, #0]
 80020e2:	795b      	ldrb	r3, [r3, #5]
 80020e4:	2b06      	cmp	r3, #6
 80020e6:	d80d      	bhi.n	8002104 <Chicken_CalculateNextDay+0x6c>
 80020e8:	683b      	ldr	r3, [r7, #0]
 80020ea:	791b      	ldrb	r3, [r3, #4]
 80020ec:	2b20      	cmp	r3, #32
 80020ee:	d109      	bne.n	8002104 <Chicken_CalculateNextDay+0x6c>
	{
		NextDay->Date = 1;
 80020f0:	683b      	ldr	r3, [r7, #0]
 80020f2:	2201      	movs	r2, #1
 80020f4:	711a      	strb	r2, [r3, #4]
		NextDay->Month++;
 80020f6:	683b      	ldr	r3, [r7, #0]
 80020f8:	795b      	ldrb	r3, [r3, #5]
 80020fa:	3301      	adds	r3, #1
 80020fc:	b2da      	uxtb	r2, r3
 80020fe:	683b      	ldr	r3, [r7, #0]
 8002100:	715a      	strb	r2, [r3, #5]
 8002102:	e049      	b.n	8002198 <Chicken_CalculateNextDay+0x100>
	}
	else if(NextDay->Month > 6 && NextDay->Month <= 11 && NextDay->Date == 31)// if month between 7 & 11 and date(1-31) == 31, date = 1 and month + 1
 8002104:	683b      	ldr	r3, [r7, #0]
 8002106:	795b      	ldrb	r3, [r3, #5]
 8002108:	2b06      	cmp	r3, #6
 800210a:	d911      	bls.n	8002130 <Chicken_CalculateNextDay+0x98>
 800210c:	683b      	ldr	r3, [r7, #0]
 800210e:	795b      	ldrb	r3, [r3, #5]
 8002110:	2b0b      	cmp	r3, #11
 8002112:	d80d      	bhi.n	8002130 <Chicken_CalculateNextDay+0x98>
 8002114:	683b      	ldr	r3, [r7, #0]
 8002116:	791b      	ldrb	r3, [r3, #4]
 8002118:	2b1f      	cmp	r3, #31
 800211a:	d109      	bne.n	8002130 <Chicken_CalculateNextDay+0x98>
	{
		NextDay->Date = 1;
 800211c:	683b      	ldr	r3, [r7, #0]
 800211e:	2201      	movs	r2, #1
 8002120:	711a      	strb	r2, [r3, #4]
		NextDay->Month++;
 8002122:	683b      	ldr	r3, [r7, #0]
 8002124:	795b      	ldrb	r3, [r3, #5]
 8002126:	3301      	adds	r3, #1
 8002128:	b2da      	uxtb	r2, r3
 800212a:	683b      	ldr	r3, [r7, #0]
 800212c:	715a      	strb	r2, [r3, #5]
 800212e:	e033      	b.n	8002198 <Chicken_CalculateNextDay+0x100>
	}
	else if(NextDay->Month == 12)
 8002130:	683b      	ldr	r3, [r7, #0]
 8002132:	795b      	ldrb	r3, [r3, #5]
 8002134:	2b0c      	cmp	r3, #12
 8002136:	d12f      	bne.n	8002198 <Chicken_CalculateNextDay+0x100>
	{
		if( ((NextDay->Year % 4) == 3) && NextDay->Date == 31)// leap year
 8002138:	683b      	ldr	r3, [r7, #0]
 800213a:	799b      	ldrb	r3, [r3, #6]
 800213c:	f003 0303 	and.w	r3, r3, #3
 8002140:	b2db      	uxtb	r3, r3
 8002142:	2b03      	cmp	r3, #3
 8002144:	d110      	bne.n	8002168 <Chicken_CalculateNextDay+0xd0>
 8002146:	683b      	ldr	r3, [r7, #0]
 8002148:	791b      	ldrb	r3, [r3, #4]
 800214a:	2b1f      	cmp	r3, #31
 800214c:	d10c      	bne.n	8002168 <Chicken_CalculateNextDay+0xd0>
		{
			NextDay->Year++;// increase year
 800214e:	683b      	ldr	r3, [r7, #0]
 8002150:	799b      	ldrb	r3, [r3, #6]
 8002152:	3301      	adds	r3, #1
 8002154:	b2da      	uxtb	r2, r3
 8002156:	683b      	ldr	r3, [r7, #0]
 8002158:	719a      	strb	r2, [r3, #6]
			NextDay->Month = 1;// month = 1
 800215a:	683b      	ldr	r3, [r7, #0]
 800215c:	2201      	movs	r2, #1
 800215e:	715a      	strb	r2, [r3, #5]
			NextDay->Date = 1;// date(1-31) = 1
 8002160:	683b      	ldr	r3, [r7, #0]
 8002162:	2201      	movs	r2, #1
 8002164:	711a      	strb	r2, [r3, #4]
 8002166:	e017      	b.n	8002198 <Chicken_CalculateNextDay+0x100>
		}
		else if( ((NextDay->Year % 4) != 3) && NextDay->Date == 30)// no leap year
 8002168:	683b      	ldr	r3, [r7, #0]
 800216a:	799b      	ldrb	r3, [r3, #6]
 800216c:	f003 0303 	and.w	r3, r3, #3
 8002170:	b2db      	uxtb	r3, r3
 8002172:	2b03      	cmp	r3, #3
 8002174:	d010      	beq.n	8002198 <Chicken_CalculateNextDay+0x100>
 8002176:	683b      	ldr	r3, [r7, #0]
 8002178:	791b      	ldrb	r3, [r3, #4]
 800217a:	2b1e      	cmp	r3, #30
 800217c:	d10c      	bne.n	8002198 <Chicken_CalculateNextDay+0x100>
		{
			NextDay->Year++;// increase year
 800217e:	683b      	ldr	r3, [r7, #0]
 8002180:	799b      	ldrb	r3, [r3, #6]
 8002182:	3301      	adds	r3, #1
 8002184:	b2da      	uxtb	r2, r3
 8002186:	683b      	ldr	r3, [r7, #0]
 8002188:	719a      	strb	r2, [r3, #6]
			NextDay->Month = 1;// month = 1
 800218a:	683b      	ldr	r3, [r7, #0]
 800218c:	2201      	movs	r2, #1
 800218e:	715a      	strb	r2, [r3, #5]
			NextDay->Date = 1;// date(1-31) = 1
 8002190:	683b      	ldr	r3, [r7, #0]
 8002192:	2201      	movs	r2, #1
 8002194:	711a      	strb	r2, [r3, #4]
		};
	};
};
 8002196:	e7ff      	b.n	8002198 <Chicken_CalculateNextDay+0x100>
 8002198:	bf00      	nop
 800219a:	370c      	adds	r7, #12
 800219c:	46bd      	mov	sp, r7
 800219e:	bc80      	pop	{r7}
 80021a0:	4770      	bx	lr
 80021a2:	bf00      	nop

080021a4 <Chicken_SetAlarmNextDay>:
void Chicken_SetAlarmNextDay()
{
 80021a4:	b580      	push	{r7, lr}
 80021a6:	b082      	sub	sp, #8
 80021a8:	af00      	add	r7, sp, #0
	DS3231_GetAlarm1(I2C1, &DS3231_ReadAlarm1);// read time alarm
 80021aa:	4929      	ldr	r1, [pc, #164]	; (8002250 <Chicken_SetAlarmNextDay+0xac>)
 80021ac:	4829      	ldr	r0, [pc, #164]	; (8002254 <Chicken_SetAlarmNextDay+0xb0>)
 80021ae:	f000 feb5 	bl	8002f1c <DS3231_GetAlarm1>
	DS3231_ReadDateTime(I2C1, &DS3231_ReadDate);// read date and time
 80021b2:	4929      	ldr	r1, [pc, #164]	; (8002258 <Chicken_SetAlarmNextDay+0xb4>)
 80021b4:	4827      	ldr	r0, [pc, #156]	; (8002254 <Chicken_SetAlarmNextDay+0xb0>)
 80021b6:	f000 fcdb 	bl	8002b70 <DS3231_ReadDateTime>

	struct DS3231_DateTime NextDay;
	Chicken_CalculateNextDay(&DS3231_ReadDate, &NextDay);// set NextDay = calculate next day
 80021ba:	463b      	mov	r3, r7
 80021bc:	4619      	mov	r1, r3
 80021be:	4826      	ldr	r0, [pc, #152]	; (8002258 <Chicken_SetAlarmNextDay+0xb4>)
 80021c0:	f7ff ff6a 	bl	8002098 <Chicken_CalculateNextDay>

	DS3231_WriteAlarm1.Seconds = DS3231_ReadAlarm1.Seconds;
 80021c4:	4b22      	ldr	r3, [pc, #136]	; (8002250 <Chicken_SetAlarmNextDay+0xac>)
 80021c6:	781a      	ldrb	r2, [r3, #0]
 80021c8:	4b24      	ldr	r3, [pc, #144]	; (800225c <Chicken_SetAlarmNextDay+0xb8>)
 80021ca:	701a      	strb	r2, [r3, #0]
	DS3231_WriteAlarm1.Minutes = DS3231_ReadAlarm1.Minutes;
 80021cc:	4b20      	ldr	r3, [pc, #128]	; (8002250 <Chicken_SetAlarmNextDay+0xac>)
 80021ce:	785a      	ldrb	r2, [r3, #1]
 80021d0:	4b22      	ldr	r3, [pc, #136]	; (800225c <Chicken_SetAlarmNextDay+0xb8>)
 80021d2:	705a      	strb	r2, [r3, #1]
	DS3231_WriteAlarm1.Hour = DS3231_ReadAlarm1.Hour;
 80021d4:	4b1e      	ldr	r3, [pc, #120]	; (8002250 <Chicken_SetAlarmNextDay+0xac>)
 80021d6:	789a      	ldrb	r2, [r3, #2]
 80021d8:	4b20      	ldr	r3, [pc, #128]	; (800225c <Chicken_SetAlarmNextDay+0xb8>)
 80021da:	709a      	strb	r2, [r3, #2]
	DS3231_WriteAlarm1.Day = NextDay.Day;
 80021dc:	78fa      	ldrb	r2, [r7, #3]
 80021de:	4b1f      	ldr	r3, [pc, #124]	; (800225c <Chicken_SetAlarmNextDay+0xb8>)
 80021e0:	70da      	strb	r2, [r3, #3]
	DS3231_WriteAlarm1.Date = NextDay.Date;
 80021e2:	793a      	ldrb	r2, [r7, #4]
 80021e4:	4b1d      	ldr	r3, [pc, #116]	; (800225c <Chicken_SetAlarmNextDay+0xb8>)
 80021e6:	711a      	strb	r2, [r3, #4]
	DS3231_SetAlarm1(I2C1, &DS3231_WriteAlarm1);// set alarm for next day
 80021e8:	491c      	ldr	r1, [pc, #112]	; (800225c <Chicken_SetAlarmNextDay+0xb8>)
 80021ea:	481a      	ldr	r0, [pc, #104]	; (8002254 <Chicken_SetAlarmNextDay+0xb0>)
 80021ec:	f000 fdba 	bl	8002d64 <DS3231_SetAlarm1>
	DS3231_ClearFlag(I2C1, DS3231_FLAG_A1F);// clear flag alarm1
 80021f0:	2101      	movs	r1, #1
 80021f2:	4818      	ldr	r0, [pc, #96]	; (8002254 <Chicken_SetAlarmNextDay+0xb0>)
 80021f4:	f000 fffa 	bl	80031ec <DS3231_ClearFlag>

	LengthTimeStartIncubator++;// Increments of one
 80021f8:	4b19      	ldr	r3, [pc, #100]	; (8002260 <Chicken_SetAlarmNextDay+0xbc>)
 80021fa:	781b      	ldrb	r3, [r3, #0]
 80021fc:	3301      	adds	r3, #1
 80021fe:	b2da      	uxtb	r2, r3
 8002200:	4b17      	ldr	r3, [pc, #92]	; (8002260 <Chicken_SetAlarmNextDay+0xbc>)
 8002202:	701a      	strb	r2, [r3, #0]
	AT24C02_Write(I2C1, 0xA0, 0x0B, LengthTimeStartIncubator);// save length time start incubator
 8002204:	4b16      	ldr	r3, [pc, #88]	; (8002260 <Chicken_SetAlarmNextDay+0xbc>)
 8002206:	781b      	ldrb	r3, [r3, #0]
 8002208:	220b      	movs	r2, #11
 800220a:	21a0      	movs	r1, #160	; 0xa0
 800220c:	4811      	ldr	r0, [pc, #68]	; (8002254 <Chicken_SetAlarmNextDay+0xb0>)
 800220e:	f7fe ff83 	bl	8001118 <AT24C02_Write>
	Chicken_Delay(12);// wait 12ms
 8002212:	200c      	movs	r0, #12
 8002214:	f000 fb06 	bl	8002824 <Chicken_Delay>

	while(AT24C02_Read(I2C1, 0xA0, 0x0B) != LengthTimeStartIncubator);// If EEPROM and LengthTimeStartIncubator were unequal to be set again EEPROM
 8002218:	bf00      	nop
 800221a:	220b      	movs	r2, #11
 800221c:	21a0      	movs	r1, #160	; 0xa0
 800221e:	480d      	ldr	r0, [pc, #52]	; (8002254 <Chicken_SetAlarmNextDay+0xb0>)
 8002220:	f7fe ffe0 	bl	80011e4 <AT24C02_Read>
 8002224:	4603      	mov	r3, r0
 8002226:	461a      	mov	r2, r3
 8002228:	4b0d      	ldr	r3, [pc, #52]	; (8002260 <Chicken_SetAlarmNextDay+0xbc>)
 800222a:	781b      	ldrb	r3, [r3, #0]
 800222c:	429a      	cmp	r2, r3
 800222e:	d1f4      	bne.n	800221a <Chicken_SetAlarmNextDay+0x76>
	{
		AT24C02_Write(I2C1, 0xA0, 0x0B, LengthTimeStartIncubator);// save length time start incubator
 8002230:	4b0b      	ldr	r3, [pc, #44]	; (8002260 <Chicken_SetAlarmNextDay+0xbc>)
 8002232:	781b      	ldrb	r3, [r3, #0]
 8002234:	220b      	movs	r2, #11
 8002236:	21a0      	movs	r1, #160	; 0xa0
 8002238:	4806      	ldr	r0, [pc, #24]	; (8002254 <Chicken_SetAlarmNextDay+0xb0>)
 800223a:	f7fe ff6d 	bl	8001118 <AT24C02_Write>
		Chicken_Delay(12);// wait 12ms
 800223e:	200c      	movs	r0, #12
 8002240:	f000 faf0 	bl	8002824 <Chicken_Delay>
		IWDG_Reset();
 8002244:	f001 fdae 	bl	8003da4 <IWDG_Reset>
	}

};
 8002248:	bf00      	nop
 800224a:	3708      	adds	r7, #8
 800224c:	46bd      	mov	sp, r7
 800224e:	bd80      	pop	{r7, pc}
 8002250:	20000158 	.word	0x20000158
 8002254:	40005400 	.word	0x40005400
 8002258:	200000f0 	.word	0x200000f0
 800225c:	200000d4 	.word	0x200000d4
 8002260:	2000009c 	.word	0x2000009c

08002264 <Chicken_CalculateTypePeriod>:
uint8_t Chicken_CalculateTypePeriod(uint8_t LengthTimeStartIncubator)
{
 8002264:	b480      	push	{r7}
 8002266:	b083      	sub	sp, #12
 8002268:	af00      	add	r7, sp, #0
 800226a:	4603      	mov	r3, r0
 800226c:	71fb      	strb	r3, [r7, #7]
	if((LengthTimeStartIncubator > 0) && (LengthTimeStartIncubator <= MainEggInfo.TimeIncubator))// type period is setter
 800226e:	79fb      	ldrb	r3, [r7, #7]
 8002270:	2b00      	cmp	r3, #0
 8002272:	d006      	beq.n	8002282 <Chicken_CalculateTypePeriod+0x1e>
 8002274:	4b0b      	ldr	r3, [pc, #44]	; (80022a4 <Chicken_CalculateTypePeriod+0x40>)
 8002276:	7a9b      	ldrb	r3, [r3, #10]
 8002278:	79fa      	ldrb	r2, [r7, #7]
 800227a:	429a      	cmp	r2, r3
 800227c:	d801      	bhi.n	8002282 <Chicken_CalculateTypePeriod+0x1e>
		return PERIOD_SETTER;
 800227e:	2300      	movs	r3, #0
 8002280:	e00b      	b.n	800229a <Chicken_CalculateTypePeriod+0x36>
	else if((LengthTimeStartIncubator > MainEggInfo.TimeIncubator) && (LengthTimeStartIncubator <= MainEggInfo.AllTime))// type period is hatcher
 8002282:	4b08      	ldr	r3, [pc, #32]	; (80022a4 <Chicken_CalculateTypePeriod+0x40>)
 8002284:	7a9b      	ldrb	r3, [r3, #10]
 8002286:	79fa      	ldrb	r2, [r7, #7]
 8002288:	429a      	cmp	r2, r3
 800228a:	d906      	bls.n	800229a <Chicken_CalculateTypePeriod+0x36>
 800228c:	4b05      	ldr	r3, [pc, #20]	; (80022a4 <Chicken_CalculateTypePeriod+0x40>)
 800228e:	7adb      	ldrb	r3, [r3, #11]
 8002290:	79fa      	ldrb	r2, [r7, #7]
 8002292:	429a      	cmp	r2, r3
 8002294:	d801      	bhi.n	800229a <Chicken_CalculateTypePeriod+0x36>
		return PERIOD_HATCHER;
 8002296:	2301      	movs	r3, #1
 8002298:	e7ff      	b.n	800229a <Chicken_CalculateTypePeriod+0x36>
};
 800229a:	4618      	mov	r0, r3
 800229c:	370c      	adds	r7, #12
 800229e:	46bd      	mov	sp, r7
 80022a0:	bc80      	pop	{r7}
 80022a2:	4770      	bx	lr
 80022a4:	20000120 	.word	0x20000120

080022a8 <USART_SendChar>:


void USART_SendChar(USART_TypeDef* USARTx, uint16_t character)
{
 80022a8:	b580      	push	{r7, lr}
 80022aa:	b082      	sub	sp, #8
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	6078      	str	r0, [r7, #4]
 80022b0:	460b      	mov	r3, r1
 80022b2:	807b      	strh	r3, [r7, #2]
	USART_ClearFlag(USARTx, USART_FLAG_TC);// clear flag Transmission Complete flag(TC)
 80022b4:	2140      	movs	r1, #64	; 0x40
 80022b6:	6878      	ldr	r0, [r7, #4]
 80022b8:	f003 fc72 	bl	8005ba0 <USART_ClearFlag>
	USART_SendData(USARTx, character);// send data from variable character
 80022bc:	887b      	ldrh	r3, [r7, #2]
 80022be:	4619      	mov	r1, r3
 80022c0:	6878      	ldr	r0, [r7, #4]
 80022c2:	f003 fc2f 	bl	8005b24 <USART_SendData>
	while(!USART_GetFlagStatus(USARTx, USART_FLAG_TC));// wait send data
 80022c6:	bf00      	nop
 80022c8:	2140      	movs	r1, #64	; 0x40
 80022ca:	6878      	ldr	r0, [r7, #4]
 80022cc:	f003 fc4c 	bl	8005b68 <USART_GetFlagStatus>
 80022d0:	4603      	mov	r3, r0
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d0f8      	beq.n	80022c8 <USART_SendChar+0x20>
};
 80022d6:	bf00      	nop
 80022d8:	3708      	adds	r7, #8
 80022da:	46bd      	mov	sp, r7
 80022dc:	bd80      	pop	{r7, pc}
 80022de:	bf00      	nop

080022e0 <USART_GetChar>:
uint16_t USART_GetChar(USART_TypeDef* USARTx)
{
 80022e0:	b580      	push	{r7, lr}
 80022e2:	b082      	sub	sp, #8
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	6078      	str	r0, [r7, #4]
	USART_ClearFlag(USARTx, USART_FLAG_RXNE);// clear flag RXNE
 80022e8:	2120      	movs	r1, #32
 80022ea:	6878      	ldr	r0, [r7, #4]
 80022ec:	f003 fc58 	bl	8005ba0 <USART_ClearFlag>
	while(!USART_GetFlagStatus(USARTx, USART_FLAG_RXNE));// wait receive data
 80022f0:	bf00      	nop
 80022f2:	2120      	movs	r1, #32
 80022f4:	6878      	ldr	r0, [r7, #4]
 80022f6:	f003 fc37 	bl	8005b68 <USART_GetFlagStatus>
 80022fa:	4603      	mov	r3, r0
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d0f8      	beq.n	80022f2 <USART_GetChar+0x12>
	return USART_ReceiveData(USARTx);// receive data & return
 8002300:	6878      	ldr	r0, [r7, #4]
 8002302:	f003 fc21 	bl	8005b48 <USART_ReceiveData>
 8002306:	4603      	mov	r3, r0
};
 8002308:	4618      	mov	r0, r3
 800230a:	3708      	adds	r7, #8
 800230c:	46bd      	mov	sp, r7
 800230e:	bd80      	pop	{r7, pc}

08002310 <USART_Printf>:
void USART_Printf(USART_TypeDef* USARTx, unsigned char string[])// for use this function : USART_Printf(USARTx, name_array); don't use [] or and operator(&)
{
 8002310:	b580      	push	{r7, lr}
 8002312:	b084      	sub	sp, #16
 8002314:	af00      	add	r7, sp, #0
 8002316:	6078      	str	r0, [r7, #4]
 8002318:	6039      	str	r1, [r7, #0]
	unsigned char length = strlen(string);// calculate length array string
 800231a:	6838      	ldr	r0, [r7, #0]
 800231c:	f7fd ff22 	bl	8000164 <strlen>
 8002320:	4603      	mov	r3, r0
 8002322:	72fb      	strb	r3, [r7, #11]
	for(int i = 0; i < length; i++){
 8002324:	2300      	movs	r3, #0
 8002326:	60fb      	str	r3, [r7, #12]
 8002328:	e00b      	b.n	8002342 <USART_Printf+0x32>
		USART_SendChar(USARTx, string[i]);// send character
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	683a      	ldr	r2, [r7, #0]
 800232e:	4413      	add	r3, r2
 8002330:	781b      	ldrb	r3, [r3, #0]
 8002332:	b29b      	uxth	r3, r3
 8002334:	4619      	mov	r1, r3
 8002336:	6878      	ldr	r0, [r7, #4]
 8002338:	f7ff ffb6 	bl	80022a8 <USART_SendChar>
	return USART_ReceiveData(USARTx);// receive data & return
};
void USART_Printf(USART_TypeDef* USARTx, unsigned char string[])// for use this function : USART_Printf(USARTx, name_array); don't use [] or and operator(&)
{
	unsigned char length = strlen(string);// calculate length array string
	for(int i = 0; i < length; i++){
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	3301      	adds	r3, #1
 8002340:	60fb      	str	r3, [r7, #12]
 8002342:	7afa      	ldrb	r2, [r7, #11]
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	429a      	cmp	r2, r3
 8002348:	dcef      	bgt.n	800232a <USART_Printf+0x1a>
		USART_SendChar(USARTx, string[i]);// send character
	}
};
 800234a:	bf00      	nop
 800234c:	3710      	adds	r7, #16
 800234e:	46bd      	mov	sp, r7
 8002350:	bd80      	pop	{r7, pc}
 8002352:	bf00      	nop

08002354 <USART_Scanf>:
void USART_Scanf(USART_TypeDef* USARTx, unsigned char *string, unsigned char CharEnd){
 8002354:	b580      	push	{r7, lr}
 8002356:	b086      	sub	sp, #24
 8002358:	af00      	add	r7, sp, #0
 800235a:	60f8      	str	r0, [r7, #12]
 800235c:	60b9      	str	r1, [r7, #8]
 800235e:	4613      	mov	r3, r2
 8002360:	71fb      	strb	r3, [r7, #7]
	unsigned char CharReceive = 0;
 8002362:	2300      	movs	r3, #0
 8002364:	74fb      	strb	r3, [r7, #19]
	int i = 0;
 8002366:	2300      	movs	r3, #0
 8002368:	617b      	str	r3, [r7, #20]

	while( ( CharReceive = USART_GetChar(USARTx) ) != CharEnd){
 800236a:	e007      	b.n	800237c <USART_Scanf+0x28>
		string[i] = CharReceive;
 800236c:	697b      	ldr	r3, [r7, #20]
 800236e:	68ba      	ldr	r2, [r7, #8]
 8002370:	4413      	add	r3, r2
 8002372:	7cfa      	ldrb	r2, [r7, #19]
 8002374:	701a      	strb	r2, [r3, #0]
		i++;
 8002376:	697b      	ldr	r3, [r7, #20]
 8002378:	3301      	adds	r3, #1
 800237a:	617b      	str	r3, [r7, #20]
};
void USART_Scanf(USART_TypeDef* USARTx, unsigned char *string, unsigned char CharEnd){
	unsigned char CharReceive = 0;
	int i = 0;

	while( ( CharReceive = USART_GetChar(USARTx) ) != CharEnd){
 800237c:	68f8      	ldr	r0, [r7, #12]
 800237e:	f7ff ffaf 	bl	80022e0 <USART_GetChar>
 8002382:	4603      	mov	r3, r0
 8002384:	74fb      	strb	r3, [r7, #19]
 8002386:	7cfa      	ldrb	r2, [r7, #19]
 8002388:	79fb      	ldrb	r3, [r7, #7]
 800238a:	429a      	cmp	r2, r3
 800238c:	d1ee      	bne.n	800236c <USART_Scanf+0x18>
		string[i] = CharReceive;
		i++;
	}
	string[i] = '\0';
 800238e:	697b      	ldr	r3, [r7, #20]
 8002390:	68ba      	ldr	r2, [r7, #8]
 8002392:	4413      	add	r3, r2
 8002394:	2200      	movs	r2, #0
 8002396:	701a      	strb	r2, [r3, #0]
};
 8002398:	bf00      	nop
 800239a:	3718      	adds	r7, #24
 800239c:	46bd      	mov	sp, r7
 800239e:	bd80      	pop	{r7, pc}

080023a0 <Chicken_SelectEgg>:


void Chicken_SelectEgg()
{
 80023a0:	b598      	push	{r3, r4, r7, lr}
 80023a2:	af00      	add	r7, sp, #0
	switch (AT24C02_Read(I2C1, 0xA0, 9)) {// read type egg
 80023a4:	2209      	movs	r2, #9
 80023a6:	21a0      	movs	r1, #160	; 0xa0
 80023a8:	4857      	ldr	r0, [pc, #348]	; (8002508 <Chicken_SelectEgg+0x168>)
 80023aa:	f7fe ff1b 	bl	80011e4 <AT24C02_Read>
 80023ae:	4603      	mov	r3, r0
 80023b0:	3b01      	subs	r3, #1
 80023b2:	2b05      	cmp	r3, #5
 80023b4:	f200 80a6 	bhi.w	8002504 <Chicken_SelectEgg+0x164>
 80023b8:	a201      	add	r2, pc, #4	; (adr r2, 80023c0 <Chicken_SelectEgg+0x20>)
 80023ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023be:	bf00      	nop
 80023c0:	080023d9 	.word	0x080023d9
 80023c4:	0800240b 	.word	0x0800240b
 80023c8:	0800243d 	.word	0x0800243d
 80023cc:	0800246f 	.word	0x0800246f
 80023d0:	080024a1 	.word	0x080024a1
 80023d4:	080024d3 	.word	0x080024d3
		case 1:
			MainEggInfo = HenInfo; //select egg hen
 80023d8:	4a4c      	ldr	r2, [pc, #304]	; (800250c <Chicken_SelectEgg+0x16c>)
 80023da:	4b4d      	ldr	r3, [pc, #308]	; (8002510 <Chicken_SelectEgg+0x170>)
 80023dc:	4614      	mov	r4, r2
 80023de:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80023e0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			LCD_CLS(&LCD_PIN);
 80023e4:	484b      	ldr	r0, [pc, #300]	; (8002514 <Chicken_SelectEgg+0x174>)
 80023e6:	f001 fe0b 	bl	8004000 <LCD_CLS>
			LCD_Home(&LCD_PIN);
 80023ea:	484a      	ldr	r0, [pc, #296]	; (8002514 <Chicken_SelectEgg+0x174>)
 80023ec:	f001 fe14 	bl	8004018 <LCD_Home>
			LCD_Printf("type egg: Hen", &LCD_PIN);// send detail to LCD
 80023f0:	4948      	ldr	r1, [pc, #288]	; (8002514 <Chicken_SelectEgg+0x174>)
 80023f2:	4849      	ldr	r0, [pc, #292]	; (8002518 <Chicken_SelectEgg+0x178>)
 80023f4:	f001 fde4 	bl	8003fc0 <LCD_Printf>
			IWDG_Reset();
 80023f8:	f001 fcd4 	bl	8003da4 <IWDG_Reset>
			Chicken_Delay(10000);// wait 10 seconds
 80023fc:	f242 7010 	movw	r0, #10000	; 0x2710
 8002400:	f000 fa10 	bl	8002824 <Chicken_Delay>
			IWDG_Reset();
 8002404:	f001 fcce 	bl	8003da4 <IWDG_Reset>
			break;
 8002408:	e07c      	b.n	8002504 <Chicken_SelectEgg+0x164>

		case 2:
			MainEggInfo = DuckInfo; //select egg duck
 800240a:	4a40      	ldr	r2, [pc, #256]	; (800250c <Chicken_SelectEgg+0x16c>)
 800240c:	4b43      	ldr	r3, [pc, #268]	; (800251c <Chicken_SelectEgg+0x17c>)
 800240e:	4614      	mov	r4, r2
 8002410:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002412:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			LCD_CLS(&LCD_PIN);
 8002416:	483f      	ldr	r0, [pc, #252]	; (8002514 <Chicken_SelectEgg+0x174>)
 8002418:	f001 fdf2 	bl	8004000 <LCD_CLS>
			LCD_Home(&LCD_PIN);
 800241c:	483d      	ldr	r0, [pc, #244]	; (8002514 <Chicken_SelectEgg+0x174>)
 800241e:	f001 fdfb 	bl	8004018 <LCD_Home>
			LCD_Printf("type egg: Duck", &LCD_PIN);// send detail to LCD
 8002422:	493c      	ldr	r1, [pc, #240]	; (8002514 <Chicken_SelectEgg+0x174>)
 8002424:	483e      	ldr	r0, [pc, #248]	; (8002520 <Chicken_SelectEgg+0x180>)
 8002426:	f001 fdcb 	bl	8003fc0 <LCD_Printf>
			IWDG_Reset();
 800242a:	f001 fcbb 	bl	8003da4 <IWDG_Reset>
			Chicken_Delay(10000);// wait 10 seconds
 800242e:	f242 7010 	movw	r0, #10000	; 0x2710
 8002432:	f000 f9f7 	bl	8002824 <Chicken_Delay>
			IWDG_Reset();
 8002436:	f001 fcb5 	bl	8003da4 <IWDG_Reset>
			break;
 800243a:	e063      	b.n	8002504 <Chicken_SelectEgg+0x164>

		case 3:
			MainEggInfo = GooseInfo; //select egg goose
 800243c:	4a33      	ldr	r2, [pc, #204]	; (800250c <Chicken_SelectEgg+0x16c>)
 800243e:	4b39      	ldr	r3, [pc, #228]	; (8002524 <Chicken_SelectEgg+0x184>)
 8002440:	4614      	mov	r4, r2
 8002442:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002444:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			LCD_CLS(&LCD_PIN);
 8002448:	4832      	ldr	r0, [pc, #200]	; (8002514 <Chicken_SelectEgg+0x174>)
 800244a:	f001 fdd9 	bl	8004000 <LCD_CLS>
			LCD_Home(&LCD_PIN);
 800244e:	4831      	ldr	r0, [pc, #196]	; (8002514 <Chicken_SelectEgg+0x174>)
 8002450:	f001 fde2 	bl	8004018 <LCD_Home>
			LCD_Printf("type egg: Goose", &LCD_PIN);// send detail to LCD
 8002454:	492f      	ldr	r1, [pc, #188]	; (8002514 <Chicken_SelectEgg+0x174>)
 8002456:	4834      	ldr	r0, [pc, #208]	; (8002528 <Chicken_SelectEgg+0x188>)
 8002458:	f001 fdb2 	bl	8003fc0 <LCD_Printf>
			IWDG_Reset();
 800245c:	f001 fca2 	bl	8003da4 <IWDG_Reset>
			Chicken_Delay(10000);// wait 10 seconds
 8002460:	f242 7010 	movw	r0, #10000	; 0x2710
 8002464:	f000 f9de 	bl	8002824 <Chicken_Delay>
			IWDG_Reset();
 8002468:	f001 fc9c 	bl	8003da4 <IWDG_Reset>
			break;
 800246c:	e04a      	b.n	8002504 <Chicken_SelectEgg+0x164>

		case 4:
			MainEggInfo = QuailInfo; //select egg Quail
 800246e:	4a27      	ldr	r2, [pc, #156]	; (800250c <Chicken_SelectEgg+0x16c>)
 8002470:	4b2e      	ldr	r3, [pc, #184]	; (800252c <Chicken_SelectEgg+0x18c>)
 8002472:	4614      	mov	r4, r2
 8002474:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002476:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			LCD_CLS(&LCD_PIN);
 800247a:	4826      	ldr	r0, [pc, #152]	; (8002514 <Chicken_SelectEgg+0x174>)
 800247c:	f001 fdc0 	bl	8004000 <LCD_CLS>
			LCD_Home(&LCD_PIN);
 8002480:	4824      	ldr	r0, [pc, #144]	; (8002514 <Chicken_SelectEgg+0x174>)
 8002482:	f001 fdc9 	bl	8004018 <LCD_Home>
			LCD_Printf("type egg: Quail", &LCD_PIN);// send detail to lcd
 8002486:	4923      	ldr	r1, [pc, #140]	; (8002514 <Chicken_SelectEgg+0x174>)
 8002488:	4829      	ldr	r0, [pc, #164]	; (8002530 <Chicken_SelectEgg+0x190>)
 800248a:	f001 fd99 	bl	8003fc0 <LCD_Printf>
			IWDG_Reset();
 800248e:	f001 fc89 	bl	8003da4 <IWDG_Reset>
			Chicken_Delay(10000);// wait 10 seconds
 8002492:	f242 7010 	movw	r0, #10000	; 0x2710
 8002496:	f000 f9c5 	bl	8002824 <Chicken_Delay>
			IWDG_Reset();
 800249a:	f001 fc83 	bl	8003da4 <IWDG_Reset>
			break;
 800249e:	e031      	b.n	8002504 <Chicken_SelectEgg+0x164>

		case 5:
			MainEggInfo = QuailBHInfo; //select egg Quail baht white
 80024a0:	4a1a      	ldr	r2, [pc, #104]	; (800250c <Chicken_SelectEgg+0x16c>)
 80024a2:	4b24      	ldr	r3, [pc, #144]	; (8002534 <Chicken_SelectEgg+0x194>)
 80024a4:	4614      	mov	r4, r2
 80024a6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80024a8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			LCD_CLS(&LCD_PIN);
 80024ac:	4819      	ldr	r0, [pc, #100]	; (8002514 <Chicken_SelectEgg+0x174>)
 80024ae:	f001 fda7 	bl	8004000 <LCD_CLS>
			LCD_Home(&LCD_PIN);
 80024b2:	4818      	ldr	r0, [pc, #96]	; (8002514 <Chicken_SelectEgg+0x174>)
 80024b4:	f001 fdb0 	bl	8004018 <LCD_Home>
			LCD_Printf("type egg: Quail Baht white", &LCD_PIN);// send detail to lcd
 80024b8:	4916      	ldr	r1, [pc, #88]	; (8002514 <Chicken_SelectEgg+0x174>)
 80024ba:	481f      	ldr	r0, [pc, #124]	; (8002538 <Chicken_SelectEgg+0x198>)
 80024bc:	f001 fd80 	bl	8003fc0 <LCD_Printf>
			IWDG_Reset();
 80024c0:	f001 fc70 	bl	8003da4 <IWDG_Reset>
			Chicken_Delay(10000);// wait 10 seconds
 80024c4:	f242 7010 	movw	r0, #10000	; 0x2710
 80024c8:	f000 f9ac 	bl	8002824 <Chicken_Delay>
			IWDG_Reset();
 80024cc:	f001 fc6a 	bl	8003da4 <IWDG_Reset>
			break;
 80024d0:	e018      	b.n	8002504 <Chicken_SelectEgg+0x164>

		case 6:
			MainEggInfo = TurkeyInfo; //select egg turkey
 80024d2:	4a0e      	ldr	r2, [pc, #56]	; (800250c <Chicken_SelectEgg+0x16c>)
 80024d4:	4b19      	ldr	r3, [pc, #100]	; (800253c <Chicken_SelectEgg+0x19c>)
 80024d6:	4614      	mov	r4, r2
 80024d8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80024da:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			LCD_CLS(&LCD_PIN);
 80024de:	480d      	ldr	r0, [pc, #52]	; (8002514 <Chicken_SelectEgg+0x174>)
 80024e0:	f001 fd8e 	bl	8004000 <LCD_CLS>
			LCD_Home(&LCD_PIN);
 80024e4:	480b      	ldr	r0, [pc, #44]	; (8002514 <Chicken_SelectEgg+0x174>)
 80024e6:	f001 fd97 	bl	8004018 <LCD_Home>
			LCD_Printf("type egg: Turkey", &LCD_PIN);// send detail to lcd
 80024ea:	490a      	ldr	r1, [pc, #40]	; (8002514 <Chicken_SelectEgg+0x174>)
 80024ec:	4814      	ldr	r0, [pc, #80]	; (8002540 <Chicken_SelectEgg+0x1a0>)
 80024ee:	f001 fd67 	bl	8003fc0 <LCD_Printf>
			IWDG_Reset();
 80024f2:	f001 fc57 	bl	8003da4 <IWDG_Reset>
			Chicken_Delay(10000);// wait 10 seconds
 80024f6:	f242 7010 	movw	r0, #10000	; 0x2710
 80024fa:	f000 f993 	bl	8002824 <Chicken_Delay>
			IWDG_Reset();
 80024fe:	f001 fc51 	bl	8003da4 <IWDG_Reset>
			break;
 8002502:	bf00      	nop
	};

};
 8002504:	bf00      	nop
 8002506:	bd98      	pop	{r3, r4, r7, pc}
 8002508:	40005400 	.word	0x40005400
 800250c:	20000120 	.word	0x20000120
 8002510:	20000130 	.word	0x20000130
 8002514:	200000bc 	.word	0x200000bc
 8002518:	080074ac 	.word	0x080074ac
 800251c:	20000100 	.word	0x20000100
 8002520:	080074bc 	.word	0x080074bc
 8002524:	200000e0 	.word	0x200000e0
 8002528:	080074cc 	.word	0x080074cc
 800252c:	20000110 	.word	0x20000110
 8002530:	080074dc 	.word	0x080074dc
 8002534:	20000140 	.word	0x20000140
 8002538:	080074ec 	.word	0x080074ec
 800253c:	20000164 	.word	0x20000164
 8002540:	08007508 	.word	0x08007508

08002544 <Chicken_EggInfo>:
void Chicken_EggInfo()
{
 8002544:	b480      	push	{r7}
 8002546:	af00      	add	r7, sp, #0
// add info Hen
	HenInfo.AllTime = 21;
 8002548:	4b53      	ldr	r3, [pc, #332]	; (8002698 <Chicken_EggInfo+0x154>)
 800254a:	2215      	movs	r2, #21
 800254c:	72da      	strb	r2, [r3, #11]
	HenInfo.HumidityHatcher = 70;
 800254e:	4b52      	ldr	r3, [pc, #328]	; (8002698 <Chicken_EggInfo+0x154>)
 8002550:	2246      	movs	r2, #70	; 0x46
 8002552:	725a      	strb	r2, [r3, #9]
	HenInfo.HumidityIncubator = 37.5;
 8002554:	4b50      	ldr	r3, [pc, #320]	; (8002698 <Chicken_EggInfo+0x154>)
 8002556:	2225      	movs	r2, #37	; 0x25
 8002558:	721a      	strb	r2, [r3, #8]
	HenInfo.HumiditySaved = 65;
 800255a:	4b4f      	ldr	r3, [pc, #316]	; (8002698 <Chicken_EggInfo+0x154>)
 800255c:	2241      	movs	r2, #65	; 0x41
 800255e:	739a      	strb	r2, [r3, #14]
	HenInfo.TempHatcher = 37.2;
 8002560:	4b4d      	ldr	r3, [pc, #308]	; (8002698 <Chicken_EggInfo+0x154>)
 8002562:	4a4e      	ldr	r2, [pc, #312]	; (800269c <Chicken_EggInfo+0x158>)
 8002564:	605a      	str	r2, [r3, #4]
	HenInfo.TempIncubator = 37.5;
 8002566:	4b4c      	ldr	r3, [pc, #304]	; (8002698 <Chicken_EggInfo+0x154>)
 8002568:	4a4d      	ldr	r2, [pc, #308]	; (80026a0 <Chicken_EggInfo+0x15c>)
 800256a:	601a      	str	r2, [r3, #0]
	HenInfo.TempSaved = 14;
 800256c:	4b4a      	ldr	r3, [pc, #296]	; (8002698 <Chicken_EggInfo+0x154>)
 800256e:	220e      	movs	r2, #14
 8002570:	731a      	strb	r2, [r3, #12]
	HenInfo.TimeIncubator = 18;
 8002572:	4b49      	ldr	r3, [pc, #292]	; (8002698 <Chicken_EggInfo+0x154>)
 8002574:	2212      	movs	r2, #18
 8002576:	729a      	strb	r2, [r3, #10]
	HenInfo.TimeSaved = 7;
 8002578:	4b47      	ldr	r3, [pc, #284]	; (8002698 <Chicken_EggInfo+0x154>)
 800257a:	2207      	movs	r2, #7
 800257c:	735a      	strb	r2, [r3, #13]

// add info Duck
	DuckInfo.AllTime = 28;
 800257e:	4b49      	ldr	r3, [pc, #292]	; (80026a4 <Chicken_EggInfo+0x160>)
 8002580:	221c      	movs	r2, #28
 8002582:	72da      	strb	r2, [r3, #11]
	DuckInfo.HumidityHatcher = 75;
 8002584:	4b47      	ldr	r3, [pc, #284]	; (80026a4 <Chicken_EggInfo+0x160>)
 8002586:	224b      	movs	r2, #75	; 0x4b
 8002588:	725a      	strb	r2, [r3, #9]
	DuckInfo.HumidityIncubator = 60;
 800258a:	4b46      	ldr	r3, [pc, #280]	; (80026a4 <Chicken_EggInfo+0x160>)
 800258c:	223c      	movs	r2, #60	; 0x3c
 800258e:	721a      	strb	r2, [r3, #8]
	DuckInfo.HumiditySaved = 0;
 8002590:	4b44      	ldr	r3, [pc, #272]	; (80026a4 <Chicken_EggInfo+0x160>)
 8002592:	2200      	movs	r2, #0
 8002594:	739a      	strb	r2, [r3, #14]
	DuckInfo.TempHatcher = 0;
 8002596:	4b43      	ldr	r3, [pc, #268]	; (80026a4 <Chicken_EggInfo+0x160>)
 8002598:	f04f 0200 	mov.w	r2, #0
 800259c:	605a      	str	r2, [r3, #4]
	DuckInfo.TempIncubator = 37.5;
 800259e:	4b41      	ldr	r3, [pc, #260]	; (80026a4 <Chicken_EggInfo+0x160>)
 80025a0:	4a3f      	ldr	r2, [pc, #252]	; (80026a0 <Chicken_EggInfo+0x15c>)
 80025a2:	601a      	str	r2, [r3, #0]
	DuckInfo.TempSaved = 0;
 80025a4:	4b3f      	ldr	r3, [pc, #252]	; (80026a4 <Chicken_EggInfo+0x160>)
 80025a6:	2200      	movs	r2, #0
 80025a8:	731a      	strb	r2, [r3, #12]
	DuckInfo.TimeIncubator = 25;
 80025aa:	4b3e      	ldr	r3, [pc, #248]	; (80026a4 <Chicken_EggInfo+0x160>)
 80025ac:	2219      	movs	r2, #25
 80025ae:	729a      	strb	r2, [r3, #10]
	DuckInfo.TimeSaved = 0;
 80025b0:	4b3c      	ldr	r3, [pc, #240]	; (80026a4 <Chicken_EggInfo+0x160>)
 80025b2:	2200      	movs	r2, #0
 80025b4:	735a      	strb	r2, [r3, #13]

// add info Goose
	GooseInfo.AllTime = 30;
 80025b6:	4b3c      	ldr	r3, [pc, #240]	; (80026a8 <Chicken_EggInfo+0x164>)
 80025b8:	221e      	movs	r2, #30
 80025ba:	72da      	strb	r2, [r3, #11]
	GooseInfo.HumidityHatcher = 75;
 80025bc:	4b3a      	ldr	r3, [pc, #232]	; (80026a8 <Chicken_EggInfo+0x164>)
 80025be:	224b      	movs	r2, #75	; 0x4b
 80025c0:	725a      	strb	r2, [r3, #9]
	GooseInfo.HumidityIncubator = 55;
 80025c2:	4b39      	ldr	r3, [pc, #228]	; (80026a8 <Chicken_EggInfo+0x164>)
 80025c4:	2237      	movs	r2, #55	; 0x37
 80025c6:	721a      	strb	r2, [r3, #8]
	GooseInfo.HumiditySaved = 70;
 80025c8:	4b37      	ldr	r3, [pc, #220]	; (80026a8 <Chicken_EggInfo+0x164>)
 80025ca:	2246      	movs	r2, #70	; 0x46
 80025cc:	739a      	strb	r2, [r3, #14]
	GooseInfo.TempHatcher = 37.5;
 80025ce:	4b36      	ldr	r3, [pc, #216]	; (80026a8 <Chicken_EggInfo+0x164>)
 80025d0:	4a33      	ldr	r2, [pc, #204]	; (80026a0 <Chicken_EggInfo+0x15c>)
 80025d2:	605a      	str	r2, [r3, #4]
	GooseInfo.TempIncubator = 37.7;
 80025d4:	4b34      	ldr	r3, [pc, #208]	; (80026a8 <Chicken_EggInfo+0x164>)
 80025d6:	4a35      	ldr	r2, [pc, #212]	; (80026ac <Chicken_EggInfo+0x168>)
 80025d8:	601a      	str	r2, [r3, #0]
	GooseInfo.TempSaved = 14;
 80025da:	4b33      	ldr	r3, [pc, #204]	; (80026a8 <Chicken_EggInfo+0x164>)
 80025dc:	220e      	movs	r2, #14
 80025de:	731a      	strb	r2, [r3, #12]
	GooseInfo.TimeIncubator = 4;
 80025e0:	4b31      	ldr	r3, [pc, #196]	; (80026a8 <Chicken_EggInfo+0x164>)
 80025e2:	2204      	movs	r2, #4
 80025e4:	729a      	strb	r2, [r3, #10]
	GooseInfo.TimeSaved = 5;
 80025e6:	4b30      	ldr	r3, [pc, #192]	; (80026a8 <Chicken_EggInfo+0x164>)
 80025e8:	2205      	movs	r2, #5
 80025ea:	735a      	strb	r2, [r3, #13]

// add info Quail
	QuailInfo.AllTime = 18;
 80025ec:	4b30      	ldr	r3, [pc, #192]	; (80026b0 <Chicken_EggInfo+0x16c>)
 80025ee:	2212      	movs	r2, #18
 80025f0:	72da      	strb	r2, [r3, #11]
	QuailInfo.HumidityHatcher = 75;
 80025f2:	4b2f      	ldr	r3, [pc, #188]	; (80026b0 <Chicken_EggInfo+0x16c>)
 80025f4:	224b      	movs	r2, #75	; 0x4b
 80025f6:	725a      	strb	r2, [r3, #9]
	QuailInfo.HumidityIncubator = 45;
 80025f8:	4b2d      	ldr	r3, [pc, #180]	; (80026b0 <Chicken_EggInfo+0x16c>)
 80025fa:	222d      	movs	r2, #45	; 0x2d
 80025fc:	721a      	strb	r2, [r3, #8]
	QuailInfo.HumiditySaved = 70;
 80025fe:	4b2c      	ldr	r3, [pc, #176]	; (80026b0 <Chicken_EggInfo+0x16c>)
 8002600:	2246      	movs	r2, #70	; 0x46
 8002602:	739a      	strb	r2, [r3, #14]
	QuailInfo.TempHatcher = 37;
 8002604:	4b2a      	ldr	r3, [pc, #168]	; (80026b0 <Chicken_EggInfo+0x16c>)
 8002606:	4a2b      	ldr	r2, [pc, #172]	; (80026b4 <Chicken_EggInfo+0x170>)
 8002608:	605a      	str	r2, [r3, #4]
	QuailInfo.TempIncubator = 37.5;
 800260a:	4b29      	ldr	r3, [pc, #164]	; (80026b0 <Chicken_EggInfo+0x16c>)
 800260c:	4a24      	ldr	r2, [pc, #144]	; (80026a0 <Chicken_EggInfo+0x15c>)
 800260e:	601a      	str	r2, [r3, #0]
	QuailInfo.TempSaved = 14;
 8002610:	4b27      	ldr	r3, [pc, #156]	; (80026b0 <Chicken_EggInfo+0x16c>)
 8002612:	220e      	movs	r2, #14
 8002614:	731a      	strb	r2, [r3, #12]
	QuailInfo.TimeIncubator = 15;
 8002616:	4b26      	ldr	r3, [pc, #152]	; (80026b0 <Chicken_EggInfo+0x16c>)
 8002618:	220f      	movs	r2, #15
 800261a:	729a      	strb	r2, [r3, #10]
	QuailInfo.TimeSaved = 9;
 800261c:	4b24      	ldr	r3, [pc, #144]	; (80026b0 <Chicken_EggInfo+0x16c>)
 800261e:	2209      	movs	r2, #9
 8002620:	735a      	strb	r2, [r3, #13]

// add info Quail baht White
	QuailBHInfo.AllTime = 23;
 8002622:	4b25      	ldr	r3, [pc, #148]	; (80026b8 <Chicken_EggInfo+0x174>)
 8002624:	2217      	movs	r2, #23
 8002626:	72da      	strb	r2, [r3, #11]
	QuailBHInfo.HumidityHatcher = 75;
 8002628:	4b23      	ldr	r3, [pc, #140]	; (80026b8 <Chicken_EggInfo+0x174>)
 800262a:	224b      	movs	r2, #75	; 0x4b
 800262c:	725a      	strb	r2, [r3, #9]
	QuailBHInfo.HumidityIncubator = 45;
 800262e:	4b22      	ldr	r3, [pc, #136]	; (80026b8 <Chicken_EggInfo+0x174>)
 8002630:	222d      	movs	r2, #45	; 0x2d
 8002632:	721a      	strb	r2, [r3, #8]
	QuailBHInfo.HumiditySaved = 70;
 8002634:	4b20      	ldr	r3, [pc, #128]	; (80026b8 <Chicken_EggInfo+0x174>)
 8002636:	2246      	movs	r2, #70	; 0x46
 8002638:	739a      	strb	r2, [r3, #14]
	QuailBHInfo.TempHatcher = 37;
 800263a:	4b1f      	ldr	r3, [pc, #124]	; (80026b8 <Chicken_EggInfo+0x174>)
 800263c:	4a1d      	ldr	r2, [pc, #116]	; (80026b4 <Chicken_EggInfo+0x170>)
 800263e:	605a      	str	r2, [r3, #4]
	QuailBHInfo.TempIncubator = 37.5;
 8002640:	4b1d      	ldr	r3, [pc, #116]	; (80026b8 <Chicken_EggInfo+0x174>)
 8002642:	4a17      	ldr	r2, [pc, #92]	; (80026a0 <Chicken_EggInfo+0x15c>)
 8002644:	601a      	str	r2, [r3, #0]
	QuailBHInfo.TempSaved = 14;
 8002646:	4b1c      	ldr	r3, [pc, #112]	; (80026b8 <Chicken_EggInfo+0x174>)
 8002648:	220e      	movs	r2, #14
 800264a:	731a      	strb	r2, [r3, #12]
	QuailBHInfo.TimeIncubator = 20;
 800264c:	4b1a      	ldr	r3, [pc, #104]	; (80026b8 <Chicken_EggInfo+0x174>)
 800264e:	2214      	movs	r2, #20
 8002650:	729a      	strb	r2, [r3, #10]
	QuailBHInfo.TimeSaved = 9;
 8002652:	4b19      	ldr	r3, [pc, #100]	; (80026b8 <Chicken_EggInfo+0x174>)
 8002654:	2209      	movs	r2, #9
 8002656:	735a      	strb	r2, [r3, #13]

// add info Turkey
	TurkeyInfo.AllTime = 28;
 8002658:	4b18      	ldr	r3, [pc, #96]	; (80026bc <Chicken_EggInfo+0x178>)
 800265a:	221c      	movs	r2, #28
 800265c:	72da      	strb	r2, [r3, #11]
	TurkeyInfo.HumidityHatcher = 75;
 800265e:	4b17      	ldr	r3, [pc, #92]	; (80026bc <Chicken_EggInfo+0x178>)
 8002660:	224b      	movs	r2, #75	; 0x4b
 8002662:	725a      	strb	r2, [r3, #9]
	TurkeyInfo.HumidityIncubator = 55;
 8002664:	4b15      	ldr	r3, [pc, #84]	; (80026bc <Chicken_EggInfo+0x178>)
 8002666:	2237      	movs	r2, #55	; 0x37
 8002668:	721a      	strb	r2, [r3, #8]
	TurkeyInfo.HumiditySaved = 0;
 800266a:	4b14      	ldr	r3, [pc, #80]	; (80026bc <Chicken_EggInfo+0x178>)
 800266c:	2200      	movs	r2, #0
 800266e:	739a      	strb	r2, [r3, #14]
	TurkeyInfo.TempHatcher = 37;
 8002670:	4b12      	ldr	r3, [pc, #72]	; (80026bc <Chicken_EggInfo+0x178>)
 8002672:	4a10      	ldr	r2, [pc, #64]	; (80026b4 <Chicken_EggInfo+0x170>)
 8002674:	605a      	str	r2, [r3, #4]
	TurkeyInfo.TempIncubator = 37.5;
 8002676:	4b11      	ldr	r3, [pc, #68]	; (80026bc <Chicken_EggInfo+0x178>)
 8002678:	4a09      	ldr	r2, [pc, #36]	; (80026a0 <Chicken_EggInfo+0x15c>)
 800267a:	601a      	str	r2, [r3, #0]
	TurkeyInfo.TempSaved = 0;
 800267c:	4b0f      	ldr	r3, [pc, #60]	; (80026bc <Chicken_EggInfo+0x178>)
 800267e:	2200      	movs	r2, #0
 8002680:	731a      	strb	r2, [r3, #12]
	TurkeyInfo.TimeIncubator = 25;
 8002682:	4b0e      	ldr	r3, [pc, #56]	; (80026bc <Chicken_EggInfo+0x178>)
 8002684:	2219      	movs	r2, #25
 8002686:	729a      	strb	r2, [r3, #10]
	TurkeyInfo.TimeSaved = 0;
 8002688:	4b0c      	ldr	r3, [pc, #48]	; (80026bc <Chicken_EggInfo+0x178>)
 800268a:	2200      	movs	r2, #0
 800268c:	735a      	strb	r2, [r3, #13]
}
 800268e:	bf00      	nop
 8002690:	46bd      	mov	sp, r7
 8002692:	bc80      	pop	{r7}
 8002694:	4770      	bx	lr
 8002696:	bf00      	nop
 8002698:	20000130 	.word	0x20000130
 800269c:	4214cccd 	.word	0x4214cccd
 80026a0:	42160000 	.word	0x42160000
 80026a4:	20000100 	.word	0x20000100
 80026a8:	200000e0 	.word	0x200000e0
 80026ac:	4216cccd 	.word	0x4216cccd
 80026b0:	20000110 	.word	0x20000110
 80026b4:	42140000 	.word	0x42140000
 80026b8:	20000140 	.word	0x20000140
 80026bc:	20000164 	.word	0x20000164

080026c0 <Chicken_Core>:
void Chicken_Core()
{
 80026c0:	b580      	push	{r7, lr}
 80026c2:	b086      	sub	sp, #24
 80026c4:	af00      	add	r7, sp, #0
	Chicken_Init();// initialize chicken device
 80026c6:	f7fe fe31 	bl	800132c <Chicken_Init>

	Chicken_SelectEgg();// set structure MainEggInfo = EggInfo(example: hen, duck)
 80026ca:	f7ff fe69 	bl	80023a0 <Chicken_SelectEgg>

	float HumiVal = 0, TempVal = 0;// declaration variables for save temperature and humidity
 80026ce:	f04f 0300 	mov.w	r3, #0
 80026d2:	613b      	str	r3, [r7, #16]
 80026d4:	f04f 0300 	mov.w	r3, #0
 80026d8:	60fb      	str	r3, [r7, #12]
	char SelectTypeMonitoring = 0;
 80026da:	2300      	movs	r3, #0
 80026dc:	75fb      	strb	r3, [r7, #23]
	uint8_t DelayMonitoring = 0, DelayHeater = 0;
 80026de:	2300      	movs	r3, #0
 80026e0:	75bb      	strb	r3, [r7, #22]
 80026e2:	2300      	movs	r3, #0
 80026e4:	757b      	strb	r3, [r7, #21]

	TimeStartIncubator.Year = AT24C02_Read(I2C1, 0xA0, 5);// read year start incubator
 80026e6:	2205      	movs	r2, #5
 80026e8:	21a0      	movs	r1, #160	; 0xa0
 80026ea:	4847      	ldr	r0, [pc, #284]	; (8002808 <Chicken_Core+0x148>)
 80026ec:	f7fe fd7a 	bl	80011e4 <AT24C02_Read>
 80026f0:	4603      	mov	r3, r0
 80026f2:	461a      	mov	r2, r3
 80026f4:	4b45      	ldr	r3, [pc, #276]	; (800280c <Chicken_Core+0x14c>)
 80026f6:	719a      	strb	r2, [r3, #6]
	TimeStartIncubator.Month = AT24C02_Read(I2C1, 0xA0, 6);// read month start incubator
 80026f8:	2206      	movs	r2, #6
 80026fa:	21a0      	movs	r1, #160	; 0xa0
 80026fc:	4842      	ldr	r0, [pc, #264]	; (8002808 <Chicken_Core+0x148>)
 80026fe:	f7fe fd71 	bl	80011e4 <AT24C02_Read>
 8002702:	4603      	mov	r3, r0
 8002704:	461a      	mov	r2, r3
 8002706:	4b41      	ldr	r3, [pc, #260]	; (800280c <Chicken_Core+0x14c>)
 8002708:	715a      	strb	r2, [r3, #5]
	TimeStartIncubator.Day = AT24C02_Read(I2C1, 0xA0, 7);// read day(1-7) start incubator
 800270a:	2207      	movs	r2, #7
 800270c:	21a0      	movs	r1, #160	; 0xa0
 800270e:	483e      	ldr	r0, [pc, #248]	; (8002808 <Chicken_Core+0x148>)
 8002710:	f7fe fd68 	bl	80011e4 <AT24C02_Read>
 8002714:	4603      	mov	r3, r0
 8002716:	461a      	mov	r2, r3
 8002718:	4b3c      	ldr	r3, [pc, #240]	; (800280c <Chicken_Core+0x14c>)
 800271a:	70da      	strb	r2, [r3, #3]
	TimeStartIncubator.Hour = AT24C02_Read(I2C1, 0xA0, 8);// read hour start incubator
 800271c:	2208      	movs	r2, #8
 800271e:	21a0      	movs	r1, #160	; 0xa0
 8002720:	4839      	ldr	r0, [pc, #228]	; (8002808 <Chicken_Core+0x148>)
 8002722:	f7fe fd5f 	bl	80011e4 <AT24C02_Read>
 8002726:	4603      	mov	r3, r0
 8002728:	461a      	mov	r2, r3
 800272a:	4b38      	ldr	r3, [pc, #224]	; (800280c <Chicken_Core+0x14c>)
 800272c:	709a      	strb	r2, [r3, #2]

	LengthTimeStartIncubator = AT24C02_Read(I2C1, 0xA0, 11);// read length time start incubator
 800272e:	220b      	movs	r2, #11
 8002730:	21a0      	movs	r1, #160	; 0xa0
 8002732:	4835      	ldr	r0, [pc, #212]	; (8002808 <Chicken_Core+0x148>)
 8002734:	f7fe fd56 	bl	80011e4 <AT24C02_Read>
 8002738:	4603      	mov	r3, r0
 800273a:	461a      	mov	r2, r3
 800273c:	4b34      	ldr	r3, [pc, #208]	; (8002810 <Chicken_Core+0x150>)
 800273e:	701a      	strb	r2, [r3, #0]

	while(1)
	{
		if(USART_ReceiveData(USART1) == 'c')
 8002740:	4834      	ldr	r0, [pc, #208]	; (8002814 <Chicken_Core+0x154>)
 8002742:	f003 fa01 	bl	8005b48 <USART_ReceiveData>
 8002746:	4603      	mov	r3, r0
 8002748:	2b63      	cmp	r3, #99	; 0x63
 800274a:	d113      	bne.n	8002774 <Chicken_Core+0xb4>
		{
			unsigned char string[6];
			USART_Printf(USART1, "Please Enter Command: ");
 800274c:	4932      	ldr	r1, [pc, #200]	; (8002818 <Chicken_Core+0x158>)
 800274e:	4831      	ldr	r0, [pc, #196]	; (8002814 <Chicken_Core+0x154>)
 8002750:	f7ff fdde 	bl	8002310 <USART_Printf>
			USART_Scanf(USART1, string, '.');// wait receive string "init"
 8002754:	1d3b      	adds	r3, r7, #4
 8002756:	222e      	movs	r2, #46	; 0x2e
 8002758:	4619      	mov	r1, r3
 800275a:	482e      	ldr	r0, [pc, #184]	; (8002814 <Chicken_Core+0x154>)
 800275c:	f7ff fdfa 	bl	8002354 <USART_Scanf>

			if(strcmp(string, "init") == 0)// if string received == "init" , execute procedure MainMenu
 8002760:	1d3b      	adds	r3, r7, #4
 8002762:	492e      	ldr	r1, [pc, #184]	; (800281c <Chicken_Core+0x15c>)
 8002764:	4618      	mov	r0, r3
 8002766:	f7fd fcf3 	bl	8000150 <strcmp>
 800276a:	4603      	mov	r3, r0
 800276c:	2b00      	cmp	r3, #0
 800276e:	d101      	bne.n	8002774 <Chicken_Core+0xb4>
				Chicken_MainMenu();
 8002770:	f7fe fee2 	bl	8001538 <Chicken_MainMenu>
		}

		if(DS3231_ReadFlag(I2C1, DS3231_FLAG_A1F) != 0x00)// if flag alarm1(A1F) == enable, execute procedure SetAlarmNextDay
 8002774:	2101      	movs	r1, #1
 8002776:	4824      	ldr	r0, [pc, #144]	; (8002808 <Chicken_Core+0x148>)
 8002778:	f000 fca0 	bl	80030bc <DS3231_ReadFlag>
 800277c:	4603      	mov	r3, r0
 800277e:	2b00      	cmp	r3, #0
 8002780:	d001      	beq.n	8002786 <Chicken_Core+0xc6>
			Chicken_SetAlarmNextDay();
 8002782:	f7ff fd0f 	bl	80021a4 <Chicken_SetAlarmNextDay>

		TempVal = SHT_ReadTemp(I2C1);// read temperature
 8002786:	4820      	ldr	r0, [pc, #128]	; (8002808 <Chicken_Core+0x148>)
 8002788:	f002 fc96 	bl	80050b8 <SHT_ReadTemp>
 800278c:	4603      	mov	r3, r0
 800278e:	60fb      	str	r3, [r7, #12]
		HumiVal = SHT_ReadHumidity(I2C1);// read humidity
 8002790:	481d      	ldr	r0, [pc, #116]	; (8002808 <Chicken_Core+0x148>)
 8002792:	f002 fd69 	bl	8005268 <SHT_ReadHumidity>
 8002796:	4603      	mov	r3, r0
 8002798:	613b      	str	r3, [r7, #16]

		if(SaveSecond >= 86400)// 86400 seconds = 24 Hour
			SaveSecond = 0;// if saveSecond >= 86400, SaveSecond = 0

		if(((DelayMonitoring * WAIT_MONITORING) + WAIT_MONITORING) >= SaveSecond)// every 7 second execute Monitoring Procedure
 800279a:	7dbb      	ldrb	r3, [r7, #22]
 800279c:	1c5a      	adds	r2, r3, #1
 800279e:	4613      	mov	r3, r2
 80027a0:	00db      	lsls	r3, r3, #3
 80027a2:	1a9b      	subs	r3, r3, r2
 80027a4:	4a1e      	ldr	r2, [pc, #120]	; (8002820 <Chicken_Core+0x160>)
 80027a6:	8812      	ldrh	r2, [r2, #0]
 80027a8:	4293      	cmp	r3, r2
 80027aa:	db12      	blt.n	80027d2 <Chicken_Core+0x112>
		{
			DelayMonitoring++;// increase variable DelayMonitoring
 80027ac:	7dbb      	ldrb	r3, [r7, #22]
 80027ae:	3301      	adds	r3, #1
 80027b0:	75bb      	strb	r3, [r7, #22]
			if(SelectTypeMonitoring >= 5)
 80027b2:	7dfb      	ldrb	r3, [r7, #23]
 80027b4:	2b04      	cmp	r3, #4
 80027b6:	d901      	bls.n	80027bc <Chicken_Core+0xfc>
				SelectTypeMonitoring = 0;// if SelectTypeMonitoring >= 5, set = 0
 80027b8:	2300      	movs	r3, #0
 80027ba:	75fb      	strb	r3, [r7, #23]
			Chicken_Monitoring(&TempVal, &HumiVal, &TimeStartIncubator, ++SelectTypeMonitoring);// execute procedure monitoring
 80027bc:	7dfb      	ldrb	r3, [r7, #23]
 80027be:	3301      	adds	r3, #1
 80027c0:	75fb      	strb	r3, [r7, #23]
 80027c2:	7dfb      	ldrb	r3, [r7, #23]
 80027c4:	f107 0110 	add.w	r1, r7, #16
 80027c8:	f107 000c 	add.w	r0, r7, #12
 80027cc:	4a0f      	ldr	r2, [pc, #60]	; (800280c <Chicken_Core+0x14c>)
 80027ce:	f7ff f8ad 	bl	800192c <Chicken_Monitoring>
		};

		Chicken_ControlTempFan(&TempVal, &LengthTimeStartIncubator);// control temperature with fan
 80027d2:	f107 030c 	add.w	r3, r7, #12
 80027d6:	490e      	ldr	r1, [pc, #56]	; (8002810 <Chicken_Core+0x150>)
 80027d8:	4618      	mov	r0, r3
 80027da:	f7ff fb99 	bl	8001f10 <Chicken_ControlTempFan>

		if(((DelayHeater * WAIT_HEATER) + WAIT_HEATER) >= SaveSecond)// every 10 second execute ControlTempHeater Procedure
 80027de:	7d7b      	ldrb	r3, [r7, #21]
 80027e0:	1c5a      	adds	r2, r3, #1
 80027e2:	4613      	mov	r3, r2
 80027e4:	009b      	lsls	r3, r3, #2
 80027e6:	4413      	add	r3, r2
 80027e8:	005b      	lsls	r3, r3, #1
 80027ea:	461a      	mov	r2, r3
 80027ec:	4b0c      	ldr	r3, [pc, #48]	; (8002820 <Chicken_Core+0x160>)
 80027ee:	881b      	ldrh	r3, [r3, #0]
 80027f0:	429a      	cmp	r2, r3
 80027f2:	dba5      	blt.n	8002740 <Chicken_Core+0x80>
		{
			DelayHeater++;// increase variable DelayMonitoring
 80027f4:	7d7b      	ldrb	r3, [r7, #21]
 80027f6:	3301      	adds	r3, #1
 80027f8:	757b      	strb	r3, [r7, #21]
			Chicken_ControlTempHeater(&TempVal, &LengthTimeStartIncubator);// control temperature with Heater
 80027fa:	f107 030c 	add.w	r3, r7, #12
 80027fe:	4904      	ldr	r1, [pc, #16]	; (8002810 <Chicken_Core+0x150>)
 8002800:	4618      	mov	r0, r3
 8002802:	f7ff fbf1 	bl	8001fe8 <Chicken_ControlTempHeater>
		};
	};
 8002806:	e79b      	b.n	8002740 <Chicken_Core+0x80>
 8002808:	40005400 	.word	0x40005400
 800280c:	200000f8 	.word	0x200000f8
 8002810:	2000009c 	.word	0x2000009c
 8002814:	40013800 	.word	0x40013800
 8002818:	0800751c 	.word	0x0800751c
 800281c:	08007534 	.word	0x08007534
 8002820:	2000009e 	.word	0x2000009e

08002824 <Chicken_Delay>:
};
void Chicken_Delay(__uint16_t Time_ms)
{
 8002824:	b480      	push	{r7}
 8002826:	b085      	sub	sp, #20
 8002828:	af00      	add	r7, sp, #0
 800282a:	4603      	mov	r3, r0
 800282c:	80fb      	strh	r3, [r7, #6]
	while(Time_ms--)
 800282e:	e009      	b.n	8002844 <Chicken_Delay+0x20>
		for (__uint16_t i = 0; i <= (CLOCK_FREQUENCY / 10000); i++);// wait 1ms
 8002830:	2300      	movs	r3, #0
 8002832:	81fb      	strh	r3, [r7, #14]
 8002834:	e002      	b.n	800283c <Chicken_Delay+0x18>
 8002836:	89fb      	ldrh	r3, [r7, #14]
 8002838:	3301      	adds	r3, #1
 800283a:	81fb      	strh	r3, [r7, #14]
 800283c:	89fb      	ldrh	r3, [r7, #14]
 800283e:	f5b3 6fe1 	cmp.w	r3, #1800	; 0x708
 8002842:	d9f8      	bls.n	8002836 <Chicken_Delay+0x12>
		};
	};
};
void Chicken_Delay(__uint16_t Time_ms)
{
	while(Time_ms--)
 8002844:	88fb      	ldrh	r3, [r7, #6]
 8002846:	1e5a      	subs	r2, r3, #1
 8002848:	80fa      	strh	r2, [r7, #6]
 800284a:	2b00      	cmp	r3, #0
 800284c:	d1f0      	bne.n	8002830 <Chicken_Delay+0xc>
		for (__uint16_t i = 0; i <= (CLOCK_FREQUENCY / 10000); i++);// wait 1ms
};
 800284e:	bf00      	nop
 8002850:	3714      	adds	r7, #20
 8002852:	46bd      	mov	sp, r7
 8002854:	bc80      	pop	{r7}
 8002856:	4770      	bx	lr

08002858 <TIM2_IRQHandler>:
void TIM2_IRQHandler(){
 8002858:	b580      	push	{r7, lr}
 800285a:	af00      	add	r7, sp, #0
	SaveSecond++;// increase variables
 800285c:	4b06      	ldr	r3, [pc, #24]	; (8002878 <TIM2_IRQHandler+0x20>)
 800285e:	881b      	ldrh	r3, [r3, #0]
 8002860:	3301      	adds	r3, #1
 8002862:	b29a      	uxth	r2, r3
 8002864:	4b04      	ldr	r3, [pc, #16]	; (8002878 <TIM2_IRQHandler+0x20>)
 8002866:	801a      	strh	r2, [r3, #0]
	TIM_ClearFlag(TIM2, TIM_FLAG_Update);
 8002868:	2101      	movs	r1, #1
 800286a:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800286e:	f003 f86f 	bl	8005950 <TIM_ClearFlag>
};
 8002872:	bf00      	nop
 8002874:	bd80      	pop	{r7, pc}
 8002876:	bf00      	nop
 8002878:	2000009e 	.word	0x2000009e

0800287c <reverse>:

// reverses a string 'str' of length 'len'
void reverse(char *str, int len)
{
 800287c:	b480      	push	{r7}
 800287e:	b087      	sub	sp, #28
 8002880:	af00      	add	r7, sp, #0
 8002882:	6078      	str	r0, [r7, #4]
 8002884:	6039      	str	r1, [r7, #0]
    int i=0, j=len-1, temp;
 8002886:	2300      	movs	r3, #0
 8002888:	617b      	str	r3, [r7, #20]
 800288a:	683b      	ldr	r3, [r7, #0]
 800288c:	3b01      	subs	r3, #1
 800288e:	613b      	str	r3, [r7, #16]
    while (i<j)
 8002890:	e018      	b.n	80028c4 <reverse+0x48>
    {
        temp = str[i];
 8002892:	697b      	ldr	r3, [r7, #20]
 8002894:	687a      	ldr	r2, [r7, #4]
 8002896:	4413      	add	r3, r2
 8002898:	781b      	ldrb	r3, [r3, #0]
 800289a:	60fb      	str	r3, [r7, #12]
        str[i] = str[j];
 800289c:	697b      	ldr	r3, [r7, #20]
 800289e:	687a      	ldr	r2, [r7, #4]
 80028a0:	4413      	add	r3, r2
 80028a2:	693a      	ldr	r2, [r7, #16]
 80028a4:	6879      	ldr	r1, [r7, #4]
 80028a6:	440a      	add	r2, r1
 80028a8:	7812      	ldrb	r2, [r2, #0]
 80028aa:	701a      	strb	r2, [r3, #0]
        str[j] = temp;
 80028ac:	693b      	ldr	r3, [r7, #16]
 80028ae:	687a      	ldr	r2, [r7, #4]
 80028b0:	4413      	add	r3, r2
 80028b2:	68fa      	ldr	r2, [r7, #12]
 80028b4:	b2d2      	uxtb	r2, r2
 80028b6:	701a      	strb	r2, [r3, #0]
        i++; j--;
 80028b8:	697b      	ldr	r3, [r7, #20]
 80028ba:	3301      	adds	r3, #1
 80028bc:	617b      	str	r3, [r7, #20]
 80028be:	693b      	ldr	r3, [r7, #16]
 80028c0:	3b01      	subs	r3, #1
 80028c2:	613b      	str	r3, [r7, #16]

// reverses a string 'str' of length 'len'
void reverse(char *str, int len)
{
    int i=0, j=len-1, temp;
    while (i<j)
 80028c4:	697a      	ldr	r2, [r7, #20]
 80028c6:	693b      	ldr	r3, [r7, #16]
 80028c8:	429a      	cmp	r2, r3
 80028ca:	dbe2      	blt.n	8002892 <reverse+0x16>
        temp = str[i];
        str[i] = str[j];
        str[j] = temp;
        i++; j--;
    }
}
 80028cc:	bf00      	nop
 80028ce:	371c      	adds	r7, #28
 80028d0:	46bd      	mov	sp, r7
 80028d2:	bc80      	pop	{r7}
 80028d4:	4770      	bx	lr
 80028d6:	bf00      	nop

080028d8 <intToStr>:

 // Converts a given integer x to string str[].  d is the number
 // of digits required in output. If d is more than the number
 // of digits in x, then 0s are added at the beginning.
int intToStr(int x, char str[], int d)
{
 80028d8:	b580      	push	{r7, lr}
 80028da:	b086      	sub	sp, #24
 80028dc:	af00      	add	r7, sp, #0
 80028de:	60f8      	str	r0, [r7, #12]
 80028e0:	60b9      	str	r1, [r7, #8]
 80028e2:	607a      	str	r2, [r7, #4]
    int i = 0;
 80028e4:	2300      	movs	r3, #0
 80028e6:	617b      	str	r3, [r7, #20]
    while (x)
 80028e8:	e01d      	b.n	8002926 <intToStr+0x4e>
    {
        str[i++] = (x%10) + '0';
 80028ea:	697b      	ldr	r3, [r7, #20]
 80028ec:	1c5a      	adds	r2, r3, #1
 80028ee:	617a      	str	r2, [r7, #20]
 80028f0:	461a      	mov	r2, r3
 80028f2:	68bb      	ldr	r3, [r7, #8]
 80028f4:	1898      	adds	r0, r3, r2
 80028f6:	68fa      	ldr	r2, [r7, #12]
 80028f8:	4b1a      	ldr	r3, [pc, #104]	; (8002964 <intToStr+0x8c>)
 80028fa:	fb83 1302 	smull	r1, r3, r3, r2
 80028fe:	1099      	asrs	r1, r3, #2
 8002900:	17d3      	asrs	r3, r2, #31
 8002902:	1ac9      	subs	r1, r1, r3
 8002904:	460b      	mov	r3, r1
 8002906:	009b      	lsls	r3, r3, #2
 8002908:	440b      	add	r3, r1
 800290a:	005b      	lsls	r3, r3, #1
 800290c:	1ad1      	subs	r1, r2, r3
 800290e:	b2cb      	uxtb	r3, r1
 8002910:	3330      	adds	r3, #48	; 0x30
 8002912:	b2db      	uxtb	r3, r3
 8002914:	7003      	strb	r3, [r0, #0]
        x = x/10;
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	4a12      	ldr	r2, [pc, #72]	; (8002964 <intToStr+0x8c>)
 800291a:	fb82 1203 	smull	r1, r2, r2, r3
 800291e:	1092      	asrs	r2, r2, #2
 8002920:	17db      	asrs	r3, r3, #31
 8002922:	1ad3      	subs	r3, r2, r3
 8002924:	60fb      	str	r3, [r7, #12]
 // of digits required in output. If d is more than the number
 // of digits in x, then 0s are added at the beginning.
int intToStr(int x, char str[], int d)
{
    int i = 0;
    while (x)
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	2b00      	cmp	r3, #0
 800292a:	d1de      	bne.n	80028ea <intToStr+0x12>
        x = x/10;
    }

    // If number of digits required is more, then
    // add 0s at the beginning
    while (i < d)
 800292c:	e007      	b.n	800293e <intToStr+0x66>
        str[i++] = '0';
 800292e:	697b      	ldr	r3, [r7, #20]
 8002930:	1c5a      	adds	r2, r3, #1
 8002932:	617a      	str	r2, [r7, #20]
 8002934:	461a      	mov	r2, r3
 8002936:	68bb      	ldr	r3, [r7, #8]
 8002938:	4413      	add	r3, r2
 800293a:	2230      	movs	r2, #48	; 0x30
 800293c:	701a      	strb	r2, [r3, #0]
        x = x/10;
    }

    // If number of digits required is more, then
    // add 0s at the beginning
    while (i < d)
 800293e:	697a      	ldr	r2, [r7, #20]
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	429a      	cmp	r2, r3
 8002944:	dbf3      	blt.n	800292e <intToStr+0x56>
        str[i++] = '0';

    reverse(str, i);
 8002946:	6979      	ldr	r1, [r7, #20]
 8002948:	68b8      	ldr	r0, [r7, #8]
 800294a:	f7ff ff97 	bl	800287c <reverse>
    str[i] = '\0';
 800294e:	697b      	ldr	r3, [r7, #20]
 8002950:	68ba      	ldr	r2, [r7, #8]
 8002952:	4413      	add	r3, r2
 8002954:	2200      	movs	r2, #0
 8002956:	701a      	strb	r2, [r3, #0]
    return i;
 8002958:	697b      	ldr	r3, [r7, #20]
}
 800295a:	4618      	mov	r0, r3
 800295c:	3718      	adds	r7, #24
 800295e:	46bd      	mov	sp, r7
 8002960:	bd80      	pop	{r7, pc}
 8002962:	bf00      	nop
 8002964:	66666667 	.word	0x66666667

08002968 <ftoa>:

// Converts a floating point number to string.
void ftoa(float n, char *res, int afterpoint)
{
 8002968:	b5b0      	push	{r4, r5, r7, lr}
 800296a:	b088      	sub	sp, #32
 800296c:	af00      	add	r7, sp, #0
 800296e:	60f8      	str	r0, [r7, #12]
 8002970:	60b9      	str	r1, [r7, #8]
 8002972:	607a      	str	r2, [r7, #4]
    // Extract integer part
    int ipart = (int)n;
 8002974:	68f8      	ldr	r0, [r7, #12]
 8002976:	f7fe fb89 	bl	800108c <__aeabi_f2iz>
 800297a:	4603      	mov	r3, r0
 800297c:	61fb      	str	r3, [r7, #28]

    // Extract floating part
    float fpart = n - (float)ipart;
 800297e:	69f8      	ldr	r0, [r7, #28]
 8002980:	f7fe f96a 	bl	8000c58 <__aeabi_i2f>
 8002984:	4603      	mov	r3, r0
 8002986:	4619      	mov	r1, r3
 8002988:	68f8      	ldr	r0, [r7, #12]
 800298a:	f7fe f8af 	bl	8000aec <__aeabi_fsub>
 800298e:	4603      	mov	r3, r0
 8002990:	61bb      	str	r3, [r7, #24]

    // convert integer part to string
    int i = intToStr(ipart, res, 0);
 8002992:	2200      	movs	r2, #0
 8002994:	68b9      	ldr	r1, [r7, #8]
 8002996:	69f8      	ldr	r0, [r7, #28]
 8002998:	f7ff ff9e 	bl	80028d8 <intToStr>
 800299c:	6178      	str	r0, [r7, #20]

    // check for display option after point
    if (afterpoint != 0)
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d02c      	beq.n	80029fe <ftoa+0x96>
    {
        res[i] = '.';  // add dot
 80029a4:	697b      	ldr	r3, [r7, #20]
 80029a6:	68ba      	ldr	r2, [r7, #8]
 80029a8:	4413      	add	r3, r2
 80029aa:	222e      	movs	r2, #46	; 0x2e
 80029ac:	701a      	strb	r2, [r3, #0]

        // Get the value of fraction part upto given no.
        // of points after dot. The third parameter is needed
        // to handle cases like 233.007
        fpart = fpart * pow(10, afterpoint);
 80029ae:	69b8      	ldr	r0, [r7, #24]
 80029b0:	f7fd fd44 	bl	800043c <__aeabi_f2d>
 80029b4:	4604      	mov	r4, r0
 80029b6:	460d      	mov	r5, r1
 80029b8:	6878      	ldr	r0, [r7, #4]
 80029ba:	f7fd fd2d 	bl	8000418 <__aeabi_i2d>
 80029be:	4602      	mov	r2, r0
 80029c0:	460b      	mov	r3, r1
 80029c2:	f04f 0000 	mov.w	r0, #0
 80029c6:	4910      	ldr	r1, [pc, #64]	; (8002a08 <ftoa+0xa0>)
 80029c8:	f003 fc0c 	bl	80061e4 <pow>
 80029cc:	4602      	mov	r2, r0
 80029ce:	460b      	mov	r3, r1
 80029d0:	4620      	mov	r0, r4
 80029d2:	4629      	mov	r1, r5
 80029d4:	f7fd fd86 	bl	80004e4 <__aeabi_dmul>
 80029d8:	4603      	mov	r3, r0
 80029da:	460c      	mov	r4, r1
 80029dc:	4618      	mov	r0, r3
 80029de:	4621      	mov	r1, r4
 80029e0:	f7fe f830 	bl	8000a44 <__aeabi_d2f>
 80029e4:	4603      	mov	r3, r0
 80029e6:	61bb      	str	r3, [r7, #24]

        intToStr((int)fpart, res + i + 1, afterpoint);
 80029e8:	69b8      	ldr	r0, [r7, #24]
 80029ea:	f7fe fb4f 	bl	800108c <__aeabi_f2iz>
 80029ee:	697b      	ldr	r3, [r7, #20]
 80029f0:	3301      	adds	r3, #1
 80029f2:	68ba      	ldr	r2, [r7, #8]
 80029f4:	4413      	add	r3, r2
 80029f6:	687a      	ldr	r2, [r7, #4]
 80029f8:	4619      	mov	r1, r3
 80029fa:	f7ff ff6d 	bl	80028d8 <intToStr>
    }
}
 80029fe:	bf00      	nop
 8002a00:	3720      	adds	r7, #32
 8002a02:	46bd      	mov	sp, r7
 8002a04:	bdb0      	pop	{r4, r5, r7, pc}
 8002a06:	bf00      	nop
 8002a08:	40240000 	.word	0x40240000

08002a0c <DS3231_WriteDateTime>:
#include "DS3231.h"
#include "stm32f10x_i2c.h"

void DS3231_WriteDateTime(I2C_TypeDef* I2Cx, struct DS3231_DateTime *DS3231_Date)
{
 8002a0c:	b580      	push	{r7, lr}
 8002a0e:	b082      	sub	sp, #8
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	6078      	str	r0, [r7, #4]
 8002a14:	6039      	str	r1, [r7, #0]
	while(I2C_GetFlagStatus(I2Cx, I2C_FLAG_BUSY));
 8002a16:	bf00      	nop
 8002a18:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 8002a1c:	6878      	ldr	r0, [r7, #4]
 8002a1e:	f002 feb5 	bl	800578c <I2C_GetFlagStatus>
 8002a22:	4603      	mov	r3, r0
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d1f7      	bne.n	8002a18 <DS3231_WriteDateTime+0xc>
	I2C_AcknowledgeConfig(I2Cx, ENABLE);
 8002a28:	2101      	movs	r1, #1
 8002a2a:	6878      	ldr	r0, [r7, #4]
 8002a2c:	f002 fe02 	bl	8005634 <I2C_AcknowledgeConfig>

	I2C_GenerateSTART(I2Cx, ENABLE);
 8002a30:	2101      	movs	r1, #1
 8002a32:	6878      	ldr	r0, [r7, #4]
 8002a34:	f002 fdbe 	bl	80055b4 <I2C_GenerateSTART>
	while(!I2C_GetFlagStatus(I2Cx, I2C_FLAG_SB));// wait generate start
 8002a38:	bf00      	nop
 8002a3a:	4949      	ldr	r1, [pc, #292]	; (8002b60 <DS3231_WriteDateTime+0x154>)
 8002a3c:	6878      	ldr	r0, [r7, #4]
 8002a3e:	f002 fea5 	bl	800578c <I2C_GetFlagStatus>
 8002a42:	4603      	mov	r3, r0
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d0f8      	beq.n	8002a3a <DS3231_WriteDateTime+0x2e>

	I2C_Send7bitAddress(I2Cx, 0xD0, I2C_Direction_Transmitter);// send Address DS3231(0xD0)
 8002a48:	2200      	movs	r2, #0
 8002a4a:	21d0      	movs	r1, #208	; 0xd0
 8002a4c:	6878      	ldr	r0, [r7, #4]
 8002a4e:	f002 fe2f 	bl	80056b0 <I2C_Send7bitAddress>
	while(!I2C_CheckEvent(I2Cx, I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED));// wait send address
 8002a52:	bf00      	nop
 8002a54:	4943      	ldr	r1, [pc, #268]	; (8002b64 <DS3231_WriteDateTime+0x158>)
 8002a56:	6878      	ldr	r0, [r7, #4]
 8002a58:	f002 fe68 	bl	800572c <I2C_CheckEvent>
 8002a5c:	4603      	mov	r3, r0
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d0f8      	beq.n	8002a54 <DS3231_WriteDateTime+0x48>

	I2C_SendData(I2Cx, 0x00);// send WORD ADDRESS 0
 8002a62:	2100      	movs	r1, #0
 8002a64:	6878      	ldr	r0, [r7, #4]
 8002a66:	f002 fe05 	bl	8005674 <I2C_SendData>
	while(!I2C_CheckEvent(I2Cx, I2C_EVENT_MASTER_BYTE_TRANSMITTED));// wait send World address 0
 8002a6a:	bf00      	nop
 8002a6c:	493e      	ldr	r1, [pc, #248]	; (8002b68 <DS3231_WriteDateTime+0x15c>)
 8002a6e:	6878      	ldr	r0, [r7, #4]
 8002a70:	f002 fe5c 	bl	800572c <I2C_CheckEvent>
 8002a74:	4603      	mov	r3, r0
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d0f8      	beq.n	8002a6c <DS3231_WriteDateTime+0x60>

	I2C_SendData(I2Cx, DS3231_Date->Seconds);// send second
 8002a7a:	683b      	ldr	r3, [r7, #0]
 8002a7c:	781b      	ldrb	r3, [r3, #0]
 8002a7e:	4619      	mov	r1, r3
 8002a80:	6878      	ldr	r0, [r7, #4]
 8002a82:	f002 fdf7 	bl	8005674 <I2C_SendData>
	while(!I2C_CheckEvent(I2Cx, I2C_EVENT_MASTER_BYTE_TRANSMITTED));// wait send address
 8002a86:	bf00      	nop
 8002a88:	4937      	ldr	r1, [pc, #220]	; (8002b68 <DS3231_WriteDateTime+0x15c>)
 8002a8a:	6878      	ldr	r0, [r7, #4]
 8002a8c:	f002 fe4e 	bl	800572c <I2C_CheckEvent>
 8002a90:	4603      	mov	r3, r0
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d0f8      	beq.n	8002a88 <DS3231_WriteDateTime+0x7c>

	I2C_SendData(I2Cx, DS3231_Date->Minutes);// send Minute
 8002a96:	683b      	ldr	r3, [r7, #0]
 8002a98:	785b      	ldrb	r3, [r3, #1]
 8002a9a:	4619      	mov	r1, r3
 8002a9c:	6878      	ldr	r0, [r7, #4]
 8002a9e:	f002 fde9 	bl	8005674 <I2C_SendData>
	while(!I2C_CheckEvent(I2Cx, I2C_EVENT_MASTER_BYTE_TRANSMITTED));// wait send address
 8002aa2:	bf00      	nop
 8002aa4:	4930      	ldr	r1, [pc, #192]	; (8002b68 <DS3231_WriteDateTime+0x15c>)
 8002aa6:	6878      	ldr	r0, [r7, #4]
 8002aa8:	f002 fe40 	bl	800572c <I2C_CheckEvent>
 8002aac:	4603      	mov	r3, r0
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d0f8      	beq.n	8002aa4 <DS3231_WriteDateTime+0x98>

	I2C_SendData(I2Cx, DS3231_Date->Hour);// send Hour
 8002ab2:	683b      	ldr	r3, [r7, #0]
 8002ab4:	789b      	ldrb	r3, [r3, #2]
 8002ab6:	4619      	mov	r1, r3
 8002ab8:	6878      	ldr	r0, [r7, #4]
 8002aba:	f002 fddb 	bl	8005674 <I2C_SendData>
	while(!I2C_CheckEvent(I2Cx, I2C_EVENT_MASTER_BYTE_TRANSMITTED));// wait send address
 8002abe:	bf00      	nop
 8002ac0:	4929      	ldr	r1, [pc, #164]	; (8002b68 <DS3231_WriteDateTime+0x15c>)
 8002ac2:	6878      	ldr	r0, [r7, #4]
 8002ac4:	f002 fe32 	bl	800572c <I2C_CheckEvent>
 8002ac8:	4603      	mov	r3, r0
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d0f8      	beq.n	8002ac0 <DS3231_WriteDateTime+0xb4>

	I2C_SendData(I2Cx, DS3231_Date->Day);// send Day (1-7)
 8002ace:	683b      	ldr	r3, [r7, #0]
 8002ad0:	78db      	ldrb	r3, [r3, #3]
 8002ad2:	4619      	mov	r1, r3
 8002ad4:	6878      	ldr	r0, [r7, #4]
 8002ad6:	f002 fdcd 	bl	8005674 <I2C_SendData>
	while(!I2C_CheckEvent(I2Cx, I2C_EVENT_MASTER_BYTE_TRANSMITTED));// wait send address
 8002ada:	bf00      	nop
 8002adc:	4922      	ldr	r1, [pc, #136]	; (8002b68 <DS3231_WriteDateTime+0x15c>)
 8002ade:	6878      	ldr	r0, [r7, #4]
 8002ae0:	f002 fe24 	bl	800572c <I2C_CheckEvent>
 8002ae4:	4603      	mov	r3, r0
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d0f8      	beq.n	8002adc <DS3231_WriteDateTime+0xd0>

	I2C_SendData(I2Cx, DS3231_Date->Date);// send Date 1-31
 8002aea:	683b      	ldr	r3, [r7, #0]
 8002aec:	791b      	ldrb	r3, [r3, #4]
 8002aee:	4619      	mov	r1, r3
 8002af0:	6878      	ldr	r0, [r7, #4]
 8002af2:	f002 fdbf 	bl	8005674 <I2C_SendData>
	while(!I2C_CheckEvent(I2Cx, I2C_EVENT_MASTER_BYTE_TRANSMITTED));// wait send address
 8002af6:	bf00      	nop
 8002af8:	491b      	ldr	r1, [pc, #108]	; (8002b68 <DS3231_WriteDateTime+0x15c>)
 8002afa:	6878      	ldr	r0, [r7, #4]
 8002afc:	f002 fe16 	bl	800572c <I2C_CheckEvent>
 8002b00:	4603      	mov	r3, r0
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d0f8      	beq.n	8002af8 <DS3231_WriteDateTime+0xec>

	I2C_SendData(I2Cx, DS3231_Date->Month);// send Month
 8002b06:	683b      	ldr	r3, [r7, #0]
 8002b08:	795b      	ldrb	r3, [r3, #5]
 8002b0a:	4619      	mov	r1, r3
 8002b0c:	6878      	ldr	r0, [r7, #4]
 8002b0e:	f002 fdb1 	bl	8005674 <I2C_SendData>
	while(!I2C_CheckEvent(I2Cx, I2C_EVENT_MASTER_BYTE_TRANSMITTED));// wait send address
 8002b12:	bf00      	nop
 8002b14:	4914      	ldr	r1, [pc, #80]	; (8002b68 <DS3231_WriteDateTime+0x15c>)
 8002b16:	6878      	ldr	r0, [r7, #4]
 8002b18:	f002 fe08 	bl	800572c <I2C_CheckEvent>
 8002b1c:	4603      	mov	r3, r0
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d0f8      	beq.n	8002b14 <DS3231_WriteDateTime+0x108>

	I2C_SendData(I2Cx, DS3231_Date->Year);// send year
 8002b22:	683b      	ldr	r3, [r7, #0]
 8002b24:	799b      	ldrb	r3, [r3, #6]
 8002b26:	4619      	mov	r1, r3
 8002b28:	6878      	ldr	r0, [r7, #4]
 8002b2a:	f002 fda3 	bl	8005674 <I2C_SendData>
	while(!I2C_CheckEvent(I2Cx, I2C_EVENT_MASTER_BYTE_TRANSMITTED));// wait send address
 8002b2e:	bf00      	nop
 8002b30:	490d      	ldr	r1, [pc, #52]	; (8002b68 <DS3231_WriteDateTime+0x15c>)
 8002b32:	6878      	ldr	r0, [r7, #4]
 8002b34:	f002 fdfa 	bl	800572c <I2C_CheckEvent>
 8002b38:	4603      	mov	r3, r0
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d0f8      	beq.n	8002b30 <DS3231_WriteDateTime+0x124>

	I2C_GenerateSTOP(I2Cx, ENABLE);
 8002b3e:	2101      	movs	r1, #1
 8002b40:	6878      	ldr	r0, [r7, #4]
 8002b42:	f002 fd57 	bl	80055f4 <I2C_GenerateSTOP>
	while(I2C_GetFlagStatus(I2Cx, I2C_FLAG_STOPF));// wait generate stop
 8002b46:	bf00      	nop
 8002b48:	4908      	ldr	r1, [pc, #32]	; (8002b6c <DS3231_WriteDateTime+0x160>)
 8002b4a:	6878      	ldr	r0, [r7, #4]
 8002b4c:	f002 fe1e 	bl	800578c <I2C_GetFlagStatus>
 8002b50:	4603      	mov	r3, r0
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d1f8      	bne.n	8002b48 <DS3231_WriteDateTime+0x13c>
};
 8002b56:	bf00      	nop
 8002b58:	3708      	adds	r7, #8
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	bd80      	pop	{r7, pc}
 8002b5e:	bf00      	nop
 8002b60:	10000001 	.word	0x10000001
 8002b64:	00070082 	.word	0x00070082
 8002b68:	00070084 	.word	0x00070084
 8002b6c:	10000010 	.word	0x10000010

08002b70 <DS3231_ReadDateTime>:
void DS3231_ReadDateTime(I2C_TypeDef* I2Cx, struct DS3231_DateTime *DS3231_Date)
{
 8002b70:	b580      	push	{r7, lr}
 8002b72:	b082      	sub	sp, #8
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	6078      	str	r0, [r7, #4]
 8002b78:	6039      	str	r1, [r7, #0]
	while(I2C_GetFlagStatus(I2Cx, I2C_FLAG_BUSY));
 8002b7a:	bf00      	nop
 8002b7c:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 8002b80:	6878      	ldr	r0, [r7, #4]
 8002b82:	f002 fe03 	bl	800578c <I2C_GetFlagStatus>
 8002b86:	4603      	mov	r3, r0
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d1f7      	bne.n	8002b7c <DS3231_ReadDateTime+0xc>
	I2C_AcknowledgeConfig(I2Cx, ENABLE);// enable acknowledge
 8002b8c:	2101      	movs	r1, #1
 8002b8e:	6878      	ldr	r0, [r7, #4]
 8002b90:	f002 fd50 	bl	8005634 <I2C_AcknowledgeConfig>


	I2C_GenerateSTART(I2Cx, ENABLE);
 8002b94:	2101      	movs	r1, #1
 8002b96:	6878      	ldr	r0, [r7, #4]
 8002b98:	f002 fd0c 	bl	80055b4 <I2C_GenerateSTART>
	while(!I2C_GetFlagStatus(I2Cx, I2C_FLAG_SB));// wait generate start
 8002b9c:	bf00      	nop
 8002b9e:	496b      	ldr	r1, [pc, #428]	; (8002d4c <DS3231_ReadDateTime+0x1dc>)
 8002ba0:	6878      	ldr	r0, [r7, #4]
 8002ba2:	f002 fdf3 	bl	800578c <I2C_GetFlagStatus>
 8002ba6:	4603      	mov	r3, r0
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d0f8      	beq.n	8002b9e <DS3231_ReadDateTime+0x2e>

	I2C_Send7bitAddress(I2Cx, 0xD0, I2C_Direction_Transmitter);// send Address DS3231(0xD0)
 8002bac:	2200      	movs	r2, #0
 8002bae:	21d0      	movs	r1, #208	; 0xd0
 8002bb0:	6878      	ldr	r0, [r7, #4]
 8002bb2:	f002 fd7d 	bl	80056b0 <I2C_Send7bitAddress>
	while(!I2C_CheckEvent(I2Cx, I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED));// wait send address
 8002bb6:	bf00      	nop
 8002bb8:	4965      	ldr	r1, [pc, #404]	; (8002d50 <DS3231_ReadDateTime+0x1e0>)
 8002bba:	6878      	ldr	r0, [r7, #4]
 8002bbc:	f002 fdb6 	bl	800572c <I2C_CheckEvent>
 8002bc0:	4603      	mov	r3, r0
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d0f8      	beq.n	8002bb8 <DS3231_ReadDateTime+0x48>

	I2C_SendData(I2Cx, 0x00);// send WORD ADDRESS 0
 8002bc6:	2100      	movs	r1, #0
 8002bc8:	6878      	ldr	r0, [r7, #4]
 8002bca:	f002 fd53 	bl	8005674 <I2C_SendData>
	while(!I2C_CheckEvent(I2Cx, I2C_EVENT_MASTER_BYTE_TRANSMITTED));// wait send Word address 0
 8002bce:	bf00      	nop
 8002bd0:	4960      	ldr	r1, [pc, #384]	; (8002d54 <DS3231_ReadDateTime+0x1e4>)
 8002bd2:	6878      	ldr	r0, [r7, #4]
 8002bd4:	f002 fdaa 	bl	800572c <I2C_CheckEvent>
 8002bd8:	4603      	mov	r3, r0
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d0f8      	beq.n	8002bd0 <DS3231_ReadDateTime+0x60>

	I2C_GenerateSTOP(I2Cx, ENABLE);
 8002bde:	2101      	movs	r1, #1
 8002be0:	6878      	ldr	r0, [r7, #4]
 8002be2:	f002 fd07 	bl	80055f4 <I2C_GenerateSTOP>
	while(I2C_GetFlagStatus(I2Cx, I2C_FLAG_STOPF));// wait generate stop
 8002be6:	bf00      	nop
 8002be8:	495b      	ldr	r1, [pc, #364]	; (8002d58 <DS3231_ReadDateTime+0x1e8>)
 8002bea:	6878      	ldr	r0, [r7, #4]
 8002bec:	f002 fdce 	bl	800578c <I2C_GetFlagStatus>
 8002bf0:	4603      	mov	r3, r0
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d1f8      	bne.n	8002be8 <DS3231_ReadDateTime+0x78>


	I2C_GenerateSTART(I2Cx, ENABLE);
 8002bf6:	2101      	movs	r1, #1
 8002bf8:	6878      	ldr	r0, [r7, #4]
 8002bfa:	f002 fcdb 	bl	80055b4 <I2C_GenerateSTART>
	while(!I2C_GetFlagStatus(I2Cx, I2C_FLAG_SB));// wait Generate Start condition
 8002bfe:	bf00      	nop
 8002c00:	4952      	ldr	r1, [pc, #328]	; (8002d4c <DS3231_ReadDateTime+0x1dc>)
 8002c02:	6878      	ldr	r0, [r7, #4]
 8002c04:	f002 fdc2 	bl	800578c <I2C_GetFlagStatus>
 8002c08:	4603      	mov	r3, r0
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d0f8      	beq.n	8002c00 <DS3231_ReadDateTime+0x90>

	I2C_Send7bitAddress(I2Cx, 0xD0, I2C_Direction_Receiver);
 8002c0e:	2201      	movs	r2, #1
 8002c10:	21d0      	movs	r1, #208	; 0xd0
 8002c12:	6878      	ldr	r0, [r7, #4]
 8002c14:	f002 fd4c 	bl	80056b0 <I2C_Send7bitAddress>
	while(!I2C_CheckEvent(I2Cx, I2C_EVENT_MASTER_RECEIVER_MODE_SELECTED));// wait send address ds3231
 8002c18:	bf00      	nop
 8002c1a:	4950      	ldr	r1, [pc, #320]	; (8002d5c <DS3231_ReadDateTime+0x1ec>)
 8002c1c:	6878      	ldr	r0, [r7, #4]
 8002c1e:	f002 fd85 	bl	800572c <I2C_CheckEvent>
 8002c22:	4603      	mov	r3, r0
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d0f8      	beq.n	8002c1a <DS3231_ReadDateTime+0xaa>

	while(!I2C_CheckEvent(I2Cx, I2C_EVENT_MASTER_BYTE_RECEIVED));// wait receive second
 8002c28:	bf00      	nop
 8002c2a:	494d      	ldr	r1, [pc, #308]	; (8002d60 <DS3231_ReadDateTime+0x1f0>)
 8002c2c:	6878      	ldr	r0, [r7, #4]
 8002c2e:	f002 fd7d 	bl	800572c <I2C_CheckEvent>
 8002c32:	4603      	mov	r3, r0
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d0f8      	beq.n	8002c2a <DS3231_ReadDateTime+0xba>
	DS3231_Date->Seconds = 60 & I2C_ReceiveData(I2Cx);
 8002c38:	6878      	ldr	r0, [r7, #4]
 8002c3a:	f002 fd2b 	bl	8005694 <I2C_ReceiveData>
 8002c3e:	4603      	mov	r3, r0
 8002c40:	f003 033c 	and.w	r3, r3, #60	; 0x3c
 8002c44:	b2da      	uxtb	r2, r3
 8002c46:	683b      	ldr	r3, [r7, #0]
 8002c48:	701a      	strb	r2, [r3, #0]

	while(!I2C_CheckEvent(I2Cx, I2C_EVENT_MASTER_BYTE_RECEIVED));// wait receive Minute
 8002c4a:	bf00      	nop
 8002c4c:	4944      	ldr	r1, [pc, #272]	; (8002d60 <DS3231_ReadDateTime+0x1f0>)
 8002c4e:	6878      	ldr	r0, [r7, #4]
 8002c50:	f002 fd6c 	bl	800572c <I2C_CheckEvent>
 8002c54:	4603      	mov	r3, r0
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d0f8      	beq.n	8002c4c <DS3231_ReadDateTime+0xdc>
	DS3231_Date->Minutes = 0x7F & I2C_ReceiveData(I2Cx);
 8002c5a:	6878      	ldr	r0, [r7, #4]
 8002c5c:	f002 fd1a 	bl	8005694 <I2C_ReceiveData>
 8002c60:	4603      	mov	r3, r0
 8002c62:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002c66:	b2da      	uxtb	r2, r3
 8002c68:	683b      	ldr	r3, [r7, #0]
 8002c6a:	705a      	strb	r2, [r3, #1]

	while(!I2C_CheckEvent(I2Cx, I2C_EVENT_MASTER_BYTE_RECEIVED));// wait receive Hour
 8002c6c:	bf00      	nop
 8002c6e:	493c      	ldr	r1, [pc, #240]	; (8002d60 <DS3231_ReadDateTime+0x1f0>)
 8002c70:	6878      	ldr	r0, [r7, #4]
 8002c72:	f002 fd5b 	bl	800572c <I2C_CheckEvent>
 8002c76:	4603      	mov	r3, r0
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d0f8      	beq.n	8002c6e <DS3231_ReadDateTime+0xfe>
	DS3231_Date->Hour = 0x1F & I2C_ReceiveData(I2Cx);
 8002c7c:	6878      	ldr	r0, [r7, #4]
 8002c7e:	f002 fd09 	bl	8005694 <I2C_ReceiveData>
 8002c82:	4603      	mov	r3, r0
 8002c84:	f003 031f 	and.w	r3, r3, #31
 8002c88:	b2da      	uxtb	r2, r3
 8002c8a:	683b      	ldr	r3, [r7, #0]
 8002c8c:	709a      	strb	r2, [r3, #2]

	while(!I2C_CheckEvent(I2Cx, I2C_EVENT_MASTER_BYTE_RECEIVED));// wait receive Day(1-7)
 8002c8e:	bf00      	nop
 8002c90:	4933      	ldr	r1, [pc, #204]	; (8002d60 <DS3231_ReadDateTime+0x1f0>)
 8002c92:	6878      	ldr	r0, [r7, #4]
 8002c94:	f002 fd4a 	bl	800572c <I2C_CheckEvent>
 8002c98:	4603      	mov	r3, r0
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d0f8      	beq.n	8002c90 <DS3231_ReadDateTime+0x120>
	DS3231_Date->Day = 0x07 & I2C_ReceiveData(I2Cx);
 8002c9e:	6878      	ldr	r0, [r7, #4]
 8002ca0:	f002 fcf8 	bl	8005694 <I2C_ReceiveData>
 8002ca4:	4603      	mov	r3, r0
 8002ca6:	f003 0307 	and.w	r3, r3, #7
 8002caa:	b2da      	uxtb	r2, r3
 8002cac:	683b      	ldr	r3, [r7, #0]
 8002cae:	70da      	strb	r2, [r3, #3]

	while(!I2C_CheckEvent(I2Cx, I2C_EVENT_MASTER_BYTE_RECEIVED));// wait receive Date(1-31)
 8002cb0:	bf00      	nop
 8002cb2:	492b      	ldr	r1, [pc, #172]	; (8002d60 <DS3231_ReadDateTime+0x1f0>)
 8002cb4:	6878      	ldr	r0, [r7, #4]
 8002cb6:	f002 fd39 	bl	800572c <I2C_CheckEvent>
 8002cba:	4603      	mov	r3, r0
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d0f8      	beq.n	8002cb2 <DS3231_ReadDateTime+0x142>
	DS3231_Date->Date = 0x3F & I2C_ReceiveData(I2Cx);
 8002cc0:	6878      	ldr	r0, [r7, #4]
 8002cc2:	f002 fce7 	bl	8005694 <I2C_ReceiveData>
 8002cc6:	4603      	mov	r3, r0
 8002cc8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002ccc:	b2da      	uxtb	r2, r3
 8002cce:	683b      	ldr	r3, [r7, #0]
 8002cd0:	711a      	strb	r2, [r3, #4]

	while(!I2C_CheckEvent(I2Cx, I2C_EVENT_MASTER_BYTE_RECEIVED));// wait receive Month
 8002cd2:	bf00      	nop
 8002cd4:	4922      	ldr	r1, [pc, #136]	; (8002d60 <DS3231_ReadDateTime+0x1f0>)
 8002cd6:	6878      	ldr	r0, [r7, #4]
 8002cd8:	f002 fd28 	bl	800572c <I2C_CheckEvent>
 8002cdc:	4603      	mov	r3, r0
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d0f8      	beq.n	8002cd4 <DS3231_ReadDateTime+0x164>
	DS3231_Date->Month = 0x1F & I2C_ReceiveData(I2Cx);
 8002ce2:	6878      	ldr	r0, [r7, #4]
 8002ce4:	f002 fcd6 	bl	8005694 <I2C_ReceiveData>
 8002ce8:	4603      	mov	r3, r0
 8002cea:	f003 031f 	and.w	r3, r3, #31
 8002cee:	b2da      	uxtb	r2, r3
 8002cf0:	683b      	ldr	r3, [r7, #0]
 8002cf2:	715a      	strb	r2, [r3, #5]

	while(!I2C_CheckEvent(I2Cx, I2C_EVENT_MASTER_BYTE_RECEIVED));// wait receive Year
 8002cf4:	bf00      	nop
 8002cf6:	491a      	ldr	r1, [pc, #104]	; (8002d60 <DS3231_ReadDateTime+0x1f0>)
 8002cf8:	6878      	ldr	r0, [r7, #4]
 8002cfa:	f002 fd17 	bl	800572c <I2C_CheckEvent>
 8002cfe:	4603      	mov	r3, r0
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d0f8      	beq.n	8002cf6 <DS3231_ReadDateTime+0x186>
	DS3231_Date->Year = 0xFF & I2C_ReceiveData(I2Cx);
 8002d04:	6878      	ldr	r0, [r7, #4]
 8002d06:	f002 fcc5 	bl	8005694 <I2C_ReceiveData>
 8002d0a:	4603      	mov	r3, r0
 8002d0c:	461a      	mov	r2, r3
 8002d0e:	683b      	ldr	r3, [r7, #0]
 8002d10:	719a      	strb	r2, [r3, #6]

	I2C_NACKPositionConfig(I2Cx, I2C_NACKPosition_Current);// create Not acknowledge
 8002d12:	f24f 71ff 	movw	r1, #63487	; 0xf7ff
 8002d16:	6878      	ldr	r0, [r7, #4]
 8002d18:	f002 fce8 	bl	80056ec <I2C_NACKPositionConfig>
	I2C_AcknowledgeConfig(I2Cx, DISABLE);// disable acknowledge
 8002d1c:	2100      	movs	r1, #0
 8002d1e:	6878      	ldr	r0, [r7, #4]
 8002d20:	f002 fc88 	bl	8005634 <I2C_AcknowledgeConfig>

	I2C_GenerateSTOP(I2Cx, ENABLE);
 8002d24:	2101      	movs	r1, #1
 8002d26:	6878      	ldr	r0, [r7, #4]
 8002d28:	f002 fc64 	bl	80055f4 <I2C_GenerateSTOP>
	while(I2C_GetFlagStatus(I2Cx, I2C_FLAG_STOPF));// wait generate stop condition
 8002d2c:	bf00      	nop
 8002d2e:	490a      	ldr	r1, [pc, #40]	; (8002d58 <DS3231_ReadDateTime+0x1e8>)
 8002d30:	6878      	ldr	r0, [r7, #4]
 8002d32:	f002 fd2b 	bl	800578c <I2C_GetFlagStatus>
 8002d36:	4603      	mov	r3, r0
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d1f8      	bne.n	8002d2e <DS3231_ReadDateTime+0x1be>

	I2C_AcknowledgeConfig(I2Cx, ENABLE);// Enable acknowledge
 8002d3c:	2101      	movs	r1, #1
 8002d3e:	6878      	ldr	r0, [r7, #4]
 8002d40:	f002 fc78 	bl	8005634 <I2C_AcknowledgeConfig>
};
 8002d44:	bf00      	nop
 8002d46:	3708      	adds	r7, #8
 8002d48:	46bd      	mov	sp, r7
 8002d4a:	bd80      	pop	{r7, pc}
 8002d4c:	10000001 	.word	0x10000001
 8002d50:	00070082 	.word	0x00070082
 8002d54:	00070084 	.word	0x00070084
 8002d58:	10000010 	.word	0x10000010
 8002d5c:	00030002 	.word	0x00030002
 8002d60:	00030040 	.word	0x00030040

08002d64 <DS3231_SetAlarm1>:

void DS3231_SetAlarm1(I2C_TypeDef* I2Cx, struct DS3231_Alarm1 *DS3231_WriteAlarm1)
{
 8002d64:	b580      	push	{r7, lr}
 8002d66:	b082      	sub	sp, #8
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	6078      	str	r0, [r7, #4]
 8002d6c:	6039      	str	r1, [r7, #0]
		while(I2C_GetFlagStatus(I2Cx, I2C_FLAG_BUSY));
 8002d6e:	bf00      	nop
 8002d70:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 8002d74:	6878      	ldr	r0, [r7, #4]
 8002d76:	f002 fd09 	bl	800578c <I2C_GetFlagStatus>
 8002d7a:	4603      	mov	r3, r0
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d1f7      	bne.n	8002d70 <DS3231_SetAlarm1+0xc>
		I2C_AcknowledgeConfig(I2Cx, ENABLE);// enable acknowledge
 8002d80:	2101      	movs	r1, #1
 8002d82:	6878      	ldr	r0, [r7, #4]
 8002d84:	f002 fc56 	bl	8005634 <I2C_AcknowledgeConfig>

		I2C_GenerateSTART(I2Cx, ENABLE);
 8002d88:	2101      	movs	r1, #1
 8002d8a:	6878      	ldr	r0, [r7, #4]
 8002d8c:	f002 fc12 	bl	80055b4 <I2C_GenerateSTART>
		while(!I2C_GetFlagStatus(I2Cx, I2C_FLAG_SB));// wait Generate Start condition
 8002d90:	bf00      	nop
 8002d92:	495e      	ldr	r1, [pc, #376]	; (8002f0c <DS3231_SetAlarm1+0x1a8>)
 8002d94:	6878      	ldr	r0, [r7, #4]
 8002d96:	f002 fcf9 	bl	800578c <I2C_GetFlagStatus>
 8002d9a:	4603      	mov	r3, r0
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d0f8      	beq.n	8002d92 <DS3231_SetAlarm1+0x2e>

		I2C_Send7bitAddress(I2Cx, 0xD0, I2C_Direction_Transmitter);
 8002da0:	2200      	movs	r2, #0
 8002da2:	21d0      	movs	r1, #208	; 0xd0
 8002da4:	6878      	ldr	r0, [r7, #4]
 8002da6:	f002 fc83 	bl	80056b0 <I2C_Send7bitAddress>
		while(!I2C_CheckEvent(I2Cx, I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED));// wait send address
 8002daa:	bf00      	nop
 8002dac:	4958      	ldr	r1, [pc, #352]	; (8002f10 <DS3231_SetAlarm1+0x1ac>)
 8002dae:	6878      	ldr	r0, [r7, #4]
 8002db0:	f002 fcbc 	bl	800572c <I2C_CheckEvent>
 8002db4:	4603      	mov	r3, r0
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d0f8      	beq.n	8002dac <DS3231_SetAlarm1+0x48>

		I2C_SendData(I2Cx, 7);// go to address word 7
 8002dba:	2107      	movs	r1, #7
 8002dbc:	6878      	ldr	r0, [r7, #4]
 8002dbe:	f002 fc59 	bl	8005674 <I2C_SendData>
		while(!I2C_CheckEvent(I2Cx, I2C_EVENT_MASTER_BYTE_TRANSMITTED));// wait send word address 7
 8002dc2:	bf00      	nop
 8002dc4:	4953      	ldr	r1, [pc, #332]	; (8002f14 <DS3231_SetAlarm1+0x1b0>)
 8002dc6:	6878      	ldr	r0, [r7, #4]
 8002dc8:	f002 fcb0 	bl	800572c <I2C_CheckEvent>
 8002dcc:	4603      	mov	r3, r0
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d0f8      	beq.n	8002dc4 <DS3231_SetAlarm1+0x60>

		I2C_SendData(I2Cx, DS3231_WriteAlarm1->Seconds);// send second
 8002dd2:	683b      	ldr	r3, [r7, #0]
 8002dd4:	781b      	ldrb	r3, [r3, #0]
 8002dd6:	4619      	mov	r1, r3
 8002dd8:	6878      	ldr	r0, [r7, #4]
 8002dda:	f002 fc4b 	bl	8005674 <I2C_SendData>
		while(!I2C_CheckEvent(I2Cx, I2C_EVENT_MASTER_BYTE_TRANSMITTED));// wait send address
 8002dde:	bf00      	nop
 8002de0:	494c      	ldr	r1, [pc, #304]	; (8002f14 <DS3231_SetAlarm1+0x1b0>)
 8002de2:	6878      	ldr	r0, [r7, #4]
 8002de4:	f002 fca2 	bl	800572c <I2C_CheckEvent>
 8002de8:	4603      	mov	r3, r0
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d0f8      	beq.n	8002de0 <DS3231_SetAlarm1+0x7c>

		I2C_SendData(I2Cx, DS3231_WriteAlarm1->Minutes);// send Minute
 8002dee:	683b      	ldr	r3, [r7, #0]
 8002df0:	785b      	ldrb	r3, [r3, #1]
 8002df2:	4619      	mov	r1, r3
 8002df4:	6878      	ldr	r0, [r7, #4]
 8002df6:	f002 fc3d 	bl	8005674 <I2C_SendData>
		while(!I2C_CheckEvent(I2Cx, I2C_EVENT_MASTER_BYTE_TRANSMITTED));// wait send address
 8002dfa:	bf00      	nop
 8002dfc:	4945      	ldr	r1, [pc, #276]	; (8002f14 <DS3231_SetAlarm1+0x1b0>)
 8002dfe:	6878      	ldr	r0, [r7, #4]
 8002e00:	f002 fc94 	bl	800572c <I2C_CheckEvent>
 8002e04:	4603      	mov	r3, r0
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d0f8      	beq.n	8002dfc <DS3231_SetAlarm1+0x98>

		I2C_SendData(I2Cx, DS3231_WriteAlarm1->Hour);// send Hour
 8002e0a:	683b      	ldr	r3, [r7, #0]
 8002e0c:	789b      	ldrb	r3, [r3, #2]
 8002e0e:	4619      	mov	r1, r3
 8002e10:	6878      	ldr	r0, [r7, #4]
 8002e12:	f002 fc2f 	bl	8005674 <I2C_SendData>
		while(!I2C_CheckEvent(I2Cx, I2C_EVENT_MASTER_BYTE_TRANSMITTED));// wait send address
 8002e16:	bf00      	nop
 8002e18:	493e      	ldr	r1, [pc, #248]	; (8002f14 <DS3231_SetAlarm1+0x1b0>)
 8002e1a:	6878      	ldr	r0, [r7, #4]
 8002e1c:	f002 fc86 	bl	800572c <I2C_CheckEvent>
 8002e20:	4603      	mov	r3, r0
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d0f8      	beq.n	8002e18 <DS3231_SetAlarm1+0xb4>

		I2C_SendData(I2Cx, DS3231_WriteAlarm1->Day);// send Day (1-7)
 8002e26:	683b      	ldr	r3, [r7, #0]
 8002e28:	78db      	ldrb	r3, [r3, #3]
 8002e2a:	4619      	mov	r1, r3
 8002e2c:	6878      	ldr	r0, [r7, #4]
 8002e2e:	f002 fc21 	bl	8005674 <I2C_SendData>
		while(!I2C_CheckEvent(I2Cx, I2C_EVENT_MASTER_BYTE_TRANSMITTED));// wait send address
 8002e32:	bf00      	nop
 8002e34:	4937      	ldr	r1, [pc, #220]	; (8002f14 <DS3231_SetAlarm1+0x1b0>)
 8002e36:	6878      	ldr	r0, [r7, #4]
 8002e38:	f002 fc78 	bl	800572c <I2C_CheckEvent>
 8002e3c:	4603      	mov	r3, r0
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d0f8      	beq.n	8002e34 <DS3231_SetAlarm1+0xd0>

		I2C_SendData(I2Cx, DS3231_WriteAlarm1->Date);// send Date 1-31
 8002e42:	683b      	ldr	r3, [r7, #0]
 8002e44:	791b      	ldrb	r3, [r3, #4]
 8002e46:	4619      	mov	r1, r3
 8002e48:	6878      	ldr	r0, [r7, #4]
 8002e4a:	f002 fc13 	bl	8005674 <I2C_SendData>
		while(!I2C_CheckEvent(I2Cx, I2C_EVENT_MASTER_BYTE_TRANSMITTED));// wait send address
 8002e4e:	bf00      	nop
 8002e50:	4930      	ldr	r1, [pc, #192]	; (8002f14 <DS3231_SetAlarm1+0x1b0>)
 8002e52:	6878      	ldr	r0, [r7, #4]
 8002e54:	f002 fc6a 	bl	800572c <I2C_CheckEvent>
 8002e58:	4603      	mov	r3, r0
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d0f8      	beq.n	8002e50 <DS3231_SetAlarm1+0xec>

		I2C_GenerateSTOP(I2Cx, ENABLE);
 8002e5e:	2101      	movs	r1, #1
 8002e60:	6878      	ldr	r0, [r7, #4]
 8002e62:	f002 fbc7 	bl	80055f4 <I2C_GenerateSTOP>
		while(I2C_GetFlagStatus(I2Cx, I2C_FLAG_STOPF));// wait generate stop
 8002e66:	bf00      	nop
 8002e68:	492b      	ldr	r1, [pc, #172]	; (8002f18 <DS3231_SetAlarm1+0x1b4>)
 8002e6a:	6878      	ldr	r0, [r7, #4]
 8002e6c:	f002 fc8e 	bl	800578c <I2C_GetFlagStatus>
 8002e70:	4603      	mov	r3, r0
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d1f8      	bne.n	8002e68 <DS3231_SetAlarm1+0x104>

		// Enable Interrupt for ALARM 1
		while(I2C_GetFlagStatus(I2Cx, I2C_FLAG_BUSY));
 8002e76:	bf00      	nop
 8002e78:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 8002e7c:	6878      	ldr	r0, [r7, #4]
 8002e7e:	f002 fc85 	bl	800578c <I2C_GetFlagStatus>
 8002e82:	4603      	mov	r3, r0
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d1f7      	bne.n	8002e78 <DS3231_SetAlarm1+0x114>

		I2C_GenerateSTART(I2Cx, ENABLE);
 8002e88:	2101      	movs	r1, #1
 8002e8a:	6878      	ldr	r0, [r7, #4]
 8002e8c:	f002 fb92 	bl	80055b4 <I2C_GenerateSTART>
		while(!I2C_GetFlagStatus(I2Cx, I2C_FLAG_SB));// wait Generate Start condition
 8002e90:	bf00      	nop
 8002e92:	491e      	ldr	r1, [pc, #120]	; (8002f0c <DS3231_SetAlarm1+0x1a8>)
 8002e94:	6878      	ldr	r0, [r7, #4]
 8002e96:	f002 fc79 	bl	800578c <I2C_GetFlagStatus>
 8002e9a:	4603      	mov	r3, r0
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d0f8      	beq.n	8002e92 <DS3231_SetAlarm1+0x12e>

		I2C_Send7bitAddress(I2Cx, 0xD0, I2C_Direction_Transmitter);
 8002ea0:	2200      	movs	r2, #0
 8002ea2:	21d0      	movs	r1, #208	; 0xd0
 8002ea4:	6878      	ldr	r0, [r7, #4]
 8002ea6:	f002 fc03 	bl	80056b0 <I2C_Send7bitAddress>
		while(!I2C_CheckEvent(I2Cx, I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED));// wait send address
 8002eaa:	bf00      	nop
 8002eac:	4918      	ldr	r1, [pc, #96]	; (8002f10 <DS3231_SetAlarm1+0x1ac>)
 8002eae:	6878      	ldr	r0, [r7, #4]
 8002eb0:	f002 fc3c 	bl	800572c <I2C_CheckEvent>
 8002eb4:	4603      	mov	r3, r0
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d0f8      	beq.n	8002eac <DS3231_SetAlarm1+0x148>

		I2C_SendData(I2Cx, 0x0E);
 8002eba:	210e      	movs	r1, #14
 8002ebc:	6878      	ldr	r0, [r7, #4]
 8002ebe:	f002 fbd9 	bl	8005674 <I2C_SendData>
		while(!I2C_CheckEvent(I2Cx, I2C_EVENT_MASTER_BYTE_TRANSMITTED));// wait send word address 0x0E
 8002ec2:	bf00      	nop
 8002ec4:	4913      	ldr	r1, [pc, #76]	; (8002f14 <DS3231_SetAlarm1+0x1b0>)
 8002ec6:	6878      	ldr	r0, [r7, #4]
 8002ec8:	f002 fc30 	bl	800572c <I2C_CheckEvent>
 8002ecc:	4603      	mov	r3, r0
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d0f8      	beq.n	8002ec4 <DS3231_SetAlarm1+0x160>

		I2C_SendData(I2Cx, 0x1D);
 8002ed2:	211d      	movs	r1, #29
 8002ed4:	6878      	ldr	r0, [r7, #4]
 8002ed6:	f002 fbcd 	bl	8005674 <I2C_SendData>
		while(!I2C_CheckEvent(I2Cx, I2C_EVENT_MASTER_BYTE_TRANSMITTED));// wait send byte
 8002eda:	bf00      	nop
 8002edc:	490d      	ldr	r1, [pc, #52]	; (8002f14 <DS3231_SetAlarm1+0x1b0>)
 8002ede:	6878      	ldr	r0, [r7, #4]
 8002ee0:	f002 fc24 	bl	800572c <I2C_CheckEvent>
 8002ee4:	4603      	mov	r3, r0
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d0f8      	beq.n	8002edc <DS3231_SetAlarm1+0x178>

		I2C_GenerateSTOP(I2Cx, ENABLE);
 8002eea:	2101      	movs	r1, #1
 8002eec:	6878      	ldr	r0, [r7, #4]
 8002eee:	f002 fb81 	bl	80055f4 <I2C_GenerateSTOP>
		while(I2C_GetFlagStatus(I2Cx, I2C_FLAG_STOPF));// wait generate stop
 8002ef2:	bf00      	nop
 8002ef4:	4908      	ldr	r1, [pc, #32]	; (8002f18 <DS3231_SetAlarm1+0x1b4>)
 8002ef6:	6878      	ldr	r0, [r7, #4]
 8002ef8:	f002 fc48 	bl	800578c <I2C_GetFlagStatus>
 8002efc:	4603      	mov	r3, r0
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d1f8      	bne.n	8002ef4 <DS3231_SetAlarm1+0x190>
};
 8002f02:	bf00      	nop
 8002f04:	3708      	adds	r7, #8
 8002f06:	46bd      	mov	sp, r7
 8002f08:	bd80      	pop	{r7, pc}
 8002f0a:	bf00      	nop
 8002f0c:	10000001 	.word	0x10000001
 8002f10:	00070082 	.word	0x00070082
 8002f14:	00070084 	.word	0x00070084
 8002f18:	10000010 	.word	0x10000010

08002f1c <DS3231_GetAlarm1>:
	I2C_GenerateSTOP(I2Cx, ENABLE);
	while(I2C_GetFlagStatus(I2Cx, I2C_FLAG_STOPF));// wait generate stop
};

void DS3231_GetAlarm1(I2C_TypeDef* I2Cx, struct DS3231_Alarm1 *DS3231_ReadAlarm1)
{
 8002f1c:	b580      	push	{r7, lr}
 8002f1e:	b082      	sub	sp, #8
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	6078      	str	r0, [r7, #4]
 8002f24:	6039      	str	r1, [r7, #0]
	while(I2C_GetFlagStatus(I2Cx, I2C_FLAG_BUSY));
 8002f26:	bf00      	nop
 8002f28:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 8002f2c:	6878      	ldr	r0, [r7, #4]
 8002f2e:	f002 fc2d 	bl	800578c <I2C_GetFlagStatus>
 8002f32:	4603      	mov	r3, r0
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d1f7      	bne.n	8002f28 <DS3231_GetAlarm1+0xc>
	I2C_AcknowledgeConfig(I2Cx, ENABLE);// enable acknowledge
 8002f38:	2101      	movs	r1, #1
 8002f3a:	6878      	ldr	r0, [r7, #4]
 8002f3c:	f002 fb7a 	bl	8005634 <I2C_AcknowledgeConfig>

	I2C_GenerateSTART(I2Cx, ENABLE);
 8002f40:	2101      	movs	r1, #1
 8002f42:	6878      	ldr	r0, [r7, #4]
 8002f44:	f002 fb36 	bl	80055b4 <I2C_GenerateSTART>
	while(!I2C_GetFlagStatus(I2Cx, I2C_FLAG_SB));// wait generate start
 8002f48:	bf00      	nop
 8002f4a:	4956      	ldr	r1, [pc, #344]	; (80030a4 <DS3231_GetAlarm1+0x188>)
 8002f4c:	6878      	ldr	r0, [r7, #4]
 8002f4e:	f002 fc1d 	bl	800578c <I2C_GetFlagStatus>
 8002f52:	4603      	mov	r3, r0
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d0f8      	beq.n	8002f4a <DS3231_GetAlarm1+0x2e>

	I2C_Send7bitAddress(I2Cx, 0xD0, I2C_Direction_Transmitter);// send Address DS3231(0xD0)
 8002f58:	2200      	movs	r2, #0
 8002f5a:	21d0      	movs	r1, #208	; 0xd0
 8002f5c:	6878      	ldr	r0, [r7, #4]
 8002f5e:	f002 fba7 	bl	80056b0 <I2C_Send7bitAddress>
	while(!I2C_CheckEvent(I2Cx, I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED));// wait send address
 8002f62:	bf00      	nop
 8002f64:	4950      	ldr	r1, [pc, #320]	; (80030a8 <DS3231_GetAlarm1+0x18c>)
 8002f66:	6878      	ldr	r0, [r7, #4]
 8002f68:	f002 fbe0 	bl	800572c <I2C_CheckEvent>
 8002f6c:	4603      	mov	r3, r0
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d0f8      	beq.n	8002f64 <DS3231_GetAlarm1+0x48>

	I2C_SendData(I2Cx, 0x07);// send WORD ADDRESS 7
 8002f72:	2107      	movs	r1, #7
 8002f74:	6878      	ldr	r0, [r7, #4]
 8002f76:	f002 fb7d 	bl	8005674 <I2C_SendData>
	while(!I2C_CheckEvent(I2Cx, I2C_EVENT_MASTER_BYTE_TRANSMITTED));// wait send Word address 0
 8002f7a:	bf00      	nop
 8002f7c:	494b      	ldr	r1, [pc, #300]	; (80030ac <DS3231_GetAlarm1+0x190>)
 8002f7e:	6878      	ldr	r0, [r7, #4]
 8002f80:	f002 fbd4 	bl	800572c <I2C_CheckEvent>
 8002f84:	4603      	mov	r3, r0
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d0f8      	beq.n	8002f7c <DS3231_GetAlarm1+0x60>

	I2C_GenerateSTOP(I2Cx, ENABLE);
 8002f8a:	2101      	movs	r1, #1
 8002f8c:	6878      	ldr	r0, [r7, #4]
 8002f8e:	f002 fb31 	bl	80055f4 <I2C_GenerateSTOP>
	while(I2C_GetFlagStatus(I2Cx, I2C_FLAG_STOPF));// wait generate stop
 8002f92:	bf00      	nop
 8002f94:	4946      	ldr	r1, [pc, #280]	; (80030b0 <DS3231_GetAlarm1+0x194>)
 8002f96:	6878      	ldr	r0, [r7, #4]
 8002f98:	f002 fbf8 	bl	800578c <I2C_GetFlagStatus>
 8002f9c:	4603      	mov	r3, r0
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d1f8      	bne.n	8002f94 <DS3231_GetAlarm1+0x78>


	I2C_GenerateSTART(I2Cx, ENABLE);
 8002fa2:	2101      	movs	r1, #1
 8002fa4:	6878      	ldr	r0, [r7, #4]
 8002fa6:	f002 fb05 	bl	80055b4 <I2C_GenerateSTART>
	while(!I2C_GetFlagStatus(I2Cx, I2C_FLAG_SB));// wait Generate Start condition
 8002faa:	bf00      	nop
 8002fac:	493d      	ldr	r1, [pc, #244]	; (80030a4 <DS3231_GetAlarm1+0x188>)
 8002fae:	6878      	ldr	r0, [r7, #4]
 8002fb0:	f002 fbec 	bl	800578c <I2C_GetFlagStatus>
 8002fb4:	4603      	mov	r3, r0
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d0f8      	beq.n	8002fac <DS3231_GetAlarm1+0x90>

	I2C_Send7bitAddress(I2Cx, 0xD0, I2C_Direction_Receiver);
 8002fba:	2201      	movs	r2, #1
 8002fbc:	21d0      	movs	r1, #208	; 0xd0
 8002fbe:	6878      	ldr	r0, [r7, #4]
 8002fc0:	f002 fb76 	bl	80056b0 <I2C_Send7bitAddress>
	while(!I2C_CheckEvent(I2Cx, I2C_EVENT_MASTER_RECEIVER_MODE_SELECTED));// wait send address
 8002fc4:	bf00      	nop
 8002fc6:	493b      	ldr	r1, [pc, #236]	; (80030b4 <DS3231_GetAlarm1+0x198>)
 8002fc8:	6878      	ldr	r0, [r7, #4]
 8002fca:	f002 fbaf 	bl	800572c <I2C_CheckEvent>
 8002fce:	4603      	mov	r3, r0
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d0f8      	beq.n	8002fc6 <DS3231_GetAlarm1+0xaa>

	while(!I2C_CheckEvent(I2Cx, I2C_EVENT_MASTER_BYTE_RECEIVED));// wait receive byte
 8002fd4:	bf00      	nop
 8002fd6:	4938      	ldr	r1, [pc, #224]	; (80030b8 <DS3231_GetAlarm1+0x19c>)
 8002fd8:	6878      	ldr	r0, [r7, #4]
 8002fda:	f002 fba7 	bl	800572c <I2C_CheckEvent>
 8002fde:	4603      	mov	r3, r0
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d0f8      	beq.n	8002fd6 <DS3231_GetAlarm1+0xba>
	DS3231_ReadAlarm1->Seconds = I2C_ReceiveData(I2Cx);// receive second
 8002fe4:	6878      	ldr	r0, [r7, #4]
 8002fe6:	f002 fb55 	bl	8005694 <I2C_ReceiveData>
 8002fea:	4603      	mov	r3, r0
 8002fec:	461a      	mov	r2, r3
 8002fee:	683b      	ldr	r3, [r7, #0]
 8002ff0:	701a      	strb	r2, [r3, #0]

	while(!I2C_CheckEvent(I2Cx, I2C_EVENT_MASTER_BYTE_RECEIVED));// wait receive byte
 8002ff2:	bf00      	nop
 8002ff4:	4930      	ldr	r1, [pc, #192]	; (80030b8 <DS3231_GetAlarm1+0x19c>)
 8002ff6:	6878      	ldr	r0, [r7, #4]
 8002ff8:	f002 fb98 	bl	800572c <I2C_CheckEvent>
 8002ffc:	4603      	mov	r3, r0
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d0f8      	beq.n	8002ff4 <DS3231_GetAlarm1+0xd8>
	DS3231_ReadAlarm1->Minutes = I2C_ReceiveData(I2Cx);// receive minutes
 8003002:	6878      	ldr	r0, [r7, #4]
 8003004:	f002 fb46 	bl	8005694 <I2C_ReceiveData>
 8003008:	4603      	mov	r3, r0
 800300a:	461a      	mov	r2, r3
 800300c:	683b      	ldr	r3, [r7, #0]
 800300e:	705a      	strb	r2, [r3, #1]

	while(!I2C_CheckEvent(I2Cx, I2C_EVENT_MASTER_BYTE_RECEIVED));// wait receive byte
 8003010:	bf00      	nop
 8003012:	4929      	ldr	r1, [pc, #164]	; (80030b8 <DS3231_GetAlarm1+0x19c>)
 8003014:	6878      	ldr	r0, [r7, #4]
 8003016:	f002 fb89 	bl	800572c <I2C_CheckEvent>
 800301a:	4603      	mov	r3, r0
 800301c:	2b00      	cmp	r3, #0
 800301e:	d0f8      	beq.n	8003012 <DS3231_GetAlarm1+0xf6>
	DS3231_ReadAlarm1->Hour = I2C_ReceiveData(I2Cx);// receive hour
 8003020:	6878      	ldr	r0, [r7, #4]
 8003022:	f002 fb37 	bl	8005694 <I2C_ReceiveData>
 8003026:	4603      	mov	r3, r0
 8003028:	461a      	mov	r2, r3
 800302a:	683b      	ldr	r3, [r7, #0]
 800302c:	709a      	strb	r2, [r3, #2]

	while(!I2C_CheckEvent(I2Cx, I2C_EVENT_MASTER_BYTE_RECEIVED));// wait receive byte
 800302e:	bf00      	nop
 8003030:	4921      	ldr	r1, [pc, #132]	; (80030b8 <DS3231_GetAlarm1+0x19c>)
 8003032:	6878      	ldr	r0, [r7, #4]
 8003034:	f002 fb7a 	bl	800572c <I2C_CheckEvent>
 8003038:	4603      	mov	r3, r0
 800303a:	2b00      	cmp	r3, #0
 800303c:	d0f8      	beq.n	8003030 <DS3231_GetAlarm1+0x114>
	DS3231_ReadAlarm1->Day = I2C_ReceiveData(I2Cx);// receive day(1-7)
 800303e:	6878      	ldr	r0, [r7, #4]
 8003040:	f002 fb28 	bl	8005694 <I2C_ReceiveData>
 8003044:	4603      	mov	r3, r0
 8003046:	461a      	mov	r2, r3
 8003048:	683b      	ldr	r3, [r7, #0]
 800304a:	70da      	strb	r2, [r3, #3]

	while(!I2C_CheckEvent(I2Cx, I2C_EVENT_MASTER_BYTE_RECEIVED));// wait receive byte
 800304c:	bf00      	nop
 800304e:	491a      	ldr	r1, [pc, #104]	; (80030b8 <DS3231_GetAlarm1+0x19c>)
 8003050:	6878      	ldr	r0, [r7, #4]
 8003052:	f002 fb6b 	bl	800572c <I2C_CheckEvent>
 8003056:	4603      	mov	r3, r0
 8003058:	2b00      	cmp	r3, #0
 800305a:	d0f8      	beq.n	800304e <DS3231_GetAlarm1+0x132>
	DS3231_ReadAlarm1->Date = I2C_ReceiveData(I2Cx);// receive date(1-31)
 800305c:	6878      	ldr	r0, [r7, #4]
 800305e:	f002 fb19 	bl	8005694 <I2C_ReceiveData>
 8003062:	4603      	mov	r3, r0
 8003064:	461a      	mov	r2, r3
 8003066:	683b      	ldr	r3, [r7, #0]
 8003068:	711a      	strb	r2, [r3, #4]

	I2C_NACKPositionConfig(I2Cx, I2C_NACKPosition_Current);// generate not acknowledge
 800306a:	f24f 71ff 	movw	r1, #63487	; 0xf7ff
 800306e:	6878      	ldr	r0, [r7, #4]
 8003070:	f002 fb3c 	bl	80056ec <I2C_NACKPositionConfig>
	I2C_AcknowledgeConfig(I2Cx, DISABLE);// disable acknowledge
 8003074:	2100      	movs	r1, #0
 8003076:	6878      	ldr	r0, [r7, #4]
 8003078:	f002 fadc 	bl	8005634 <I2C_AcknowledgeConfig>

	I2C_GenerateSTOP(I2Cx, ENABLE);// generate stop condition
 800307c:	2101      	movs	r1, #1
 800307e:	6878      	ldr	r0, [r7, #4]
 8003080:	f002 fab8 	bl	80055f4 <I2C_GenerateSTOP>
	while(I2C_GetFlagStatus(I2Cx, I2C_FLAG_STOPF));// wait generate stop
 8003084:	bf00      	nop
 8003086:	490a      	ldr	r1, [pc, #40]	; (80030b0 <DS3231_GetAlarm1+0x194>)
 8003088:	6878      	ldr	r0, [r7, #4]
 800308a:	f002 fb7f 	bl	800578c <I2C_GetFlagStatus>
 800308e:	4603      	mov	r3, r0
 8003090:	2b00      	cmp	r3, #0
 8003092:	d1f8      	bne.n	8003086 <DS3231_GetAlarm1+0x16a>

	I2C_AcknowledgeConfig(I2Cx, ENABLE);// enable acknowledge
 8003094:	2101      	movs	r1, #1
 8003096:	6878      	ldr	r0, [r7, #4]
 8003098:	f002 facc 	bl	8005634 <I2C_AcknowledgeConfig>
};
 800309c:	bf00      	nop
 800309e:	3708      	adds	r7, #8
 80030a0:	46bd      	mov	sp, r7
 80030a2:	bd80      	pop	{r7, pc}
 80030a4:	10000001 	.word	0x10000001
 80030a8:	00070082 	.word	0x00070082
 80030ac:	00070084 	.word	0x00070084
 80030b0:	10000010 	.word	0x10000010
 80030b4:	00030002 	.word	0x00030002
 80030b8:	00030040 	.word	0x00030040

080030bc <DS3231_ReadFlag>:

	I2C_AcknowledgeConfig(I2Cx, ENABLE);// enable acknowledge
};

uint8_t DS3231_ReadFlag(I2C_TypeDef* I2Cx, uint8_t DS3231_FLAG)
{
 80030bc:	b580      	push	{r7, lr}
 80030be:	b084      	sub	sp, #16
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	6078      	str	r0, [r7, #4]
 80030c4:	460b      	mov	r3, r1
 80030c6:	70fb      	strb	r3, [r7, #3]
	while(I2C_GetFlagStatus(I2Cx, I2C_FLAG_BUSY));
 80030c8:	bf00      	nop
 80030ca:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 80030ce:	6878      	ldr	r0, [r7, #4]
 80030d0:	f002 fb5c 	bl	800578c <I2C_GetFlagStatus>
 80030d4:	4603      	mov	r3, r0
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d1f7      	bne.n	80030ca <DS3231_ReadFlag+0xe>
	I2C_AcknowledgeConfig(I2Cx, ENABLE);// enable acknowledge
 80030da:	2101      	movs	r1, #1
 80030dc:	6878      	ldr	r0, [r7, #4]
 80030de:	f002 faa9 	bl	8005634 <I2C_AcknowledgeConfig>


	I2C_GenerateSTART(I2Cx, ENABLE);
 80030e2:	2101      	movs	r1, #1
 80030e4:	6878      	ldr	r0, [r7, #4]
 80030e6:	f002 fa65 	bl	80055b4 <I2C_GenerateSTART>
	while(!I2C_GetFlagStatus(I2Cx, I2C_FLAG_SB));// wait generate start
 80030ea:	bf00      	nop
 80030ec:	4939      	ldr	r1, [pc, #228]	; (80031d4 <DS3231_ReadFlag+0x118>)
 80030ee:	6878      	ldr	r0, [r7, #4]
 80030f0:	f002 fb4c 	bl	800578c <I2C_GetFlagStatus>
 80030f4:	4603      	mov	r3, r0
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d0f8      	beq.n	80030ec <DS3231_ReadFlag+0x30>

	I2C_Send7bitAddress(I2Cx, 0xD0, I2C_Direction_Transmitter);// send Address DS3231(0xD0)
 80030fa:	2200      	movs	r2, #0
 80030fc:	21d0      	movs	r1, #208	; 0xd0
 80030fe:	6878      	ldr	r0, [r7, #4]
 8003100:	f002 fad6 	bl	80056b0 <I2C_Send7bitAddress>
	while(!I2C_CheckEvent(I2Cx, I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED));// wait send address
 8003104:	bf00      	nop
 8003106:	4934      	ldr	r1, [pc, #208]	; (80031d8 <DS3231_ReadFlag+0x11c>)
 8003108:	6878      	ldr	r0, [r7, #4]
 800310a:	f002 fb0f 	bl	800572c <I2C_CheckEvent>
 800310e:	4603      	mov	r3, r0
 8003110:	2b00      	cmp	r3, #0
 8003112:	d0f8      	beq.n	8003106 <DS3231_ReadFlag+0x4a>

	I2C_SendData(I2Cx, 0x0F);// send WORD ADDRESS 0x0F
 8003114:	210f      	movs	r1, #15
 8003116:	6878      	ldr	r0, [r7, #4]
 8003118:	f002 faac 	bl	8005674 <I2C_SendData>
	while(!I2C_CheckEvent(I2Cx, I2C_EVENT_MASTER_BYTE_TRANSMITTED));// wait send Word address 0
 800311c:	bf00      	nop
 800311e:	492f      	ldr	r1, [pc, #188]	; (80031dc <DS3231_ReadFlag+0x120>)
 8003120:	6878      	ldr	r0, [r7, #4]
 8003122:	f002 fb03 	bl	800572c <I2C_CheckEvent>
 8003126:	4603      	mov	r3, r0
 8003128:	2b00      	cmp	r3, #0
 800312a:	d0f8      	beq.n	800311e <DS3231_ReadFlag+0x62>

	I2C_GenerateSTOP(I2Cx, ENABLE);
 800312c:	2101      	movs	r1, #1
 800312e:	6878      	ldr	r0, [r7, #4]
 8003130:	f002 fa60 	bl	80055f4 <I2C_GenerateSTOP>
	while(I2C_GetFlagStatus(I2Cx, I2C_FLAG_STOPF));// wait generate stop
 8003134:	bf00      	nop
 8003136:	492a      	ldr	r1, [pc, #168]	; (80031e0 <DS3231_ReadFlag+0x124>)
 8003138:	6878      	ldr	r0, [r7, #4]
 800313a:	f002 fb27 	bl	800578c <I2C_GetFlagStatus>
 800313e:	4603      	mov	r3, r0
 8003140:	2b00      	cmp	r3, #0
 8003142:	d1f8      	bne.n	8003136 <DS3231_ReadFlag+0x7a>


	I2C_GenerateSTART(I2Cx, ENABLE);
 8003144:	2101      	movs	r1, #1
 8003146:	6878      	ldr	r0, [r7, #4]
 8003148:	f002 fa34 	bl	80055b4 <I2C_GenerateSTART>
	while(!I2C_GetFlagStatus(I2Cx, I2C_FLAG_SB));// wait Generate Start condition
 800314c:	bf00      	nop
 800314e:	4921      	ldr	r1, [pc, #132]	; (80031d4 <DS3231_ReadFlag+0x118>)
 8003150:	6878      	ldr	r0, [r7, #4]
 8003152:	f002 fb1b 	bl	800578c <I2C_GetFlagStatus>
 8003156:	4603      	mov	r3, r0
 8003158:	2b00      	cmp	r3, #0
 800315a:	d0f8      	beq.n	800314e <DS3231_ReadFlag+0x92>

	I2C_Send7bitAddress(I2Cx, 0xD0, I2C_Direction_Receiver);
 800315c:	2201      	movs	r2, #1
 800315e:	21d0      	movs	r1, #208	; 0xd0
 8003160:	6878      	ldr	r0, [r7, #4]
 8003162:	f002 faa5 	bl	80056b0 <I2C_Send7bitAddress>
	while(!I2C_CheckEvent(I2Cx, I2C_EVENT_MASTER_RECEIVER_MODE_SELECTED));// wait send address ds3231
 8003166:	bf00      	nop
 8003168:	491e      	ldr	r1, [pc, #120]	; (80031e4 <DS3231_ReadFlag+0x128>)
 800316a:	6878      	ldr	r0, [r7, #4]
 800316c:	f002 fade 	bl	800572c <I2C_CheckEvent>
 8003170:	4603      	mov	r3, r0
 8003172:	2b00      	cmp	r3, #0
 8003174:	d0f8      	beq.n	8003168 <DS3231_ReadFlag+0xac>

	while(!I2C_CheckEvent(I2Cx, I2C_EVENT_MASTER_BYTE_RECEIVED));// wait receive byte
 8003176:	bf00      	nop
 8003178:	491b      	ldr	r1, [pc, #108]	; (80031e8 <DS3231_ReadFlag+0x12c>)
 800317a:	6878      	ldr	r0, [r7, #4]
 800317c:	f002 fad6 	bl	800572c <I2C_CheckEvent>
 8003180:	4603      	mov	r3, r0
 8003182:	2b00      	cmp	r3, #0
 8003184:	d0f8      	beq.n	8003178 <DS3231_ReadFlag+0xbc>
	uint8_t calculate = I2C_ReceiveData(I2Cx) & DS3231_FLAG;
 8003186:	6878      	ldr	r0, [r7, #4]
 8003188:	f002 fa84 	bl	8005694 <I2C_ReceiveData>
 800318c:	4603      	mov	r3, r0
 800318e:	461a      	mov	r2, r3
 8003190:	78fb      	ldrb	r3, [r7, #3]
 8003192:	4013      	ands	r3, r2
 8003194:	73fb      	strb	r3, [r7, #15]

	I2C_NACKPositionConfig(I2Cx, I2C_NACKPosition_Current);
 8003196:	f24f 71ff 	movw	r1, #63487	; 0xf7ff
 800319a:	6878      	ldr	r0, [r7, #4]
 800319c:	f002 faa6 	bl	80056ec <I2C_NACKPositionConfig>
	I2C_AcknowledgeConfig(I2Cx, DISABLE);
 80031a0:	2100      	movs	r1, #0
 80031a2:	6878      	ldr	r0, [r7, #4]
 80031a4:	f002 fa46 	bl	8005634 <I2C_AcknowledgeConfig>

	I2C_GenerateSTOP(I2Cx, ENABLE);
 80031a8:	2101      	movs	r1, #1
 80031aa:	6878      	ldr	r0, [r7, #4]
 80031ac:	f002 fa22 	bl	80055f4 <I2C_GenerateSTOP>
	while(I2C_GetFlagStatus(I2Cx, I2C_FLAG_STOPF));// wait generate stop condition
 80031b0:	bf00      	nop
 80031b2:	490b      	ldr	r1, [pc, #44]	; (80031e0 <DS3231_ReadFlag+0x124>)
 80031b4:	6878      	ldr	r0, [r7, #4]
 80031b6:	f002 fae9 	bl	800578c <I2C_GetFlagStatus>
 80031ba:	4603      	mov	r3, r0
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d1f8      	bne.n	80031b2 <DS3231_ReadFlag+0xf6>

	I2C_AcknowledgeConfig(I2Cx, ENABLE);// enable acknowledge
 80031c0:	2101      	movs	r1, #1
 80031c2:	6878      	ldr	r0, [r7, #4]
 80031c4:	f002 fa36 	bl	8005634 <I2C_AcknowledgeConfig>

	return calculate;
 80031c8:	7bfb      	ldrb	r3, [r7, #15]
};
 80031ca:	4618      	mov	r0, r3
 80031cc:	3710      	adds	r7, #16
 80031ce:	46bd      	mov	sp, r7
 80031d0:	bd80      	pop	{r7, pc}
 80031d2:	bf00      	nop
 80031d4:	10000001 	.word	0x10000001
 80031d8:	00070082 	.word	0x00070082
 80031dc:	00070084 	.word	0x00070084
 80031e0:	10000010 	.word	0x10000010
 80031e4:	00030002 	.word	0x00030002
 80031e8:	00030040 	.word	0x00030040

080031ec <DS3231_ClearFlag>:
void DS3231_ClearFlag(I2C_TypeDef* I2Cx, uint8_t DS3231_FLAG)
{
 80031ec:	b580      	push	{r7, lr}
 80031ee:	b082      	sub	sp, #8
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	6078      	str	r0, [r7, #4]
 80031f4:	460b      	mov	r3, r1
 80031f6:	70fb      	strb	r3, [r7, #3]
	while(I2C_GetFlagStatus(I2Cx, I2C_FLAG_BUSY));
 80031f8:	bf00      	nop
 80031fa:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 80031fe:	6878      	ldr	r0, [r7, #4]
 8003200:	f002 fac4 	bl	800578c <I2C_GetFlagStatus>
 8003204:	4603      	mov	r3, r0
 8003206:	2b00      	cmp	r3, #0
 8003208:	d1f7      	bne.n	80031fa <DS3231_ClearFlag+0xe>
	I2C_AcknowledgeConfig(I2Cx, ENABLE);// enable acknowledge
 800320a:	2101      	movs	r1, #1
 800320c:	6878      	ldr	r0, [r7, #4]
 800320e:	f002 fa11 	bl	8005634 <I2C_AcknowledgeConfig>


	I2C_GenerateSTART(I2Cx, ENABLE);
 8003212:	2101      	movs	r1, #1
 8003214:	6878      	ldr	r0, [r7, #4]
 8003216:	f002 f9cd 	bl	80055b4 <I2C_GenerateSTART>
	while(!I2C_GetFlagStatus(I2Cx, I2C_FLAG_SB));// wait generate start
 800321a:	bf00      	nop
 800321c:	4939      	ldr	r1, [pc, #228]	; (8003304 <DS3231_ClearFlag+0x118>)
 800321e:	6878      	ldr	r0, [r7, #4]
 8003220:	f002 fab4 	bl	800578c <I2C_GetFlagStatus>
 8003224:	4603      	mov	r3, r0
 8003226:	2b00      	cmp	r3, #0
 8003228:	d0f8      	beq.n	800321c <DS3231_ClearFlag+0x30>

	I2C_Send7bitAddress(I2Cx, 0xD0, I2C_Direction_Transmitter);// send Address DS3231(0xD0)
 800322a:	2200      	movs	r2, #0
 800322c:	21d0      	movs	r1, #208	; 0xd0
 800322e:	6878      	ldr	r0, [r7, #4]
 8003230:	f002 fa3e 	bl	80056b0 <I2C_Send7bitAddress>
	while(!I2C_CheckEvent(I2Cx, I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED));// wait send address
 8003234:	bf00      	nop
 8003236:	4934      	ldr	r1, [pc, #208]	; (8003308 <DS3231_ClearFlag+0x11c>)
 8003238:	6878      	ldr	r0, [r7, #4]
 800323a:	f002 fa77 	bl	800572c <I2C_CheckEvent>
 800323e:	4603      	mov	r3, r0
 8003240:	2b00      	cmp	r3, #0
 8003242:	d0f8      	beq.n	8003236 <DS3231_ClearFlag+0x4a>

	I2C_SendData(I2Cx, 0x0F);// send WORD ADDRESS 0x0F
 8003244:	210f      	movs	r1, #15
 8003246:	6878      	ldr	r0, [r7, #4]
 8003248:	f002 fa14 	bl	8005674 <I2C_SendData>
	while(!I2C_CheckEvent(I2Cx, I2C_EVENT_MASTER_BYTE_TRANSMITTED));// wait send Word address 0
 800324c:	bf00      	nop
 800324e:	492f      	ldr	r1, [pc, #188]	; (800330c <DS3231_ClearFlag+0x120>)
 8003250:	6878      	ldr	r0, [r7, #4]
 8003252:	f002 fa6b 	bl	800572c <I2C_CheckEvent>
 8003256:	4603      	mov	r3, r0
 8003258:	2b00      	cmp	r3, #0
 800325a:	d0f8      	beq.n	800324e <DS3231_ClearFlag+0x62>

	I2C_GenerateSTOP(I2Cx, ENABLE);
 800325c:	2101      	movs	r1, #1
 800325e:	6878      	ldr	r0, [r7, #4]
 8003260:	f002 f9c8 	bl	80055f4 <I2C_GenerateSTOP>
	while(I2C_GetFlagStatus(I2Cx, I2C_FLAG_STOPF));// wait generate stop
 8003264:	bf00      	nop
 8003266:	492a      	ldr	r1, [pc, #168]	; (8003310 <DS3231_ClearFlag+0x124>)
 8003268:	6878      	ldr	r0, [r7, #4]
 800326a:	f002 fa8f 	bl	800578c <I2C_GetFlagStatus>
 800326e:	4603      	mov	r3, r0
 8003270:	2b00      	cmp	r3, #0
 8003272:	d1f8      	bne.n	8003266 <DS3231_ClearFlag+0x7a>


	I2C_GenerateSTART(I2Cx, ENABLE);
 8003274:	2101      	movs	r1, #1
 8003276:	6878      	ldr	r0, [r7, #4]
 8003278:	f002 f99c 	bl	80055b4 <I2C_GenerateSTART>
	while(!I2C_GetFlagStatus(I2Cx, I2C_FLAG_SB));// wait Generate Start condition
 800327c:	bf00      	nop
 800327e:	4921      	ldr	r1, [pc, #132]	; (8003304 <DS3231_ClearFlag+0x118>)
 8003280:	6878      	ldr	r0, [r7, #4]
 8003282:	f002 fa83 	bl	800578c <I2C_GetFlagStatus>
 8003286:	4603      	mov	r3, r0
 8003288:	2b00      	cmp	r3, #0
 800328a:	d0f8      	beq.n	800327e <DS3231_ClearFlag+0x92>

	I2C_Send7bitAddress(I2Cx, 0xD0, I2C_Direction_Transmitter);
 800328c:	2200      	movs	r2, #0
 800328e:	21d0      	movs	r1, #208	; 0xd0
 8003290:	6878      	ldr	r0, [r7, #4]
 8003292:	f002 fa0d 	bl	80056b0 <I2C_Send7bitAddress>
	while(!I2C_CheckEvent(I2Cx, I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED));// wait send address ds3231
 8003296:	bf00      	nop
 8003298:	491b      	ldr	r1, [pc, #108]	; (8003308 <DS3231_ClearFlag+0x11c>)
 800329a:	6878      	ldr	r0, [r7, #4]
 800329c:	f002 fa46 	bl	800572c <I2C_CheckEvent>
 80032a0:	4603      	mov	r3, r0
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d0f8      	beq.n	8003298 <DS3231_ClearFlag+0xac>

	I2C_SendData(I2Cx, 0x0F);
 80032a6:	210f      	movs	r1, #15
 80032a8:	6878      	ldr	r0, [r7, #4]
 80032aa:	f002 f9e3 	bl	8005674 <I2C_SendData>
	while(!I2C_CheckEvent(I2Cx, I2C_EVENT_MASTER_BYTE_TRANSMITTED));// wait send word address 7
 80032ae:	bf00      	nop
 80032b0:	4916      	ldr	r1, [pc, #88]	; (800330c <DS3231_ClearFlag+0x120>)
 80032b2:	6878      	ldr	r0, [r7, #4]
 80032b4:	f002 fa3a 	bl	800572c <I2C_CheckEvent>
 80032b8:	4603      	mov	r3, r0
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d0f8      	beq.n	80032b0 <DS3231_ClearFlag+0xc4>

	I2C_SendData(I2Cx, !DS3231_FLAG);// send FLAG bit for clear bit
 80032be:	78fb      	ldrb	r3, [r7, #3]
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	bf0c      	ite	eq
 80032c4:	2301      	moveq	r3, #1
 80032c6:	2300      	movne	r3, #0
 80032c8:	b2db      	uxtb	r3, r3
 80032ca:	4619      	mov	r1, r3
 80032cc:	6878      	ldr	r0, [r7, #4]
 80032ce:	f002 f9d1 	bl	8005674 <I2C_SendData>
	while(!I2C_CheckEvent(I2Cx, I2C_EVENT_MASTER_BYTE_TRANSMITTED));// wait send address
 80032d2:	bf00      	nop
 80032d4:	490d      	ldr	r1, [pc, #52]	; (800330c <DS3231_ClearFlag+0x120>)
 80032d6:	6878      	ldr	r0, [r7, #4]
 80032d8:	f002 fa28 	bl	800572c <I2C_CheckEvent>
 80032dc:	4603      	mov	r3, r0
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d0f8      	beq.n	80032d4 <DS3231_ClearFlag+0xe8>

	I2C_GenerateSTOP(I2Cx, ENABLE);
 80032e2:	2101      	movs	r1, #1
 80032e4:	6878      	ldr	r0, [r7, #4]
 80032e6:	f002 f985 	bl	80055f4 <I2C_GenerateSTOP>
	while(I2C_GetFlagStatus(I2Cx, I2C_FLAG_STOPF));// wait generate stop
 80032ea:	bf00      	nop
 80032ec:	4908      	ldr	r1, [pc, #32]	; (8003310 <DS3231_ClearFlag+0x124>)
 80032ee:	6878      	ldr	r0, [r7, #4]
 80032f0:	f002 fa4c 	bl	800578c <I2C_GetFlagStatus>
 80032f4:	4603      	mov	r3, r0
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d1f8      	bne.n	80032ec <DS3231_ClearFlag+0x100>
};
 80032fa:	bf00      	nop
 80032fc:	3708      	adds	r7, #8
 80032fe:	46bd      	mov	sp, r7
 8003300:	bd80      	pop	{r7, pc}
 8003302:	bf00      	nop
 8003304:	10000001 	.word	0x10000001
 8003308:	00070082 	.word	0x00070082
 800330c:	00070084 	.word	0x00070084
 8003310:	10000010 	.word	0x10000010

08003314 <Init_PIN>:
#include "GPIO.h"
#include "stm32f10x.h"



void Init_PIN(char Port,char PIN,char Config_IO,char Mode){
 8003314:	b490      	push	{r4, r7}
 8003316:	b082      	sub	sp, #8
 8003318:	af00      	add	r7, sp, #0
 800331a:	4604      	mov	r4, r0
 800331c:	4608      	mov	r0, r1
 800331e:	4611      	mov	r1, r2
 8003320:	461a      	mov	r2, r3
 8003322:	4623      	mov	r3, r4
 8003324:	71fb      	strb	r3, [r7, #7]
 8003326:	4603      	mov	r3, r0
 8003328:	71bb      	strb	r3, [r7, #6]
 800332a:	460b      	mov	r3, r1
 800332c:	717b      	strb	r3, [r7, #5]
 800332e:	4613      	mov	r3, r2
 8003330:	713b      	strb	r3, [r7, #4]
        switch (Port){
 8003332:	79fb      	ldrb	r3, [r7, #7]
 8003334:	3b01      	subs	r3, #1
 8003336:	2b04      	cmp	r3, #4
 8003338:	f200 839f 	bhi.w	8003a7a <Init_PIN+0x766>
 800333c:	a201      	add	r2, pc, #4	; (adr r2, 8003344 <Init_PIN+0x30>)
 800333e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003342:	bf00      	nop
 8003344:	08003359 	.word	0x08003359
 8003348:	080034c3 	.word	0x080034c3
 800334c:	08003635 	.word	0x08003635
 8003350:	0800379f 	.word	0x0800379f
 8003354:	08003911 	.word	0x08003911
			case 1: //PORT is A
				while( ( (Config_IO < 0) || (Config_IO > 3) ) || ( (Mode <0) || (Mode > 3) ) ); // check Config_IO And Mode Not INvalid 
 8003358:	797b      	ldrb	r3, [r7, #5]
 800335a:	2b03      	cmp	r3, #3
 800335c:	d8fc      	bhi.n	8003358 <Init_PIN+0x44>
 800335e:	793b      	ldrb	r3, [r7, #4]
 8003360:	2b03      	cmp	r3, #3
 8003362:	d8f9      	bhi.n	8003358 <Init_PIN+0x44>
				if( (PIN >= 0) && (PIN <= 7) ){ // Number Pin Between 0 And 7
 8003364:	79bb      	ldrb	r3, [r7, #6]
 8003366:	2b07      	cmp	r3, #7
 8003368:	d84d      	bhi.n	8003406 <Init_PIN+0xf2>
					GPIOA->CRL &=  ~( 3 << (PIN * 4) ); // Config Bit Mode(In Register CRL) == 0
 800336a:	49af      	ldr	r1, [pc, #700]	; (8003628 <Init_PIN+0x314>)
 800336c:	4bae      	ldr	r3, [pc, #696]	; (8003628 <Init_PIN+0x314>)
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	79ba      	ldrb	r2, [r7, #6]
 8003372:	0092      	lsls	r2, r2, #2
 8003374:	2003      	movs	r0, #3
 8003376:	fa00 f202 	lsl.w	r2, r0, r2
 800337a:	43d2      	mvns	r2, r2
 800337c:	4013      	ands	r3, r2
 800337e:	600b      	str	r3, [r1, #0]
					GPIOA->CRL &= ~( 3  << ( ( PIN * 4) + 2 )  ); // Config Bit CNF(In Register CRL) for Config Mode == 0
 8003380:	49a9      	ldr	r1, [pc, #676]	; (8003628 <Init_PIN+0x314>)
 8003382:	4ba9      	ldr	r3, [pc, #676]	; (8003628 <Init_PIN+0x314>)
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	79ba      	ldrb	r2, [r7, #6]
 8003388:	0092      	lsls	r2, r2, #2
 800338a:	3202      	adds	r2, #2
 800338c:	2003      	movs	r0, #3
 800338e:	fa00 f202 	lsl.w	r2, r0, r2
 8003392:	43d2      	mvns	r2, r2
 8003394:	4013      	ands	r3, r2
 8003396:	600b      	str	r3, [r1, #0]
					GPIOA->CRL |= ( Config_IO << (PIN * 4)  ); // Config Bit Mode(In Register CRL) 
 8003398:	48a3      	ldr	r0, [pc, #652]	; (8003628 <Init_PIN+0x314>)
 800339a:	4ba3      	ldr	r3, [pc, #652]	; (8003628 <Init_PIN+0x314>)
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	7979      	ldrb	r1, [r7, #5]
 80033a0:	79ba      	ldrb	r2, [r7, #6]
 80033a2:	0092      	lsls	r2, r2, #2
 80033a4:	fa01 f202 	lsl.w	r2, r1, r2
 80033a8:	4313      	orrs	r3, r2
 80033aa:	6003      	str	r3, [r0, #0]
					GPIOA->CRL |= ( Mode  << ( ( PIN * 4) + 2 )  ); // Config Bit CNF(In Register CRL) for Config Mode 
 80033ac:	489e      	ldr	r0, [pc, #632]	; (8003628 <Init_PIN+0x314>)
 80033ae:	4b9e      	ldr	r3, [pc, #632]	; (8003628 <Init_PIN+0x314>)
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	7939      	ldrb	r1, [r7, #4]
 80033b4:	79ba      	ldrb	r2, [r7, #6]
 80033b6:	0092      	lsls	r2, r2, #2
 80033b8:	3202      	adds	r2, #2
 80033ba:	fa01 f202 	lsl.w	r2, r1, r2
 80033be:	4313      	orrs	r3, r2
 80033c0:	6003      	str	r3, [r0, #0]
					while( ( ( GPIOA->CRL & ( 3 << (PIN * 4) ) ) != ( Config_IO << (PIN * 4) ) )  ||  ( ( GPIOA->CRL & ( 3  << ( ( PIN * 4) + 2 ) ) ) != ( Mode  << ( ( PIN * 4) + 2 )  ) ) ); // wait set Bits Mode And CNF(In Register CRL)
 80033c2:	bf00      	nop
 80033c4:	4b98      	ldr	r3, [pc, #608]	; (8003628 <Init_PIN+0x314>)
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	79ba      	ldrb	r2, [r7, #6]
 80033ca:	0092      	lsls	r2, r2, #2
 80033cc:	2103      	movs	r1, #3
 80033ce:	fa01 f202 	lsl.w	r2, r1, r2
 80033d2:	4013      	ands	r3, r2
 80033d4:	7979      	ldrb	r1, [r7, #5]
 80033d6:	79ba      	ldrb	r2, [r7, #6]
 80033d8:	0092      	lsls	r2, r2, #2
 80033da:	fa01 f202 	lsl.w	r2, r1, r2
 80033de:	4293      	cmp	r3, r2
 80033e0:	d1f0      	bne.n	80033c4 <Init_PIN+0xb0>
 80033e2:	4b91      	ldr	r3, [pc, #580]	; (8003628 <Init_PIN+0x314>)
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	79ba      	ldrb	r2, [r7, #6]
 80033e8:	0092      	lsls	r2, r2, #2
 80033ea:	3202      	adds	r2, #2
 80033ec:	2103      	movs	r1, #3
 80033ee:	fa01 f202 	lsl.w	r2, r1, r2
 80033f2:	4013      	ands	r3, r2
 80033f4:	7939      	ldrb	r1, [r7, #4]
 80033f6:	79ba      	ldrb	r2, [r7, #6]
 80033f8:	0092      	lsls	r2, r2, #2
 80033fa:	3202      	adds	r2, #2
 80033fc:	fa01 f202 	lsl.w	r2, r1, r2
 8003400:	4293      	cmp	r3, r2
 8003402:	d1df      	bne.n	80033c4 <Init_PIN+0xb0>
					while( ( ( GPIOA->CRH & ( 3 << ( ( PIN - 8 ) * 4) ) ) != ( Config_IO << ( ( PIN - 8 ) * 4) ) )  ||  ( ( GPIOA->CRH & ( 3  << ( ( ( PIN - 8 ) * 4) + 2 ) ) ) != ( Mode  << ( ( ( PIN - 8 ) * 4) + 2 )  ) ) ); // wait set Bits Mode And CNF(In Register CRH)                                             
				}
				else{
				    while(1);
				};
				break;
 8003404:	e33a      	b.n	8003a7c <Init_PIN+0x768>
					GPIOA->CRL &= ~( 3  << ( ( PIN * 4) + 2 )  ); // Config Bit CNF(In Register CRL) for Config Mode == 0
					GPIOA->CRL |= ( Config_IO << (PIN * 4)  ); // Config Bit Mode(In Register CRL) 
					GPIOA->CRL |= ( Mode  << ( ( PIN * 4) + 2 )  ); // Config Bit CNF(In Register CRL) for Config Mode 
					while( ( ( GPIOA->CRL & ( 3 << (PIN * 4) ) ) != ( Config_IO << (PIN * 4) ) )  ||  ( ( GPIOA->CRL & ( 3  << ( ( PIN * 4) + 2 ) ) ) != ( Mode  << ( ( PIN * 4) + 2 )  ) ) ); // wait set Bits Mode And CNF(In Register CRL)
				}
				else if( (PIN >= 8) && (PIN <= 15) ){ // Number Pin Between 8 And 15
 8003406:	79bb      	ldrb	r3, [r7, #6]
 8003408:	2b07      	cmp	r3, #7
 800340a:	d958      	bls.n	80034be <Init_PIN+0x1aa>
 800340c:	79bb      	ldrb	r3, [r7, #6]
 800340e:	2b0f      	cmp	r3, #15
 8003410:	d855      	bhi.n	80034be <Init_PIN+0x1aa>
					GPIOA->CRH &=  ~( 3 << ( ( PIN - 8 ) * 4) ); // Config Bit Mode(In Register CRH) == 0
 8003412:	4985      	ldr	r1, [pc, #532]	; (8003628 <Init_PIN+0x314>)
 8003414:	4b84      	ldr	r3, [pc, #528]	; (8003628 <Init_PIN+0x314>)
 8003416:	685b      	ldr	r3, [r3, #4]
 8003418:	79ba      	ldrb	r2, [r7, #6]
 800341a:	3a08      	subs	r2, #8
 800341c:	0092      	lsls	r2, r2, #2
 800341e:	2003      	movs	r0, #3
 8003420:	fa00 f202 	lsl.w	r2, r0, r2
 8003424:	43d2      	mvns	r2, r2
 8003426:	4013      	ands	r3, r2
 8003428:	604b      	str	r3, [r1, #4]
					GPIOA->CRH &= ~( 3  << ( ( ( PIN - 8 ) * 4) + 2 )  ); // Config Bit CNF(In Register CRH) for Config Mode == 0
 800342a:	497f      	ldr	r1, [pc, #508]	; (8003628 <Init_PIN+0x314>)
 800342c:	4b7e      	ldr	r3, [pc, #504]	; (8003628 <Init_PIN+0x314>)
 800342e:	685b      	ldr	r3, [r3, #4]
 8003430:	79ba      	ldrb	r2, [r7, #6]
 8003432:	3a08      	subs	r2, #8
 8003434:	0092      	lsls	r2, r2, #2
 8003436:	3202      	adds	r2, #2
 8003438:	2003      	movs	r0, #3
 800343a:	fa00 f202 	lsl.w	r2, r0, r2
 800343e:	43d2      	mvns	r2, r2
 8003440:	4013      	ands	r3, r2
 8003442:	604b      	str	r3, [r1, #4]
					GPIOA->CRH |= ( Config_IO << ( (PIN - 8) * 4)  ); // Config Bit Mode(In Register CRH) 
 8003444:	4878      	ldr	r0, [pc, #480]	; (8003628 <Init_PIN+0x314>)
 8003446:	4b78      	ldr	r3, [pc, #480]	; (8003628 <Init_PIN+0x314>)
 8003448:	685b      	ldr	r3, [r3, #4]
 800344a:	7979      	ldrb	r1, [r7, #5]
 800344c:	79ba      	ldrb	r2, [r7, #6]
 800344e:	3a08      	subs	r2, #8
 8003450:	0092      	lsls	r2, r2, #2
 8003452:	fa01 f202 	lsl.w	r2, r1, r2
 8003456:	4313      	orrs	r3, r2
 8003458:	6043      	str	r3, [r0, #4]
					GPIOA->CRH |= ( Mode  << ( ( ( PIN - 8 ) * 4) + 2 )  ); // Config Bit CNF(In Register CRH) for Config Mode 
 800345a:	4873      	ldr	r0, [pc, #460]	; (8003628 <Init_PIN+0x314>)
 800345c:	4b72      	ldr	r3, [pc, #456]	; (8003628 <Init_PIN+0x314>)
 800345e:	685b      	ldr	r3, [r3, #4]
 8003460:	7939      	ldrb	r1, [r7, #4]
 8003462:	79ba      	ldrb	r2, [r7, #6]
 8003464:	3a08      	subs	r2, #8
 8003466:	0092      	lsls	r2, r2, #2
 8003468:	3202      	adds	r2, #2
 800346a:	fa01 f202 	lsl.w	r2, r1, r2
 800346e:	4313      	orrs	r3, r2
 8003470:	6043      	str	r3, [r0, #4]
					while( ( ( GPIOA->CRH & ( 3 << ( ( PIN - 8 ) * 4) ) ) != ( Config_IO << ( ( PIN - 8 ) * 4) ) )  ||  ( ( GPIOA->CRH & ( 3  << ( ( ( PIN - 8 ) * 4) + 2 ) ) ) != ( Mode  << ( ( ( PIN - 8 ) * 4) + 2 )  ) ) ); // wait set Bits Mode And CNF(In Register CRH)                                             
 8003472:	bf00      	nop
 8003474:	4b6c      	ldr	r3, [pc, #432]	; (8003628 <Init_PIN+0x314>)
 8003476:	685b      	ldr	r3, [r3, #4]
 8003478:	79ba      	ldrb	r2, [r7, #6]
 800347a:	3a08      	subs	r2, #8
 800347c:	0092      	lsls	r2, r2, #2
 800347e:	2103      	movs	r1, #3
 8003480:	fa01 f202 	lsl.w	r2, r1, r2
 8003484:	4013      	ands	r3, r2
 8003486:	7979      	ldrb	r1, [r7, #5]
 8003488:	79ba      	ldrb	r2, [r7, #6]
 800348a:	3a08      	subs	r2, #8
 800348c:	0092      	lsls	r2, r2, #2
 800348e:	fa01 f202 	lsl.w	r2, r1, r2
 8003492:	4293      	cmp	r3, r2
 8003494:	d1ee      	bne.n	8003474 <Init_PIN+0x160>
 8003496:	4b64      	ldr	r3, [pc, #400]	; (8003628 <Init_PIN+0x314>)
 8003498:	685b      	ldr	r3, [r3, #4]
 800349a:	79ba      	ldrb	r2, [r7, #6]
 800349c:	3a08      	subs	r2, #8
 800349e:	0092      	lsls	r2, r2, #2
 80034a0:	3202      	adds	r2, #2
 80034a2:	2103      	movs	r1, #3
 80034a4:	fa01 f202 	lsl.w	r2, r1, r2
 80034a8:	4013      	ands	r3, r2
 80034aa:	7939      	ldrb	r1, [r7, #4]
 80034ac:	79ba      	ldrb	r2, [r7, #6]
 80034ae:	3a08      	subs	r2, #8
 80034b0:	0092      	lsls	r2, r2, #2
 80034b2:	3202      	adds	r2, #2
 80034b4:	fa01 f202 	lsl.w	r2, r1, r2
 80034b8:	4293      	cmp	r3, r2
 80034ba:	d1db      	bne.n	8003474 <Init_PIN+0x160>
					GPIOA->CRL &= ~( 3  << ( ( PIN * 4) + 2 )  ); // Config Bit CNF(In Register CRL) for Config Mode == 0
					GPIOA->CRL |= ( Config_IO << (PIN * 4)  ); // Config Bit Mode(In Register CRL) 
					GPIOA->CRL |= ( Mode  << ( ( PIN * 4) + 2 )  ); // Config Bit CNF(In Register CRL) for Config Mode 
					while( ( ( GPIOA->CRL & ( 3 << (PIN * 4) ) ) != ( Config_IO << (PIN * 4) ) )  ||  ( ( GPIOA->CRL & ( 3  << ( ( PIN * 4) + 2 ) ) ) != ( Mode  << ( ( PIN * 4) + 2 )  ) ) ); // wait set Bits Mode And CNF(In Register CRL)
				}
				else if( (PIN >= 8) && (PIN <= 15) ){ // Number Pin Between 8 And 15
 80034bc:	e000      	b.n	80034c0 <Init_PIN+0x1ac>
					GPIOA->CRH |= ( Config_IO << ( (PIN - 8) * 4)  ); // Config Bit Mode(In Register CRH) 
					GPIOA->CRH |= ( Mode  << ( ( ( PIN - 8 ) * 4) + 2 )  ); // Config Bit CNF(In Register CRH) for Config Mode 
					while( ( ( GPIOA->CRH & ( 3 << ( ( PIN - 8 ) * 4) ) ) != ( Config_IO << ( ( PIN - 8 ) * 4) ) )  ||  ( ( GPIOA->CRH & ( 3  << ( ( ( PIN - 8 ) * 4) + 2 ) ) ) != ( Mode  << ( ( ( PIN - 8 ) * 4) + 2 )  ) ) ); // wait set Bits Mode And CNF(In Register CRH)                                             
				}
				else{
				    while(1);
 80034be:	e7fe      	b.n	80034be <Init_PIN+0x1aa>
				};
				break;
 80034c0:	e2dc      	b.n	8003a7c <Init_PIN+0x768>
				
			case 2: //PORT is B
				while( ( (Config_IO < 0) || (Config_IO > 3) ) || ( (Mode <0) || (Mode > 3) ) ); // check Config_IO And Mode Not INvalid
 80034c2:	797b      	ldrb	r3, [r7, #5]
 80034c4:	2b03      	cmp	r3, #3
 80034c6:	d8fc      	bhi.n	80034c2 <Init_PIN+0x1ae>
 80034c8:	793b      	ldrb	r3, [r7, #4]
 80034ca:	2b03      	cmp	r3, #3
 80034cc:	d8f9      	bhi.n	80034c2 <Init_PIN+0x1ae>
				if( (PIN >= 0) && (PIN <= 7) ){ // Number Pin Between 0 And 7
 80034ce:	79bb      	ldrb	r3, [r7, #6]
 80034d0:	2b07      	cmp	r3, #7
 80034d2:	d84d      	bhi.n	8003570 <Init_PIN+0x25c>
					GPIOB->CRL &=  ~( 3 << (PIN * 4) ); // Config Bit Mode(In Register CRL) == 0
 80034d4:	4955      	ldr	r1, [pc, #340]	; (800362c <Init_PIN+0x318>)
 80034d6:	4b55      	ldr	r3, [pc, #340]	; (800362c <Init_PIN+0x318>)
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	79ba      	ldrb	r2, [r7, #6]
 80034dc:	0092      	lsls	r2, r2, #2
 80034de:	2003      	movs	r0, #3
 80034e0:	fa00 f202 	lsl.w	r2, r0, r2
 80034e4:	43d2      	mvns	r2, r2
 80034e6:	4013      	ands	r3, r2
 80034e8:	600b      	str	r3, [r1, #0]
					GPIOB->CRL &= ~( 3  << ( ( PIN * 4) + 2 )  ); // Config Bit CNF(In Register CRL) for Config Mode == 0
 80034ea:	4950      	ldr	r1, [pc, #320]	; (800362c <Init_PIN+0x318>)
 80034ec:	4b4f      	ldr	r3, [pc, #316]	; (800362c <Init_PIN+0x318>)
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	79ba      	ldrb	r2, [r7, #6]
 80034f2:	0092      	lsls	r2, r2, #2
 80034f4:	3202      	adds	r2, #2
 80034f6:	2003      	movs	r0, #3
 80034f8:	fa00 f202 	lsl.w	r2, r0, r2
 80034fc:	43d2      	mvns	r2, r2
 80034fe:	4013      	ands	r3, r2
 8003500:	600b      	str	r3, [r1, #0]
					GPIOB->CRL |= ( Config_IO << (PIN * 4)  ); // Config Bit Mode(In Register CRL) 
 8003502:	484a      	ldr	r0, [pc, #296]	; (800362c <Init_PIN+0x318>)
 8003504:	4b49      	ldr	r3, [pc, #292]	; (800362c <Init_PIN+0x318>)
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	7979      	ldrb	r1, [r7, #5]
 800350a:	79ba      	ldrb	r2, [r7, #6]
 800350c:	0092      	lsls	r2, r2, #2
 800350e:	fa01 f202 	lsl.w	r2, r1, r2
 8003512:	4313      	orrs	r3, r2
 8003514:	6003      	str	r3, [r0, #0]
					GPIOB->CRL |= ( Mode  << ( ( PIN * 4) + 2 )  ); // Config Bit CNF(In Register CRL) for Config Mode
 8003516:	4845      	ldr	r0, [pc, #276]	; (800362c <Init_PIN+0x318>)
 8003518:	4b44      	ldr	r3, [pc, #272]	; (800362c <Init_PIN+0x318>)
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	7939      	ldrb	r1, [r7, #4]
 800351e:	79ba      	ldrb	r2, [r7, #6]
 8003520:	0092      	lsls	r2, r2, #2
 8003522:	3202      	adds	r2, #2
 8003524:	fa01 f202 	lsl.w	r2, r1, r2
 8003528:	4313      	orrs	r3, r2
 800352a:	6003      	str	r3, [r0, #0]
					while( ( ( GPIOB->CRL & ( 3 << (PIN * 4) ) ) != ( Config_IO << (PIN * 4) ) )  ||  ( ( GPIOB->CRL & ( 3  << ( ( PIN * 4) + 2 ) ) ) != ( Mode  << ( ( PIN * 4) + 2 )  ) ) ); // wait set Bits Mode And CNF(In Register CRL)					
 800352c:	bf00      	nop
 800352e:	4b3f      	ldr	r3, [pc, #252]	; (800362c <Init_PIN+0x318>)
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	79ba      	ldrb	r2, [r7, #6]
 8003534:	0092      	lsls	r2, r2, #2
 8003536:	2103      	movs	r1, #3
 8003538:	fa01 f202 	lsl.w	r2, r1, r2
 800353c:	4013      	ands	r3, r2
 800353e:	7979      	ldrb	r1, [r7, #5]
 8003540:	79ba      	ldrb	r2, [r7, #6]
 8003542:	0092      	lsls	r2, r2, #2
 8003544:	fa01 f202 	lsl.w	r2, r1, r2
 8003548:	4293      	cmp	r3, r2
 800354a:	d1f0      	bne.n	800352e <Init_PIN+0x21a>
 800354c:	4b37      	ldr	r3, [pc, #220]	; (800362c <Init_PIN+0x318>)
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	79ba      	ldrb	r2, [r7, #6]
 8003552:	0092      	lsls	r2, r2, #2
 8003554:	3202      	adds	r2, #2
 8003556:	2103      	movs	r1, #3
 8003558:	fa01 f202 	lsl.w	r2, r1, r2
 800355c:	4013      	ands	r3, r2
 800355e:	7939      	ldrb	r1, [r7, #4]
 8003560:	79ba      	ldrb	r2, [r7, #6]
 8003562:	0092      	lsls	r2, r2, #2
 8003564:	3202      	adds	r2, #2
 8003566:	fa01 f202 	lsl.w	r2, r1, r2
 800356a:	4293      	cmp	r3, r2
 800356c:	d1df      	bne.n	800352e <Init_PIN+0x21a>
					while( ( ( GPIOB->CRH & ( 3 << ( ( PIN - 8 ) * 4) ) ) != ( Config_IO << ( ( PIN - 8 ) * 4) ) )  ||  ( ( GPIOB->CRH & ( 3  << ( ( ( PIN - 8 ) * 4) + 2 ) ) ) != ( Mode  << ( ( ( PIN - 8 ) * 4) + 2 )  ) ) ); // wait set Bits Mode And CNF(In Register CRH)             					
				}
				else{
				    while(1);
				};
				break;
 800356e:	e285      	b.n	8003a7c <Init_PIN+0x768>
					GPIOB->CRL &= ~( 3  << ( ( PIN * 4) + 2 )  ); // Config Bit CNF(In Register CRL) for Config Mode == 0
					GPIOB->CRL |= ( Config_IO << (PIN * 4)  ); // Config Bit Mode(In Register CRL) 
					GPIOB->CRL |= ( Mode  << ( ( PIN * 4) + 2 )  ); // Config Bit CNF(In Register CRL) for Config Mode
					while( ( ( GPIOB->CRL & ( 3 << (PIN * 4) ) ) != ( Config_IO << (PIN * 4) ) )  ||  ( ( GPIOB->CRL & ( 3  << ( ( PIN * 4) + 2 ) ) ) != ( Mode  << ( ( PIN * 4) + 2 )  ) ) ); // wait set Bits Mode And CNF(In Register CRL)					
				}
				else if( (PIN >= 8) && (PIN <= 15) ){ // Number Pin Between 8 And 15
 8003570:	79bb      	ldrb	r3, [r7, #6]
 8003572:	2b07      	cmp	r3, #7
 8003574:	d95c      	bls.n	8003630 <Init_PIN+0x31c>
 8003576:	79bb      	ldrb	r3, [r7, #6]
 8003578:	2b0f      	cmp	r3, #15
 800357a:	d859      	bhi.n	8003630 <Init_PIN+0x31c>
					GPIOB->CRH &=  ~( 3 << ( ( PIN - 8 ) * 4) ); // Config Bit Mode(In Register CRH) == 0
 800357c:	492b      	ldr	r1, [pc, #172]	; (800362c <Init_PIN+0x318>)
 800357e:	4b2b      	ldr	r3, [pc, #172]	; (800362c <Init_PIN+0x318>)
 8003580:	685b      	ldr	r3, [r3, #4]
 8003582:	79ba      	ldrb	r2, [r7, #6]
 8003584:	3a08      	subs	r2, #8
 8003586:	0092      	lsls	r2, r2, #2
 8003588:	2003      	movs	r0, #3
 800358a:	fa00 f202 	lsl.w	r2, r0, r2
 800358e:	43d2      	mvns	r2, r2
 8003590:	4013      	ands	r3, r2
 8003592:	604b      	str	r3, [r1, #4]
					GPIOB->CRH &= ~( 3  << ( ( ( PIN - 8 ) * 4) + 2 )  ); // Config Bit CNF(In Register CRH) for Config Mode == 0
 8003594:	4925      	ldr	r1, [pc, #148]	; (800362c <Init_PIN+0x318>)
 8003596:	4b25      	ldr	r3, [pc, #148]	; (800362c <Init_PIN+0x318>)
 8003598:	685b      	ldr	r3, [r3, #4]
 800359a:	79ba      	ldrb	r2, [r7, #6]
 800359c:	3a08      	subs	r2, #8
 800359e:	0092      	lsls	r2, r2, #2
 80035a0:	3202      	adds	r2, #2
 80035a2:	2003      	movs	r0, #3
 80035a4:	fa00 f202 	lsl.w	r2, r0, r2
 80035a8:	43d2      	mvns	r2, r2
 80035aa:	4013      	ands	r3, r2
 80035ac:	604b      	str	r3, [r1, #4]
					GPIOB->CRH |= ( Config_IO << ( (PIN - 8) * 4)  ); // Config Bit Mode(In Register CRH) 
 80035ae:	481f      	ldr	r0, [pc, #124]	; (800362c <Init_PIN+0x318>)
 80035b0:	4b1e      	ldr	r3, [pc, #120]	; (800362c <Init_PIN+0x318>)
 80035b2:	685b      	ldr	r3, [r3, #4]
 80035b4:	7979      	ldrb	r1, [r7, #5]
 80035b6:	79ba      	ldrb	r2, [r7, #6]
 80035b8:	3a08      	subs	r2, #8
 80035ba:	0092      	lsls	r2, r2, #2
 80035bc:	fa01 f202 	lsl.w	r2, r1, r2
 80035c0:	4313      	orrs	r3, r2
 80035c2:	6043      	str	r3, [r0, #4]
					GPIOB->CRH |= ( Mode  << ( ( ( PIN - 8 ) * 4) + 2 )  ); // Config Bit CNF(In Register CRH) for Config Mode 
 80035c4:	4819      	ldr	r0, [pc, #100]	; (800362c <Init_PIN+0x318>)
 80035c6:	4b19      	ldr	r3, [pc, #100]	; (800362c <Init_PIN+0x318>)
 80035c8:	685b      	ldr	r3, [r3, #4]
 80035ca:	7939      	ldrb	r1, [r7, #4]
 80035cc:	79ba      	ldrb	r2, [r7, #6]
 80035ce:	3a08      	subs	r2, #8
 80035d0:	0092      	lsls	r2, r2, #2
 80035d2:	3202      	adds	r2, #2
 80035d4:	fa01 f202 	lsl.w	r2, r1, r2
 80035d8:	4313      	orrs	r3, r2
 80035da:	6043      	str	r3, [r0, #4]
					while( ( ( GPIOB->CRH & ( 3 << ( ( PIN - 8 ) * 4) ) ) != ( Config_IO << ( ( PIN - 8 ) * 4) ) )  ||  ( ( GPIOB->CRH & ( 3  << ( ( ( PIN - 8 ) * 4) + 2 ) ) ) != ( Mode  << ( ( ( PIN - 8 ) * 4) + 2 )  ) ) ); // wait set Bits Mode And CNF(In Register CRH)             					
 80035dc:	bf00      	nop
 80035de:	4b13      	ldr	r3, [pc, #76]	; (800362c <Init_PIN+0x318>)
 80035e0:	685b      	ldr	r3, [r3, #4]
 80035e2:	79ba      	ldrb	r2, [r7, #6]
 80035e4:	3a08      	subs	r2, #8
 80035e6:	0092      	lsls	r2, r2, #2
 80035e8:	2103      	movs	r1, #3
 80035ea:	fa01 f202 	lsl.w	r2, r1, r2
 80035ee:	4013      	ands	r3, r2
 80035f0:	7979      	ldrb	r1, [r7, #5]
 80035f2:	79ba      	ldrb	r2, [r7, #6]
 80035f4:	3a08      	subs	r2, #8
 80035f6:	0092      	lsls	r2, r2, #2
 80035f8:	fa01 f202 	lsl.w	r2, r1, r2
 80035fc:	4293      	cmp	r3, r2
 80035fe:	d1ee      	bne.n	80035de <Init_PIN+0x2ca>
 8003600:	4b0a      	ldr	r3, [pc, #40]	; (800362c <Init_PIN+0x318>)
 8003602:	685b      	ldr	r3, [r3, #4]
 8003604:	79ba      	ldrb	r2, [r7, #6]
 8003606:	3a08      	subs	r2, #8
 8003608:	0092      	lsls	r2, r2, #2
 800360a:	3202      	adds	r2, #2
 800360c:	2103      	movs	r1, #3
 800360e:	fa01 f202 	lsl.w	r2, r1, r2
 8003612:	4013      	ands	r3, r2
 8003614:	7939      	ldrb	r1, [r7, #4]
 8003616:	79ba      	ldrb	r2, [r7, #6]
 8003618:	3a08      	subs	r2, #8
 800361a:	0092      	lsls	r2, r2, #2
 800361c:	3202      	adds	r2, #2
 800361e:	fa01 f202 	lsl.w	r2, r1, r2
 8003622:	4293      	cmp	r3, r2
 8003624:	d1db      	bne.n	80035de <Init_PIN+0x2ca>
					GPIOB->CRL &= ~( 3  << ( ( PIN * 4) + 2 )  ); // Config Bit CNF(In Register CRL) for Config Mode == 0
					GPIOB->CRL |= ( Config_IO << (PIN * 4)  ); // Config Bit Mode(In Register CRL) 
					GPIOB->CRL |= ( Mode  << ( ( PIN * 4) + 2 )  ); // Config Bit CNF(In Register CRL) for Config Mode
					while( ( ( GPIOB->CRL & ( 3 << (PIN * 4) ) ) != ( Config_IO << (PIN * 4) ) )  ||  ( ( GPIOB->CRL & ( 3  << ( ( PIN * 4) + 2 ) ) ) != ( Mode  << ( ( PIN * 4) + 2 )  ) ) ); // wait set Bits Mode And CNF(In Register CRL)					
				}
				else if( (PIN >= 8) && (PIN <= 15) ){ // Number Pin Between 8 And 15
 8003626:	e004      	b.n	8003632 <Init_PIN+0x31e>
 8003628:	40010800 	.word	0x40010800
 800362c:	40010c00 	.word	0x40010c00
					GPIOB->CRH |= ( Config_IO << ( (PIN - 8) * 4)  ); // Config Bit Mode(In Register CRH) 
					GPIOB->CRH |= ( Mode  << ( ( ( PIN - 8 ) * 4) + 2 )  ); // Config Bit CNF(In Register CRH) for Config Mode 
					while( ( ( GPIOB->CRH & ( 3 << ( ( PIN - 8 ) * 4) ) ) != ( Config_IO << ( ( PIN - 8 ) * 4) ) )  ||  ( ( GPIOB->CRH & ( 3  << ( ( ( PIN - 8 ) * 4) + 2 ) ) ) != ( Mode  << ( ( ( PIN - 8 ) * 4) + 2 )  ) ) ); // wait set Bits Mode And CNF(In Register CRH)             					
				}
				else{
				    while(1);
 8003630:	e7fe      	b.n	8003630 <Init_PIN+0x31c>
				};
				break;
 8003632:	e223      	b.n	8003a7c <Init_PIN+0x768>
				
			case 3: //PORT is C
				while( ( (Config_IO < 0) || (Config_IO > 3) ) || ( (Mode <0) || (Mode > 3) ) ); // check Config_IO And Mode Not INvalid
 8003634:	797b      	ldrb	r3, [r7, #5]
 8003636:	2b03      	cmp	r3, #3
 8003638:	d8fc      	bhi.n	8003634 <Init_PIN+0x320>
 800363a:	793b      	ldrb	r3, [r7, #4]
 800363c:	2b03      	cmp	r3, #3
 800363e:	d8f9      	bhi.n	8003634 <Init_PIN+0x320>
				if( (PIN >= 0) && (PIN <= 7) ){ // Number Pin Between 0 And 7
 8003640:	79bb      	ldrb	r3, [r7, #6]
 8003642:	2b07      	cmp	r3, #7
 8003644:	d84d      	bhi.n	80036e2 <Init_PIN+0x3ce>
					GPIOC->CRL &=  ~( 3 << (PIN * 4) ); // Config Bit Mode(In Register CRL) == 0
 8003646:	49af      	ldr	r1, [pc, #700]	; (8003904 <Init_PIN+0x5f0>)
 8003648:	4bae      	ldr	r3, [pc, #696]	; (8003904 <Init_PIN+0x5f0>)
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	79ba      	ldrb	r2, [r7, #6]
 800364e:	0092      	lsls	r2, r2, #2
 8003650:	2003      	movs	r0, #3
 8003652:	fa00 f202 	lsl.w	r2, r0, r2
 8003656:	43d2      	mvns	r2, r2
 8003658:	4013      	ands	r3, r2
 800365a:	600b      	str	r3, [r1, #0]
					GPIOC->CRL &= ~( 3  << ( ( PIN * 4) + 2 )  ); // Config Bit CNF(In Register CRL) for Config Mode == 0
 800365c:	49a9      	ldr	r1, [pc, #676]	; (8003904 <Init_PIN+0x5f0>)
 800365e:	4ba9      	ldr	r3, [pc, #676]	; (8003904 <Init_PIN+0x5f0>)
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	79ba      	ldrb	r2, [r7, #6]
 8003664:	0092      	lsls	r2, r2, #2
 8003666:	3202      	adds	r2, #2
 8003668:	2003      	movs	r0, #3
 800366a:	fa00 f202 	lsl.w	r2, r0, r2
 800366e:	43d2      	mvns	r2, r2
 8003670:	4013      	ands	r3, r2
 8003672:	600b      	str	r3, [r1, #0]
					GPIOC->CRL |= ( Config_IO << (PIN * 4)  ); // Config Bit Mode(In Register CRL) 
 8003674:	48a3      	ldr	r0, [pc, #652]	; (8003904 <Init_PIN+0x5f0>)
 8003676:	4ba3      	ldr	r3, [pc, #652]	; (8003904 <Init_PIN+0x5f0>)
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	7979      	ldrb	r1, [r7, #5]
 800367c:	79ba      	ldrb	r2, [r7, #6]
 800367e:	0092      	lsls	r2, r2, #2
 8003680:	fa01 f202 	lsl.w	r2, r1, r2
 8003684:	4313      	orrs	r3, r2
 8003686:	6003      	str	r3, [r0, #0]
					GPIOC->CRL |= ( Mode  << ( ( PIN * 4) + 2 )  ); // Config Bit CNF(In Register CRL) for Config Mode 
 8003688:	489e      	ldr	r0, [pc, #632]	; (8003904 <Init_PIN+0x5f0>)
 800368a:	4b9e      	ldr	r3, [pc, #632]	; (8003904 <Init_PIN+0x5f0>)
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	7939      	ldrb	r1, [r7, #4]
 8003690:	79ba      	ldrb	r2, [r7, #6]
 8003692:	0092      	lsls	r2, r2, #2
 8003694:	3202      	adds	r2, #2
 8003696:	fa01 f202 	lsl.w	r2, r1, r2
 800369a:	4313      	orrs	r3, r2
 800369c:	6003      	str	r3, [r0, #0]
					while( ( ( GPIOC->CRL & ( 3 << (PIN * 4) ) ) != ( Config_IO << (PIN * 4) ) )  ||  ( ( GPIOC->CRL & ( 3  << ( ( PIN * 4) + 2 ) ) ) != ( Mode  << ( ( PIN * 4) + 2 )  ) ) ); // wait set Bits Mode And CNF(In Register CRL)
 800369e:	bf00      	nop
 80036a0:	4b98      	ldr	r3, [pc, #608]	; (8003904 <Init_PIN+0x5f0>)
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	79ba      	ldrb	r2, [r7, #6]
 80036a6:	0092      	lsls	r2, r2, #2
 80036a8:	2103      	movs	r1, #3
 80036aa:	fa01 f202 	lsl.w	r2, r1, r2
 80036ae:	4013      	ands	r3, r2
 80036b0:	7979      	ldrb	r1, [r7, #5]
 80036b2:	79ba      	ldrb	r2, [r7, #6]
 80036b4:	0092      	lsls	r2, r2, #2
 80036b6:	fa01 f202 	lsl.w	r2, r1, r2
 80036ba:	4293      	cmp	r3, r2
 80036bc:	d1f0      	bne.n	80036a0 <Init_PIN+0x38c>
 80036be:	4b91      	ldr	r3, [pc, #580]	; (8003904 <Init_PIN+0x5f0>)
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	79ba      	ldrb	r2, [r7, #6]
 80036c4:	0092      	lsls	r2, r2, #2
 80036c6:	3202      	adds	r2, #2
 80036c8:	2103      	movs	r1, #3
 80036ca:	fa01 f202 	lsl.w	r2, r1, r2
 80036ce:	4013      	ands	r3, r2
 80036d0:	7939      	ldrb	r1, [r7, #4]
 80036d2:	79ba      	ldrb	r2, [r7, #6]
 80036d4:	0092      	lsls	r2, r2, #2
 80036d6:	3202      	adds	r2, #2
 80036d8:	fa01 f202 	lsl.w	r2, r1, r2
 80036dc:	4293      	cmp	r3, r2
 80036de:	d1df      	bne.n	80036a0 <Init_PIN+0x38c>
					while( ( ( GPIOC->CRH & ( 3 << ( ( PIN - 8 ) * 4) ) ) != ( Config_IO << ( ( PIN - 8 ) * 4) ) )  ||  ( ( GPIOC->CRH & ( 3  << ( ( ( PIN - 8 ) * 4) + 2 ) ) ) != ( Mode  << ( ( ( PIN - 8 ) * 4) + 2 )  ) ) ); // wait set Bits Mode And CNF(In Register CRH)             										
				}
				else{
				    while(1);
				};
				break;
 80036e0:	e1cc      	b.n	8003a7c <Init_PIN+0x768>
					GPIOC->CRL &= ~( 3  << ( ( PIN * 4) + 2 )  ); // Config Bit CNF(In Register CRL) for Config Mode == 0
					GPIOC->CRL |= ( Config_IO << (PIN * 4)  ); // Config Bit Mode(In Register CRL) 
					GPIOC->CRL |= ( Mode  << ( ( PIN * 4) + 2 )  ); // Config Bit CNF(In Register CRL) for Config Mode 
					while( ( ( GPIOC->CRL & ( 3 << (PIN * 4) ) ) != ( Config_IO << (PIN * 4) ) )  ||  ( ( GPIOC->CRL & ( 3  << ( ( PIN * 4) + 2 ) ) ) != ( Mode  << ( ( PIN * 4) + 2 )  ) ) ); // wait set Bits Mode And CNF(In Register CRL)
				}
				else if( (PIN >= 8) && (PIN <= 15) ){ // Number Pin Between 8 And 15
 80036e2:	79bb      	ldrb	r3, [r7, #6]
 80036e4:	2b07      	cmp	r3, #7
 80036e6:	d958      	bls.n	800379a <Init_PIN+0x486>
 80036e8:	79bb      	ldrb	r3, [r7, #6]
 80036ea:	2b0f      	cmp	r3, #15
 80036ec:	d855      	bhi.n	800379a <Init_PIN+0x486>
					GPIOC->CRH &=  ~( 3 << ( ( PIN - 8 ) * 4) ); // Config Bit Mode(In Register CRH) == 0
 80036ee:	4985      	ldr	r1, [pc, #532]	; (8003904 <Init_PIN+0x5f0>)
 80036f0:	4b84      	ldr	r3, [pc, #528]	; (8003904 <Init_PIN+0x5f0>)
 80036f2:	685b      	ldr	r3, [r3, #4]
 80036f4:	79ba      	ldrb	r2, [r7, #6]
 80036f6:	3a08      	subs	r2, #8
 80036f8:	0092      	lsls	r2, r2, #2
 80036fa:	2003      	movs	r0, #3
 80036fc:	fa00 f202 	lsl.w	r2, r0, r2
 8003700:	43d2      	mvns	r2, r2
 8003702:	4013      	ands	r3, r2
 8003704:	604b      	str	r3, [r1, #4]
					GPIOC->CRH &= ~( 3  << ( ( ( PIN - 8 ) * 4) + 2 )  ); // Config Bit CNF(In Register CRH) for Config Mode == 0
 8003706:	497f      	ldr	r1, [pc, #508]	; (8003904 <Init_PIN+0x5f0>)
 8003708:	4b7e      	ldr	r3, [pc, #504]	; (8003904 <Init_PIN+0x5f0>)
 800370a:	685b      	ldr	r3, [r3, #4]
 800370c:	79ba      	ldrb	r2, [r7, #6]
 800370e:	3a08      	subs	r2, #8
 8003710:	0092      	lsls	r2, r2, #2
 8003712:	3202      	adds	r2, #2
 8003714:	2003      	movs	r0, #3
 8003716:	fa00 f202 	lsl.w	r2, r0, r2
 800371a:	43d2      	mvns	r2, r2
 800371c:	4013      	ands	r3, r2
 800371e:	604b      	str	r3, [r1, #4]
					GPIOC->CRH |= ( Config_IO << ( (PIN - 8) * 4)  ); // Config Bit Mode(Input or Output)(In Register CRH) 
 8003720:	4878      	ldr	r0, [pc, #480]	; (8003904 <Init_PIN+0x5f0>)
 8003722:	4b78      	ldr	r3, [pc, #480]	; (8003904 <Init_PIN+0x5f0>)
 8003724:	685b      	ldr	r3, [r3, #4]
 8003726:	7979      	ldrb	r1, [r7, #5]
 8003728:	79ba      	ldrb	r2, [r7, #6]
 800372a:	3a08      	subs	r2, #8
 800372c:	0092      	lsls	r2, r2, #2
 800372e:	fa01 f202 	lsl.w	r2, r1, r2
 8003732:	4313      	orrs	r3, r2
 8003734:	6043      	str	r3, [r0, #4]
					GPIOC->CRH |= ( Mode  << ( ( ( PIN - 8 ) * 4) + 2 )  ); // Config Bit CNF(In Register CRH) for Config Mode 
 8003736:	4873      	ldr	r0, [pc, #460]	; (8003904 <Init_PIN+0x5f0>)
 8003738:	4b72      	ldr	r3, [pc, #456]	; (8003904 <Init_PIN+0x5f0>)
 800373a:	685b      	ldr	r3, [r3, #4]
 800373c:	7939      	ldrb	r1, [r7, #4]
 800373e:	79ba      	ldrb	r2, [r7, #6]
 8003740:	3a08      	subs	r2, #8
 8003742:	0092      	lsls	r2, r2, #2
 8003744:	3202      	adds	r2, #2
 8003746:	fa01 f202 	lsl.w	r2, r1, r2
 800374a:	4313      	orrs	r3, r2
 800374c:	6043      	str	r3, [r0, #4]
					while( ( ( GPIOC->CRH & ( 3 << ( ( PIN - 8 ) * 4) ) ) != ( Config_IO << ( ( PIN - 8 ) * 4) ) )  ||  ( ( GPIOC->CRH & ( 3  << ( ( ( PIN - 8 ) * 4) + 2 ) ) ) != ( Mode  << ( ( ( PIN - 8 ) * 4) + 2 )  ) ) ); // wait set Bits Mode And CNF(In Register CRH)             										
 800374e:	bf00      	nop
 8003750:	4b6c      	ldr	r3, [pc, #432]	; (8003904 <Init_PIN+0x5f0>)
 8003752:	685b      	ldr	r3, [r3, #4]
 8003754:	79ba      	ldrb	r2, [r7, #6]
 8003756:	3a08      	subs	r2, #8
 8003758:	0092      	lsls	r2, r2, #2
 800375a:	2103      	movs	r1, #3
 800375c:	fa01 f202 	lsl.w	r2, r1, r2
 8003760:	4013      	ands	r3, r2
 8003762:	7979      	ldrb	r1, [r7, #5]
 8003764:	79ba      	ldrb	r2, [r7, #6]
 8003766:	3a08      	subs	r2, #8
 8003768:	0092      	lsls	r2, r2, #2
 800376a:	fa01 f202 	lsl.w	r2, r1, r2
 800376e:	4293      	cmp	r3, r2
 8003770:	d1ee      	bne.n	8003750 <Init_PIN+0x43c>
 8003772:	4b64      	ldr	r3, [pc, #400]	; (8003904 <Init_PIN+0x5f0>)
 8003774:	685b      	ldr	r3, [r3, #4]
 8003776:	79ba      	ldrb	r2, [r7, #6]
 8003778:	3a08      	subs	r2, #8
 800377a:	0092      	lsls	r2, r2, #2
 800377c:	3202      	adds	r2, #2
 800377e:	2103      	movs	r1, #3
 8003780:	fa01 f202 	lsl.w	r2, r1, r2
 8003784:	4013      	ands	r3, r2
 8003786:	7939      	ldrb	r1, [r7, #4]
 8003788:	79ba      	ldrb	r2, [r7, #6]
 800378a:	3a08      	subs	r2, #8
 800378c:	0092      	lsls	r2, r2, #2
 800378e:	3202      	adds	r2, #2
 8003790:	fa01 f202 	lsl.w	r2, r1, r2
 8003794:	4293      	cmp	r3, r2
 8003796:	d1db      	bne.n	8003750 <Init_PIN+0x43c>
					GPIOC->CRL &= ~( 3  << ( ( PIN * 4) + 2 )  ); // Config Bit CNF(In Register CRL) for Config Mode == 0
					GPIOC->CRL |= ( Config_IO << (PIN * 4)  ); // Config Bit Mode(In Register CRL) 
					GPIOC->CRL |= ( Mode  << ( ( PIN * 4) + 2 )  ); // Config Bit CNF(In Register CRL) for Config Mode 
					while( ( ( GPIOC->CRL & ( 3 << (PIN * 4) ) ) != ( Config_IO << (PIN * 4) ) )  ||  ( ( GPIOC->CRL & ( 3  << ( ( PIN * 4) + 2 ) ) ) != ( Mode  << ( ( PIN * 4) + 2 )  ) ) ); // wait set Bits Mode And CNF(In Register CRL)
				}
				else if( (PIN >= 8) && (PIN <= 15) ){ // Number Pin Between 8 And 15
 8003798:	e000      	b.n	800379c <Init_PIN+0x488>
					GPIOC->CRH |= ( Config_IO << ( (PIN - 8) * 4)  ); // Config Bit Mode(Input or Output)(In Register CRH) 
					GPIOC->CRH |= ( Mode  << ( ( ( PIN - 8 ) * 4) + 2 )  ); // Config Bit CNF(In Register CRH) for Config Mode 
					while( ( ( GPIOC->CRH & ( 3 << ( ( PIN - 8 ) * 4) ) ) != ( Config_IO << ( ( PIN - 8 ) * 4) ) )  ||  ( ( GPIOC->CRH & ( 3  << ( ( ( PIN - 8 ) * 4) + 2 ) ) ) != ( Mode  << ( ( ( PIN - 8 ) * 4) + 2 )  ) ) ); // wait set Bits Mode And CNF(In Register CRH)             										
				}
				else{
				    while(1);
 800379a:	e7fe      	b.n	800379a <Init_PIN+0x486>
				};
				break;
 800379c:	e16e      	b.n	8003a7c <Init_PIN+0x768>
			
			case 4: //PORT is D
				while( ( (Config_IO < 0) || (Config_IO > 3) ) || ( (Mode <0) || (Mode > 3) ) ); // check Config_IO And Mode Not INvalid
 800379e:	797b      	ldrb	r3, [r7, #5]
 80037a0:	2b03      	cmp	r3, #3
 80037a2:	d8fc      	bhi.n	800379e <Init_PIN+0x48a>
 80037a4:	793b      	ldrb	r3, [r7, #4]
 80037a6:	2b03      	cmp	r3, #3
 80037a8:	d8f9      	bhi.n	800379e <Init_PIN+0x48a>
				if( (PIN >= 0) && (PIN <= 7) ){ // Number Pin Between 0 And 7
 80037aa:	79bb      	ldrb	r3, [r7, #6]
 80037ac:	2b07      	cmp	r3, #7
 80037ae:	d84d      	bhi.n	800384c <Init_PIN+0x538>
					GPIOD->CRL &=  ~( 3 << (PIN * 4) ); // Config Bit Mode(In Register CRL) == 0
 80037b0:	4955      	ldr	r1, [pc, #340]	; (8003908 <Init_PIN+0x5f4>)
 80037b2:	4b55      	ldr	r3, [pc, #340]	; (8003908 <Init_PIN+0x5f4>)
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	79ba      	ldrb	r2, [r7, #6]
 80037b8:	0092      	lsls	r2, r2, #2
 80037ba:	2003      	movs	r0, #3
 80037bc:	fa00 f202 	lsl.w	r2, r0, r2
 80037c0:	43d2      	mvns	r2, r2
 80037c2:	4013      	ands	r3, r2
 80037c4:	600b      	str	r3, [r1, #0]
					GPIOD->CRL &= ~( 3  << ( ( PIN * 4) + 2 )  ); // Config Bit CNF(In Register CRL) for Config Mode == 0
 80037c6:	4950      	ldr	r1, [pc, #320]	; (8003908 <Init_PIN+0x5f4>)
 80037c8:	4b4f      	ldr	r3, [pc, #316]	; (8003908 <Init_PIN+0x5f4>)
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	79ba      	ldrb	r2, [r7, #6]
 80037ce:	0092      	lsls	r2, r2, #2
 80037d0:	3202      	adds	r2, #2
 80037d2:	2003      	movs	r0, #3
 80037d4:	fa00 f202 	lsl.w	r2, r0, r2
 80037d8:	43d2      	mvns	r2, r2
 80037da:	4013      	ands	r3, r2
 80037dc:	600b      	str	r3, [r1, #0]
					GPIOD->CRL |= ( Config_IO << (PIN * 4)  ); // Config Bit Mode(In Register CRL) 
 80037de:	484a      	ldr	r0, [pc, #296]	; (8003908 <Init_PIN+0x5f4>)
 80037e0:	4b49      	ldr	r3, [pc, #292]	; (8003908 <Init_PIN+0x5f4>)
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	7979      	ldrb	r1, [r7, #5]
 80037e6:	79ba      	ldrb	r2, [r7, #6]
 80037e8:	0092      	lsls	r2, r2, #2
 80037ea:	fa01 f202 	lsl.w	r2, r1, r2
 80037ee:	4313      	orrs	r3, r2
 80037f0:	6003      	str	r3, [r0, #0]
					GPIOD->CRL |= ( Mode  << ( ( PIN * 4) + 2 )  ); // Config Bit CNF(In Register CRL) for Config Mode 
 80037f2:	4845      	ldr	r0, [pc, #276]	; (8003908 <Init_PIN+0x5f4>)
 80037f4:	4b44      	ldr	r3, [pc, #272]	; (8003908 <Init_PIN+0x5f4>)
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	7939      	ldrb	r1, [r7, #4]
 80037fa:	79ba      	ldrb	r2, [r7, #6]
 80037fc:	0092      	lsls	r2, r2, #2
 80037fe:	3202      	adds	r2, #2
 8003800:	fa01 f202 	lsl.w	r2, r1, r2
 8003804:	4313      	orrs	r3, r2
 8003806:	6003      	str	r3, [r0, #0]
					while( ( ( GPIOD->CRL & ( 3 << (PIN * 4) ) ) != ( Config_IO << (PIN * 4) ) )  ||  ( ( GPIOD->CRL & ( 3  << ( ( PIN * 4) + 2 ) ) ) != ( Mode  << ( ( PIN * 4) + 2 )  ) ) ); // wait set Bits Mode And CNF(In Register CRL)
 8003808:	bf00      	nop
 800380a:	4b3f      	ldr	r3, [pc, #252]	; (8003908 <Init_PIN+0x5f4>)
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	79ba      	ldrb	r2, [r7, #6]
 8003810:	0092      	lsls	r2, r2, #2
 8003812:	2103      	movs	r1, #3
 8003814:	fa01 f202 	lsl.w	r2, r1, r2
 8003818:	4013      	ands	r3, r2
 800381a:	7979      	ldrb	r1, [r7, #5]
 800381c:	79ba      	ldrb	r2, [r7, #6]
 800381e:	0092      	lsls	r2, r2, #2
 8003820:	fa01 f202 	lsl.w	r2, r1, r2
 8003824:	4293      	cmp	r3, r2
 8003826:	d1f0      	bne.n	800380a <Init_PIN+0x4f6>
 8003828:	4b37      	ldr	r3, [pc, #220]	; (8003908 <Init_PIN+0x5f4>)
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	79ba      	ldrb	r2, [r7, #6]
 800382e:	0092      	lsls	r2, r2, #2
 8003830:	3202      	adds	r2, #2
 8003832:	2103      	movs	r1, #3
 8003834:	fa01 f202 	lsl.w	r2, r1, r2
 8003838:	4013      	ands	r3, r2
 800383a:	7939      	ldrb	r1, [r7, #4]
 800383c:	79ba      	ldrb	r2, [r7, #6]
 800383e:	0092      	lsls	r2, r2, #2
 8003840:	3202      	adds	r2, #2
 8003842:	fa01 f202 	lsl.w	r2, r1, r2
 8003846:	4293      	cmp	r3, r2
 8003848:	d1df      	bne.n	800380a <Init_PIN+0x4f6>
					while( ( ( GPIOD->CRH & ( 3 << ( ( PIN - 8 ) * 4) ) ) != ( Config_IO << ( ( PIN - 8 ) * 4) ) )  ||  ( ( GPIOD->CRH & ( 3  << ( ( ( PIN - 8 ) * 4) + 2 ) ) ) != ( Mode  << ( ( ( PIN - 8 ) * 4) + 2 )  ) ) ); // wait set Bits Mode And CNF(In Register CRH)             										
				}
				else{
				    while(1);
				};
				break;
 800384a:	e117      	b.n	8003a7c <Init_PIN+0x768>
					GPIOD->CRL &= ~( 3  << ( ( PIN * 4) + 2 )  ); // Config Bit CNF(In Register CRL) for Config Mode == 0
					GPIOD->CRL |= ( Config_IO << (PIN * 4)  ); // Config Bit Mode(In Register CRL) 
					GPIOD->CRL |= ( Mode  << ( ( PIN * 4) + 2 )  ); // Config Bit CNF(In Register CRL) for Config Mode 
					while( ( ( GPIOD->CRL & ( 3 << (PIN * 4) ) ) != ( Config_IO << (PIN * 4) ) )  ||  ( ( GPIOD->CRL & ( 3  << ( ( PIN * 4) + 2 ) ) ) != ( Mode  << ( ( PIN * 4) + 2 )  ) ) ); // wait set Bits Mode And CNF(In Register CRL)
				}
				else if( (PIN >= 8) && (PIN <= 15) ){ // Number Pin Between 8 And 15
 800384c:	79bb      	ldrb	r3, [r7, #6]
 800384e:	2b07      	cmp	r3, #7
 8003850:	d95c      	bls.n	800390c <Init_PIN+0x5f8>
 8003852:	79bb      	ldrb	r3, [r7, #6]
 8003854:	2b0f      	cmp	r3, #15
 8003856:	d859      	bhi.n	800390c <Init_PIN+0x5f8>
					GPIOD->CRH &=  ~( 3 << ( ( PIN - 8 ) * 4) ); // Config Bit Mode(In Register CRH) == 0
 8003858:	492b      	ldr	r1, [pc, #172]	; (8003908 <Init_PIN+0x5f4>)
 800385a:	4b2b      	ldr	r3, [pc, #172]	; (8003908 <Init_PIN+0x5f4>)
 800385c:	685b      	ldr	r3, [r3, #4]
 800385e:	79ba      	ldrb	r2, [r7, #6]
 8003860:	3a08      	subs	r2, #8
 8003862:	0092      	lsls	r2, r2, #2
 8003864:	2003      	movs	r0, #3
 8003866:	fa00 f202 	lsl.w	r2, r0, r2
 800386a:	43d2      	mvns	r2, r2
 800386c:	4013      	ands	r3, r2
 800386e:	604b      	str	r3, [r1, #4]
					GPIOD->CRH &= ~( 3  << ( ( ( PIN - 8 ) * 4) + 2 )  ); // Config Bit CNF(In Register CRH) for Config Mode == 0
 8003870:	4925      	ldr	r1, [pc, #148]	; (8003908 <Init_PIN+0x5f4>)
 8003872:	4b25      	ldr	r3, [pc, #148]	; (8003908 <Init_PIN+0x5f4>)
 8003874:	685b      	ldr	r3, [r3, #4]
 8003876:	79ba      	ldrb	r2, [r7, #6]
 8003878:	3a08      	subs	r2, #8
 800387a:	0092      	lsls	r2, r2, #2
 800387c:	3202      	adds	r2, #2
 800387e:	2003      	movs	r0, #3
 8003880:	fa00 f202 	lsl.w	r2, r0, r2
 8003884:	43d2      	mvns	r2, r2
 8003886:	4013      	ands	r3, r2
 8003888:	604b      	str	r3, [r1, #4]
					GPIOD->CRH |= ( Config_IO << ( (PIN - 8) * 4)  ); // Config Bit Mode(In Register CRH) 
 800388a:	481f      	ldr	r0, [pc, #124]	; (8003908 <Init_PIN+0x5f4>)
 800388c:	4b1e      	ldr	r3, [pc, #120]	; (8003908 <Init_PIN+0x5f4>)
 800388e:	685b      	ldr	r3, [r3, #4]
 8003890:	7979      	ldrb	r1, [r7, #5]
 8003892:	79ba      	ldrb	r2, [r7, #6]
 8003894:	3a08      	subs	r2, #8
 8003896:	0092      	lsls	r2, r2, #2
 8003898:	fa01 f202 	lsl.w	r2, r1, r2
 800389c:	4313      	orrs	r3, r2
 800389e:	6043      	str	r3, [r0, #4]
					GPIOD->CRH |= ( Mode  << ( ( ( PIN - 8 ) * 4) + 2 )  ); // Config Bit CNF(In Register CRH) for Config Mode 
 80038a0:	4819      	ldr	r0, [pc, #100]	; (8003908 <Init_PIN+0x5f4>)
 80038a2:	4b19      	ldr	r3, [pc, #100]	; (8003908 <Init_PIN+0x5f4>)
 80038a4:	685b      	ldr	r3, [r3, #4]
 80038a6:	7939      	ldrb	r1, [r7, #4]
 80038a8:	79ba      	ldrb	r2, [r7, #6]
 80038aa:	3a08      	subs	r2, #8
 80038ac:	0092      	lsls	r2, r2, #2
 80038ae:	3202      	adds	r2, #2
 80038b0:	fa01 f202 	lsl.w	r2, r1, r2
 80038b4:	4313      	orrs	r3, r2
 80038b6:	6043      	str	r3, [r0, #4]
					while( ( ( GPIOD->CRH & ( 3 << ( ( PIN - 8 ) * 4) ) ) != ( Config_IO << ( ( PIN - 8 ) * 4) ) )  ||  ( ( GPIOD->CRH & ( 3  << ( ( ( PIN - 8 ) * 4) + 2 ) ) ) != ( Mode  << ( ( ( PIN - 8 ) * 4) + 2 )  ) ) ); // wait set Bits Mode And CNF(In Register CRH)             										
 80038b8:	bf00      	nop
 80038ba:	4b13      	ldr	r3, [pc, #76]	; (8003908 <Init_PIN+0x5f4>)
 80038bc:	685b      	ldr	r3, [r3, #4]
 80038be:	79ba      	ldrb	r2, [r7, #6]
 80038c0:	3a08      	subs	r2, #8
 80038c2:	0092      	lsls	r2, r2, #2
 80038c4:	2103      	movs	r1, #3
 80038c6:	fa01 f202 	lsl.w	r2, r1, r2
 80038ca:	4013      	ands	r3, r2
 80038cc:	7979      	ldrb	r1, [r7, #5]
 80038ce:	79ba      	ldrb	r2, [r7, #6]
 80038d0:	3a08      	subs	r2, #8
 80038d2:	0092      	lsls	r2, r2, #2
 80038d4:	fa01 f202 	lsl.w	r2, r1, r2
 80038d8:	4293      	cmp	r3, r2
 80038da:	d1ee      	bne.n	80038ba <Init_PIN+0x5a6>
 80038dc:	4b0a      	ldr	r3, [pc, #40]	; (8003908 <Init_PIN+0x5f4>)
 80038de:	685b      	ldr	r3, [r3, #4]
 80038e0:	79ba      	ldrb	r2, [r7, #6]
 80038e2:	3a08      	subs	r2, #8
 80038e4:	0092      	lsls	r2, r2, #2
 80038e6:	3202      	adds	r2, #2
 80038e8:	2103      	movs	r1, #3
 80038ea:	fa01 f202 	lsl.w	r2, r1, r2
 80038ee:	4013      	ands	r3, r2
 80038f0:	7939      	ldrb	r1, [r7, #4]
 80038f2:	79ba      	ldrb	r2, [r7, #6]
 80038f4:	3a08      	subs	r2, #8
 80038f6:	0092      	lsls	r2, r2, #2
 80038f8:	3202      	adds	r2, #2
 80038fa:	fa01 f202 	lsl.w	r2, r1, r2
 80038fe:	4293      	cmp	r3, r2
 8003900:	d1db      	bne.n	80038ba <Init_PIN+0x5a6>
					GPIOD->CRL &= ~( 3  << ( ( PIN * 4) + 2 )  ); // Config Bit CNF(In Register CRL) for Config Mode == 0
					GPIOD->CRL |= ( Config_IO << (PIN * 4)  ); // Config Bit Mode(In Register CRL) 
					GPIOD->CRL |= ( Mode  << ( ( PIN * 4) + 2 )  ); // Config Bit CNF(In Register CRL) for Config Mode 
					while( ( ( GPIOD->CRL & ( 3 << (PIN * 4) ) ) != ( Config_IO << (PIN * 4) ) )  ||  ( ( GPIOD->CRL & ( 3  << ( ( PIN * 4) + 2 ) ) ) != ( Mode  << ( ( PIN * 4) + 2 )  ) ) ); // wait set Bits Mode And CNF(In Register CRL)
				}
				else if( (PIN >= 8) && (PIN <= 15) ){ // Number Pin Between 8 And 15
 8003902:	e004      	b.n	800390e <Init_PIN+0x5fa>
 8003904:	40011000 	.word	0x40011000
 8003908:	40011400 	.word	0x40011400
					GPIOD->CRH |= ( Config_IO << ( (PIN - 8) * 4)  ); // Config Bit Mode(In Register CRH) 
					GPIOD->CRH |= ( Mode  << ( ( ( PIN - 8 ) * 4) + 2 )  ); // Config Bit CNF(In Register CRH) for Config Mode 
					while( ( ( GPIOD->CRH & ( 3 << ( ( PIN - 8 ) * 4) ) ) != ( Config_IO << ( ( PIN - 8 ) * 4) ) )  ||  ( ( GPIOD->CRH & ( 3  << ( ( ( PIN - 8 ) * 4) + 2 ) ) ) != ( Mode  << ( ( ( PIN - 8 ) * 4) + 2 )  ) ) ); // wait set Bits Mode And CNF(In Register CRH)             										
				}
				else{
				    while(1);
 800390c:	e7fe      	b.n	800390c <Init_PIN+0x5f8>
				};
				break;
 800390e:	e0b5      	b.n	8003a7c <Init_PIN+0x768>
				
			case 5: //PORT is E
				while( ( (Config_IO < 0) || (Config_IO > 3) ) || ( (Mode <0) || (Mode > 3) ) ); // check Config_IO And Mode Not INvalid
 8003910:	797b      	ldrb	r3, [r7, #5]
 8003912:	2b03      	cmp	r3, #3
 8003914:	d8fc      	bhi.n	8003910 <Init_PIN+0x5fc>
 8003916:	793b      	ldrb	r3, [r7, #4]
 8003918:	2b03      	cmp	r3, #3
 800391a:	d8f9      	bhi.n	8003910 <Init_PIN+0x5fc>
				if( (PIN >= 0) && (PIN <= 7) ){ // Number Pin Between 0 And 7
 800391c:	79bb      	ldrb	r3, [r7, #6]
 800391e:	2b07      	cmp	r3, #7
 8003920:	d84d      	bhi.n	80039be <Init_PIN+0x6aa>
					GPIOE->CRL &=  ~( 3 << (PIN * 4) ); // Config Bit Mode(In Register CRL) == 0
 8003922:	4959      	ldr	r1, [pc, #356]	; (8003a88 <Init_PIN+0x774>)
 8003924:	4b58      	ldr	r3, [pc, #352]	; (8003a88 <Init_PIN+0x774>)
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	79ba      	ldrb	r2, [r7, #6]
 800392a:	0092      	lsls	r2, r2, #2
 800392c:	2003      	movs	r0, #3
 800392e:	fa00 f202 	lsl.w	r2, r0, r2
 8003932:	43d2      	mvns	r2, r2
 8003934:	4013      	ands	r3, r2
 8003936:	600b      	str	r3, [r1, #0]
					GPIOE->CRL &= ~( 3  << ( ( PIN * 4) + 2 )  ); // Config Bit CNF(In Register CRL) for Config Mode == 0
 8003938:	4953      	ldr	r1, [pc, #332]	; (8003a88 <Init_PIN+0x774>)
 800393a:	4b53      	ldr	r3, [pc, #332]	; (8003a88 <Init_PIN+0x774>)
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	79ba      	ldrb	r2, [r7, #6]
 8003940:	0092      	lsls	r2, r2, #2
 8003942:	3202      	adds	r2, #2
 8003944:	2003      	movs	r0, #3
 8003946:	fa00 f202 	lsl.w	r2, r0, r2
 800394a:	43d2      	mvns	r2, r2
 800394c:	4013      	ands	r3, r2
 800394e:	600b      	str	r3, [r1, #0]
					GPIOE->CRL |= ( Config_IO << (PIN * 4)  ); // Config Bit Mode(In Register CRL) 
 8003950:	484d      	ldr	r0, [pc, #308]	; (8003a88 <Init_PIN+0x774>)
 8003952:	4b4d      	ldr	r3, [pc, #308]	; (8003a88 <Init_PIN+0x774>)
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	7979      	ldrb	r1, [r7, #5]
 8003958:	79ba      	ldrb	r2, [r7, #6]
 800395a:	0092      	lsls	r2, r2, #2
 800395c:	fa01 f202 	lsl.w	r2, r1, r2
 8003960:	4313      	orrs	r3, r2
 8003962:	6003      	str	r3, [r0, #0]
					GPIOE->CRL |= ( Mode  << ( ( PIN * 4) + 2 )  ); // Config Bit CNF(In Register CRL) for Config Mode 
 8003964:	4848      	ldr	r0, [pc, #288]	; (8003a88 <Init_PIN+0x774>)
 8003966:	4b48      	ldr	r3, [pc, #288]	; (8003a88 <Init_PIN+0x774>)
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	7939      	ldrb	r1, [r7, #4]
 800396c:	79ba      	ldrb	r2, [r7, #6]
 800396e:	0092      	lsls	r2, r2, #2
 8003970:	3202      	adds	r2, #2
 8003972:	fa01 f202 	lsl.w	r2, r1, r2
 8003976:	4313      	orrs	r3, r2
 8003978:	6003      	str	r3, [r0, #0]
					while( ( ( GPIOE->CRL & ( 3 << (PIN * 4) ) ) != ( Config_IO << (PIN * 4) ) )  ||  ( ( GPIOE->CRL & ( 3  << ( ( PIN * 4) + 2 ) ) ) != ( Mode  << ( ( PIN * 4) + 2 )  ) ) ); // wait set Bits Mode And CNF(In Register CRL)
 800397a:	bf00      	nop
 800397c:	4b42      	ldr	r3, [pc, #264]	; (8003a88 <Init_PIN+0x774>)
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	79ba      	ldrb	r2, [r7, #6]
 8003982:	0092      	lsls	r2, r2, #2
 8003984:	2103      	movs	r1, #3
 8003986:	fa01 f202 	lsl.w	r2, r1, r2
 800398a:	4013      	ands	r3, r2
 800398c:	7979      	ldrb	r1, [r7, #5]
 800398e:	79ba      	ldrb	r2, [r7, #6]
 8003990:	0092      	lsls	r2, r2, #2
 8003992:	fa01 f202 	lsl.w	r2, r1, r2
 8003996:	4293      	cmp	r3, r2
 8003998:	d1f0      	bne.n	800397c <Init_PIN+0x668>
 800399a:	4b3b      	ldr	r3, [pc, #236]	; (8003a88 <Init_PIN+0x774>)
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	79ba      	ldrb	r2, [r7, #6]
 80039a0:	0092      	lsls	r2, r2, #2
 80039a2:	3202      	adds	r2, #2
 80039a4:	2103      	movs	r1, #3
 80039a6:	fa01 f202 	lsl.w	r2, r1, r2
 80039aa:	4013      	ands	r3, r2
 80039ac:	7939      	ldrb	r1, [r7, #4]
 80039ae:	79ba      	ldrb	r2, [r7, #6]
 80039b0:	0092      	lsls	r2, r2, #2
 80039b2:	3202      	adds	r2, #2
 80039b4:	fa01 f202 	lsl.w	r2, r1, r2
 80039b8:	4293      	cmp	r3, r2
 80039ba:	d1df      	bne.n	800397c <Init_PIN+0x668>
					while( ( ( GPIOE->CRH & ( 3 << ( ( PIN - 8 ) * 4) ) ) != ( Config_IO << ( ( PIN - 8 ) * 4) ) )  ||  ( ( GPIOE->CRH & ( 3  << ( ( ( PIN - 8 ) * 4) + 2 ) ) ) != ( Mode  << ( ( ( PIN - 8 ) * 4) + 2 )  ) ) ); // wait set Bits Mode And CNF(In Register CRH)             					
				}
				else{
				    while(1);
				};
				break;
 80039bc:	e05e      	b.n	8003a7c <Init_PIN+0x768>
					GPIOE->CRL &= ~( 3  << ( ( PIN * 4) + 2 )  ); // Config Bit CNF(In Register CRL) for Config Mode == 0
					GPIOE->CRL |= ( Config_IO << (PIN * 4)  ); // Config Bit Mode(In Register CRL) 
					GPIOE->CRL |= ( Mode  << ( ( PIN * 4) + 2 )  ); // Config Bit CNF(In Register CRL) for Config Mode 
					while( ( ( GPIOE->CRL & ( 3 << (PIN * 4) ) ) != ( Config_IO << (PIN * 4) ) )  ||  ( ( GPIOE->CRL & ( 3  << ( ( PIN * 4) + 2 ) ) ) != ( Mode  << ( ( PIN * 4) + 2 )  ) ) ); // wait set Bits Mode And CNF(In Register CRL)
				}
				else if( (PIN >= 8) && (PIN <= 15) ){ // Number Pin Between 8 And 15
 80039be:	79bb      	ldrb	r3, [r7, #6]
 80039c0:	2b07      	cmp	r3, #7
 80039c2:	d958      	bls.n	8003a76 <Init_PIN+0x762>
 80039c4:	79bb      	ldrb	r3, [r7, #6]
 80039c6:	2b0f      	cmp	r3, #15
 80039c8:	d855      	bhi.n	8003a76 <Init_PIN+0x762>
					GPIOE->CRH &=  ~( 3 << ( ( PIN - 8 ) * 4) ); // Config Bit Mode(In Register CRH) == 0
 80039ca:	492f      	ldr	r1, [pc, #188]	; (8003a88 <Init_PIN+0x774>)
 80039cc:	4b2e      	ldr	r3, [pc, #184]	; (8003a88 <Init_PIN+0x774>)
 80039ce:	685b      	ldr	r3, [r3, #4]
 80039d0:	79ba      	ldrb	r2, [r7, #6]
 80039d2:	3a08      	subs	r2, #8
 80039d4:	0092      	lsls	r2, r2, #2
 80039d6:	2003      	movs	r0, #3
 80039d8:	fa00 f202 	lsl.w	r2, r0, r2
 80039dc:	43d2      	mvns	r2, r2
 80039de:	4013      	ands	r3, r2
 80039e0:	604b      	str	r3, [r1, #4]
					GPIOE->CRH &= ~( 3  << ( ( ( PIN - 8 ) * 4) + 2 )  ); // Config Bit CNF(In Register CRH) for Config Mode == 0
 80039e2:	4929      	ldr	r1, [pc, #164]	; (8003a88 <Init_PIN+0x774>)
 80039e4:	4b28      	ldr	r3, [pc, #160]	; (8003a88 <Init_PIN+0x774>)
 80039e6:	685b      	ldr	r3, [r3, #4]
 80039e8:	79ba      	ldrb	r2, [r7, #6]
 80039ea:	3a08      	subs	r2, #8
 80039ec:	0092      	lsls	r2, r2, #2
 80039ee:	3202      	adds	r2, #2
 80039f0:	2003      	movs	r0, #3
 80039f2:	fa00 f202 	lsl.w	r2, r0, r2
 80039f6:	43d2      	mvns	r2, r2
 80039f8:	4013      	ands	r3, r2
 80039fa:	604b      	str	r3, [r1, #4]
					GPIOE->CRH |= ( Config_IO << ( (PIN - 8) * 4)  ); // Config Bit Mode(In Register CRH) 
 80039fc:	4822      	ldr	r0, [pc, #136]	; (8003a88 <Init_PIN+0x774>)
 80039fe:	4b22      	ldr	r3, [pc, #136]	; (8003a88 <Init_PIN+0x774>)
 8003a00:	685b      	ldr	r3, [r3, #4]
 8003a02:	7979      	ldrb	r1, [r7, #5]
 8003a04:	79ba      	ldrb	r2, [r7, #6]
 8003a06:	3a08      	subs	r2, #8
 8003a08:	0092      	lsls	r2, r2, #2
 8003a0a:	fa01 f202 	lsl.w	r2, r1, r2
 8003a0e:	4313      	orrs	r3, r2
 8003a10:	6043      	str	r3, [r0, #4]
					GPIOE->CRH |= ( Mode  << ( ( ( PIN - 8 ) * 4) + 2 )  ); // Config Bit CNF(In Register CRH) for Config Mode 					while( ( ( GPIOB->CRH & ( 3 << ( ( PIN - 8 ) * 4) ) ) != ( Config_IO << (PIN * 4) ) )  &&  ( ( GPIOB->CRH & ( 3  << ( ( PIN * 4) + 2 ) ) ) != ( Mode  << ( ( ( PIN - 8 ) * 4) + 2 )  ) ) ); // wait set Bits Mode And CNF(In Register CRLH)             					
 8003a12:	481d      	ldr	r0, [pc, #116]	; (8003a88 <Init_PIN+0x774>)
 8003a14:	4b1c      	ldr	r3, [pc, #112]	; (8003a88 <Init_PIN+0x774>)
 8003a16:	685b      	ldr	r3, [r3, #4]
 8003a18:	7939      	ldrb	r1, [r7, #4]
 8003a1a:	79ba      	ldrb	r2, [r7, #6]
 8003a1c:	3a08      	subs	r2, #8
 8003a1e:	0092      	lsls	r2, r2, #2
 8003a20:	3202      	adds	r2, #2
 8003a22:	fa01 f202 	lsl.w	r2, r1, r2
 8003a26:	4313      	orrs	r3, r2
 8003a28:	6043      	str	r3, [r0, #4]
					while( ( ( GPIOE->CRH & ( 3 << ( ( PIN - 8 ) * 4) ) ) != ( Config_IO << ( ( PIN - 8 ) * 4) ) )  ||  ( ( GPIOE->CRH & ( 3  << ( ( ( PIN - 8 ) * 4) + 2 ) ) ) != ( Mode  << ( ( ( PIN - 8 ) * 4) + 2 )  ) ) ); // wait set Bits Mode And CNF(In Register CRH)             					
 8003a2a:	bf00      	nop
 8003a2c:	4b16      	ldr	r3, [pc, #88]	; (8003a88 <Init_PIN+0x774>)
 8003a2e:	685b      	ldr	r3, [r3, #4]
 8003a30:	79ba      	ldrb	r2, [r7, #6]
 8003a32:	3a08      	subs	r2, #8
 8003a34:	0092      	lsls	r2, r2, #2
 8003a36:	2103      	movs	r1, #3
 8003a38:	fa01 f202 	lsl.w	r2, r1, r2
 8003a3c:	4013      	ands	r3, r2
 8003a3e:	7979      	ldrb	r1, [r7, #5]
 8003a40:	79ba      	ldrb	r2, [r7, #6]
 8003a42:	3a08      	subs	r2, #8
 8003a44:	0092      	lsls	r2, r2, #2
 8003a46:	fa01 f202 	lsl.w	r2, r1, r2
 8003a4a:	4293      	cmp	r3, r2
 8003a4c:	d1ee      	bne.n	8003a2c <Init_PIN+0x718>
 8003a4e:	4b0e      	ldr	r3, [pc, #56]	; (8003a88 <Init_PIN+0x774>)
 8003a50:	685b      	ldr	r3, [r3, #4]
 8003a52:	79ba      	ldrb	r2, [r7, #6]
 8003a54:	3a08      	subs	r2, #8
 8003a56:	0092      	lsls	r2, r2, #2
 8003a58:	3202      	adds	r2, #2
 8003a5a:	2103      	movs	r1, #3
 8003a5c:	fa01 f202 	lsl.w	r2, r1, r2
 8003a60:	4013      	ands	r3, r2
 8003a62:	7939      	ldrb	r1, [r7, #4]
 8003a64:	79ba      	ldrb	r2, [r7, #6]
 8003a66:	3a08      	subs	r2, #8
 8003a68:	0092      	lsls	r2, r2, #2
 8003a6a:	3202      	adds	r2, #2
 8003a6c:	fa01 f202 	lsl.w	r2, r1, r2
 8003a70:	4293      	cmp	r3, r2
 8003a72:	d1db      	bne.n	8003a2c <Init_PIN+0x718>
					GPIOE->CRL &= ~( 3  << ( ( PIN * 4) + 2 )  ); // Config Bit CNF(In Register CRL) for Config Mode == 0
					GPIOE->CRL |= ( Config_IO << (PIN * 4)  ); // Config Bit Mode(In Register CRL) 
					GPIOE->CRL |= ( Mode  << ( ( PIN * 4) + 2 )  ); // Config Bit CNF(In Register CRL) for Config Mode 
					while( ( ( GPIOE->CRL & ( 3 << (PIN * 4) ) ) != ( Config_IO << (PIN * 4) ) )  ||  ( ( GPIOE->CRL & ( 3  << ( ( PIN * 4) + 2 ) ) ) != ( Mode  << ( ( PIN * 4) + 2 )  ) ) ); // wait set Bits Mode And CNF(In Register CRL)
				}
				else if( (PIN >= 8) && (PIN <= 15) ){ // Number Pin Between 8 And 15
 8003a74:	e000      	b.n	8003a78 <Init_PIN+0x764>
					GPIOE->CRH |= ( Config_IO << ( (PIN - 8) * 4)  ); // Config Bit Mode(In Register CRH) 
					GPIOE->CRH |= ( Mode  << ( ( ( PIN - 8 ) * 4) + 2 )  ); // Config Bit CNF(In Register CRH) for Config Mode 					while( ( ( GPIOB->CRH & ( 3 << ( ( PIN - 8 ) * 4) ) ) != ( Config_IO << (PIN * 4) ) )  &&  ( ( GPIOB->CRH & ( 3  << ( ( PIN * 4) + 2 ) ) ) != ( Mode  << ( ( ( PIN - 8 ) * 4) + 2 )  ) ) ); // wait set Bits Mode And CNF(In Register CRLH)             					
					while( ( ( GPIOE->CRH & ( 3 << ( ( PIN - 8 ) * 4) ) ) != ( Config_IO << ( ( PIN - 8 ) * 4) ) )  ||  ( ( GPIOE->CRH & ( 3  << ( ( ( PIN - 8 ) * 4) + 2 ) ) ) != ( Mode  << ( ( ( PIN - 8 ) * 4) + 2 )  ) ) ); // wait set Bits Mode And CNF(In Register CRH)             					
				}
				else{
				    while(1);
 8003a76:	e7fe      	b.n	8003a76 <Init_PIN+0x762>
				};
				break;
 8003a78:	e000      	b.n	8003a7c <Init_PIN+0x768>

			default: while(1);
 8003a7a:	e7fe      	b.n	8003a7a <Init_PIN+0x766>
		}
};
 8003a7c:	bf00      	nop
 8003a7e:	3708      	adds	r7, #8
 8003a80:	46bd      	mov	sp, r7
 8003a82:	bc90      	pop	{r4, r7}
 8003a84:	4770      	bx	lr
 8003a86:	bf00      	nop
 8003a88:	40011800 	.word	0x40011800

08003a8c <Set_PIN>:
void Set_PINE(char PIN){
    GPIOE->BSRR |= 1 << PIN; //set PIN
	while( ( (GPIOE->ODR) & ( 1 << PIN) )  != ( 1 << PIN ) ); // wait set PIN = 1
};

void Set_PIN(char PORT,char PIN){
 8003a8c:	b480      	push	{r7}
 8003a8e:	b083      	sub	sp, #12
 8003a90:	af00      	add	r7, sp, #0
 8003a92:	4603      	mov	r3, r0
 8003a94:	460a      	mov	r2, r1
 8003a96:	71fb      	strb	r3, [r7, #7]
 8003a98:	4613      	mov	r3, r2
 8003a9a:	71bb      	strb	r3, [r7, #6]
	if(PORT == PORTA){
 8003a9c:	79fb      	ldrb	r3, [r7, #7]
 8003a9e:	2b01      	cmp	r3, #1
 8003aa0:	d116      	bne.n	8003ad0 <Set_PIN+0x44>
		GPIOA->BSRR |= 1 << PIN; // Set PIN
 8003aa2:	4942      	ldr	r1, [pc, #264]	; (8003bac <Set_PIN+0x120>)
 8003aa4:	4b41      	ldr	r3, [pc, #260]	; (8003bac <Set_PIN+0x120>)
 8003aa6:	691b      	ldr	r3, [r3, #16]
 8003aa8:	79ba      	ldrb	r2, [r7, #6]
 8003aaa:	2001      	movs	r0, #1
 8003aac:	fa00 f202 	lsl.w	r2, r0, r2
 8003ab0:	4313      	orrs	r3, r2
 8003ab2:	610b      	str	r3, [r1, #16]
		while( ( (GPIOA->ODR) & ( 1 << PIN) )  != ( 1 << PIN ) ); // wait set PIN = 1
 8003ab4:	bf00      	nop
 8003ab6:	4b3d      	ldr	r3, [pc, #244]	; (8003bac <Set_PIN+0x120>)
 8003ab8:	68db      	ldr	r3, [r3, #12]
 8003aba:	79ba      	ldrb	r2, [r7, #6]
 8003abc:	2101      	movs	r1, #1
 8003abe:	fa01 f202 	lsl.w	r2, r1, r2
 8003ac2:	4013      	ands	r3, r2
 8003ac4:	79ba      	ldrb	r2, [r7, #6]
 8003ac6:	2101      	movs	r1, #1
 8003ac8:	fa01 f202 	lsl.w	r2, r1, r2
 8003acc:	4293      	cmp	r3, r2
 8003ace:	d1f2      	bne.n	8003ab6 <Set_PIN+0x2a>
	}
	if(PORT == PORTB){
 8003ad0:	79fb      	ldrb	r3, [r7, #7]
 8003ad2:	2b02      	cmp	r3, #2
 8003ad4:	d116      	bne.n	8003b04 <Set_PIN+0x78>
		GPIOB->BSRR |= 1 << PIN; // Set PIN
 8003ad6:	4936      	ldr	r1, [pc, #216]	; (8003bb0 <Set_PIN+0x124>)
 8003ad8:	4b35      	ldr	r3, [pc, #212]	; (8003bb0 <Set_PIN+0x124>)
 8003ada:	691b      	ldr	r3, [r3, #16]
 8003adc:	79ba      	ldrb	r2, [r7, #6]
 8003ade:	2001      	movs	r0, #1
 8003ae0:	fa00 f202 	lsl.w	r2, r0, r2
 8003ae4:	4313      	orrs	r3, r2
 8003ae6:	610b      	str	r3, [r1, #16]
		while( ( (GPIOB->ODR) & ( 1 << PIN) )  != ( 1 << PIN ) ); // wait set PIN = 1
 8003ae8:	bf00      	nop
 8003aea:	4b31      	ldr	r3, [pc, #196]	; (8003bb0 <Set_PIN+0x124>)
 8003aec:	68db      	ldr	r3, [r3, #12]
 8003aee:	79ba      	ldrb	r2, [r7, #6]
 8003af0:	2101      	movs	r1, #1
 8003af2:	fa01 f202 	lsl.w	r2, r1, r2
 8003af6:	4013      	ands	r3, r2
 8003af8:	79ba      	ldrb	r2, [r7, #6]
 8003afa:	2101      	movs	r1, #1
 8003afc:	fa01 f202 	lsl.w	r2, r1, r2
 8003b00:	4293      	cmp	r3, r2
 8003b02:	d1f2      	bne.n	8003aea <Set_PIN+0x5e>
	}
	if(PORT == PORTC){
 8003b04:	79fb      	ldrb	r3, [r7, #7]
 8003b06:	2b03      	cmp	r3, #3
 8003b08:	d116      	bne.n	8003b38 <Set_PIN+0xac>
		GPIOC->BSRR |= 1 << PIN; // Set PIN
 8003b0a:	492a      	ldr	r1, [pc, #168]	; (8003bb4 <Set_PIN+0x128>)
 8003b0c:	4b29      	ldr	r3, [pc, #164]	; (8003bb4 <Set_PIN+0x128>)
 8003b0e:	691b      	ldr	r3, [r3, #16]
 8003b10:	79ba      	ldrb	r2, [r7, #6]
 8003b12:	2001      	movs	r0, #1
 8003b14:	fa00 f202 	lsl.w	r2, r0, r2
 8003b18:	4313      	orrs	r3, r2
 8003b1a:	610b      	str	r3, [r1, #16]
		while( ( (GPIOC->ODR) & ( 1 << PIN) )  != ( 1 << PIN ) ); // wait set PIN = 1
 8003b1c:	bf00      	nop
 8003b1e:	4b25      	ldr	r3, [pc, #148]	; (8003bb4 <Set_PIN+0x128>)
 8003b20:	68db      	ldr	r3, [r3, #12]
 8003b22:	79ba      	ldrb	r2, [r7, #6]
 8003b24:	2101      	movs	r1, #1
 8003b26:	fa01 f202 	lsl.w	r2, r1, r2
 8003b2a:	4013      	ands	r3, r2
 8003b2c:	79ba      	ldrb	r2, [r7, #6]
 8003b2e:	2101      	movs	r1, #1
 8003b30:	fa01 f202 	lsl.w	r2, r1, r2
 8003b34:	4293      	cmp	r3, r2
 8003b36:	d1f2      	bne.n	8003b1e <Set_PIN+0x92>
	}
	if(PORT == PORTD){
 8003b38:	79fb      	ldrb	r3, [r7, #7]
 8003b3a:	2b04      	cmp	r3, #4
 8003b3c:	d116      	bne.n	8003b6c <Set_PIN+0xe0>
		GPIOD->BSRR |= 1 << PIN; // Set PIN
 8003b3e:	491e      	ldr	r1, [pc, #120]	; (8003bb8 <Set_PIN+0x12c>)
 8003b40:	4b1d      	ldr	r3, [pc, #116]	; (8003bb8 <Set_PIN+0x12c>)
 8003b42:	691b      	ldr	r3, [r3, #16]
 8003b44:	79ba      	ldrb	r2, [r7, #6]
 8003b46:	2001      	movs	r0, #1
 8003b48:	fa00 f202 	lsl.w	r2, r0, r2
 8003b4c:	4313      	orrs	r3, r2
 8003b4e:	610b      	str	r3, [r1, #16]
		while( ( (GPIOD->ODR) & ( 1 << PIN) )  != ( 1 << PIN ) ); // wait set PIN = 1
 8003b50:	bf00      	nop
 8003b52:	4b19      	ldr	r3, [pc, #100]	; (8003bb8 <Set_PIN+0x12c>)
 8003b54:	68db      	ldr	r3, [r3, #12]
 8003b56:	79ba      	ldrb	r2, [r7, #6]
 8003b58:	2101      	movs	r1, #1
 8003b5a:	fa01 f202 	lsl.w	r2, r1, r2
 8003b5e:	4013      	ands	r3, r2
 8003b60:	79ba      	ldrb	r2, [r7, #6]
 8003b62:	2101      	movs	r1, #1
 8003b64:	fa01 f202 	lsl.w	r2, r1, r2
 8003b68:	4293      	cmp	r3, r2
 8003b6a:	d1f2      	bne.n	8003b52 <Set_PIN+0xc6>
	}
	if(PORT == PORTE){
 8003b6c:	79fb      	ldrb	r3, [r7, #7]
 8003b6e:	2b05      	cmp	r3, #5
 8003b70:	d116      	bne.n	8003ba0 <Set_PIN+0x114>
		GPIOE->BSRR |= 1 << PIN; // Set PIN
 8003b72:	4912      	ldr	r1, [pc, #72]	; (8003bbc <Set_PIN+0x130>)
 8003b74:	4b11      	ldr	r3, [pc, #68]	; (8003bbc <Set_PIN+0x130>)
 8003b76:	691b      	ldr	r3, [r3, #16]
 8003b78:	79ba      	ldrb	r2, [r7, #6]
 8003b7a:	2001      	movs	r0, #1
 8003b7c:	fa00 f202 	lsl.w	r2, r0, r2
 8003b80:	4313      	orrs	r3, r2
 8003b82:	610b      	str	r3, [r1, #16]
		while( ( (GPIOE->ODR) & ( 1 << PIN) )  != ( 1 << PIN ) ); // wait set PIN = 1
 8003b84:	bf00      	nop
 8003b86:	4b0d      	ldr	r3, [pc, #52]	; (8003bbc <Set_PIN+0x130>)
 8003b88:	68db      	ldr	r3, [r3, #12]
 8003b8a:	79ba      	ldrb	r2, [r7, #6]
 8003b8c:	2101      	movs	r1, #1
 8003b8e:	fa01 f202 	lsl.w	r2, r1, r2
 8003b92:	4013      	ands	r3, r2
 8003b94:	79ba      	ldrb	r2, [r7, #6]
 8003b96:	2101      	movs	r1, #1
 8003b98:	fa01 f202 	lsl.w	r2, r1, r2
 8003b9c:	4293      	cmp	r3, r2
 8003b9e:	d1f2      	bne.n	8003b86 <Set_PIN+0xfa>
	}
};
 8003ba0:	bf00      	nop
 8003ba2:	370c      	adds	r7, #12
 8003ba4:	46bd      	mov	sp, r7
 8003ba6:	bc80      	pop	{r7}
 8003ba8:	4770      	bx	lr
 8003baa:	bf00      	nop
 8003bac:	40010800 	.word	0x40010800
 8003bb0:	40010c00 	.word	0x40010c00
 8003bb4:	40011000 	.word	0x40011000
 8003bb8:	40011400 	.word	0x40011400
 8003bbc:	40011800 	.word	0x40011800

08003bc0 <Reset_PIN>:
void Reset_PINE(char PIN){
    GPIOE->BRR |= 1 << PIN;
	while( ( (GPIOE->ODR) & ( 1 << PIN) ) == ( 1 << PIN ) );
};

void Reset_PIN(char PORT,char PIN){
 8003bc0:	b480      	push	{r7}
 8003bc2:	b083      	sub	sp, #12
 8003bc4:	af00      	add	r7, sp, #0
 8003bc6:	4603      	mov	r3, r0
 8003bc8:	460a      	mov	r2, r1
 8003bca:	71fb      	strb	r3, [r7, #7]
 8003bcc:	4613      	mov	r3, r2
 8003bce:	71bb      	strb	r3, [r7, #6]
	if(PORT == PORTA){
 8003bd0:	79fb      	ldrb	r3, [r7, #7]
 8003bd2:	2b01      	cmp	r3, #1
 8003bd4:	d117      	bne.n	8003c06 <Reset_PIN+0x46>
		GPIOA->BRR |= 1 << PIN; // set pin
 8003bd6:	4944      	ldr	r1, [pc, #272]	; (8003ce8 <Reset_PIN+0x128>)
 8003bd8:	4b43      	ldr	r3, [pc, #268]	; (8003ce8 <Reset_PIN+0x128>)
 8003bda:	695b      	ldr	r3, [r3, #20]
 8003bdc:	79ba      	ldrb	r2, [r7, #6]
 8003bde:	2001      	movs	r0, #1
 8003be0:	fa00 f202 	lsl.w	r2, r0, r2
 8003be4:	4313      	orrs	r3, r2
 8003be6:	614b      	str	r3, [r1, #20]
		while( ( (GPIOA->ODR) & ( 1 << PIN) ) == ( 1 << PIN ) ); // wait set pin
 8003be8:	bf00      	nop
 8003bea:	4b3f      	ldr	r3, [pc, #252]	; (8003ce8 <Reset_PIN+0x128>)
 8003bec:	68db      	ldr	r3, [r3, #12]
 8003bee:	79ba      	ldrb	r2, [r7, #6]
 8003bf0:	2101      	movs	r1, #1
 8003bf2:	fa01 f202 	lsl.w	r2, r1, r2
 8003bf6:	4013      	ands	r3, r2
 8003bf8:	79ba      	ldrb	r2, [r7, #6]
 8003bfa:	2101      	movs	r1, #1
 8003bfc:	fa01 f202 	lsl.w	r2, r1, r2
 8003c00:	4293      	cmp	r3, r2
 8003c02:	d0f2      	beq.n	8003bea <Reset_PIN+0x2a>
	else if(PORT == PORTE){
		GPIOE->BRR |= 1 << PIN; // set pin
		while( ( (GPIOE->ODR) & ( 1 << PIN) ) == ( 1 << PIN ) ); // wait set pin
	}
	
};
 8003c04:	e06a      	b.n	8003cdc <Reset_PIN+0x11c>
	if(PORT == PORTA){
		GPIOA->BRR |= 1 << PIN; // set pin
		while( ( (GPIOA->ODR) & ( 1 << PIN) ) == ( 1 << PIN ) ); // wait set pin
	}
	
	else if(PORT == PORTB){
 8003c06:	79fb      	ldrb	r3, [r7, #7]
 8003c08:	2b02      	cmp	r3, #2
 8003c0a:	d117      	bne.n	8003c3c <Reset_PIN+0x7c>
		GPIOB->BRR |= 1 << PIN; // set pin
 8003c0c:	4937      	ldr	r1, [pc, #220]	; (8003cec <Reset_PIN+0x12c>)
 8003c0e:	4b37      	ldr	r3, [pc, #220]	; (8003cec <Reset_PIN+0x12c>)
 8003c10:	695b      	ldr	r3, [r3, #20]
 8003c12:	79ba      	ldrb	r2, [r7, #6]
 8003c14:	2001      	movs	r0, #1
 8003c16:	fa00 f202 	lsl.w	r2, r0, r2
 8003c1a:	4313      	orrs	r3, r2
 8003c1c:	614b      	str	r3, [r1, #20]
		while( ( (GPIOB->ODR) & ( 1 << PIN) ) == ( 1 << PIN ) ); // wait set pin
 8003c1e:	bf00      	nop
 8003c20:	4b32      	ldr	r3, [pc, #200]	; (8003cec <Reset_PIN+0x12c>)
 8003c22:	68db      	ldr	r3, [r3, #12]
 8003c24:	79ba      	ldrb	r2, [r7, #6]
 8003c26:	2101      	movs	r1, #1
 8003c28:	fa01 f202 	lsl.w	r2, r1, r2
 8003c2c:	4013      	ands	r3, r2
 8003c2e:	79ba      	ldrb	r2, [r7, #6]
 8003c30:	2101      	movs	r1, #1
 8003c32:	fa01 f202 	lsl.w	r2, r1, r2
 8003c36:	4293      	cmp	r3, r2
 8003c38:	d0f2      	beq.n	8003c20 <Reset_PIN+0x60>
	else if(PORT == PORTE){
		GPIOE->BRR |= 1 << PIN; // set pin
		while( ( (GPIOE->ODR) & ( 1 << PIN) ) == ( 1 << PIN ) ); // wait set pin
	}
	
};
 8003c3a:	e04f      	b.n	8003cdc <Reset_PIN+0x11c>
	else if(PORT == PORTB){
		GPIOB->BRR |= 1 << PIN; // set pin
		while( ( (GPIOB->ODR) & ( 1 << PIN) ) == ( 1 << PIN ) ); // wait set pin
	}
	
	else if(PORT == PORTC){
 8003c3c:	79fb      	ldrb	r3, [r7, #7]
 8003c3e:	2b03      	cmp	r3, #3
 8003c40:	d117      	bne.n	8003c72 <Reset_PIN+0xb2>
		GPIOC->BRR |= 1 << PIN; // set pin
 8003c42:	492b      	ldr	r1, [pc, #172]	; (8003cf0 <Reset_PIN+0x130>)
 8003c44:	4b2a      	ldr	r3, [pc, #168]	; (8003cf0 <Reset_PIN+0x130>)
 8003c46:	695b      	ldr	r3, [r3, #20]
 8003c48:	79ba      	ldrb	r2, [r7, #6]
 8003c4a:	2001      	movs	r0, #1
 8003c4c:	fa00 f202 	lsl.w	r2, r0, r2
 8003c50:	4313      	orrs	r3, r2
 8003c52:	614b      	str	r3, [r1, #20]
		while( ( (GPIOC->ODR) & ( 1 << PIN) ) == ( 1 << PIN ) ); // wait set pin
 8003c54:	bf00      	nop
 8003c56:	4b26      	ldr	r3, [pc, #152]	; (8003cf0 <Reset_PIN+0x130>)
 8003c58:	68db      	ldr	r3, [r3, #12]
 8003c5a:	79ba      	ldrb	r2, [r7, #6]
 8003c5c:	2101      	movs	r1, #1
 8003c5e:	fa01 f202 	lsl.w	r2, r1, r2
 8003c62:	4013      	ands	r3, r2
 8003c64:	79ba      	ldrb	r2, [r7, #6]
 8003c66:	2101      	movs	r1, #1
 8003c68:	fa01 f202 	lsl.w	r2, r1, r2
 8003c6c:	4293      	cmp	r3, r2
 8003c6e:	d0f2      	beq.n	8003c56 <Reset_PIN+0x96>
	else if(PORT == PORTE){
		GPIOE->BRR |= 1 << PIN; // set pin
		while( ( (GPIOE->ODR) & ( 1 << PIN) ) == ( 1 << PIN ) ); // wait set pin
	}
	
};
 8003c70:	e034      	b.n	8003cdc <Reset_PIN+0x11c>
	else if(PORT == PORTC){
		GPIOC->BRR |= 1 << PIN; // set pin
		while( ( (GPIOC->ODR) & ( 1 << PIN) ) == ( 1 << PIN ) ); // wait set pin
	}
	
	else if(PORT == PORTD){
 8003c72:	79fb      	ldrb	r3, [r7, #7]
 8003c74:	2b04      	cmp	r3, #4
 8003c76:	d117      	bne.n	8003ca8 <Reset_PIN+0xe8>
		GPIOD->BRR |= 1 << PIN; // set pin
 8003c78:	491e      	ldr	r1, [pc, #120]	; (8003cf4 <Reset_PIN+0x134>)
 8003c7a:	4b1e      	ldr	r3, [pc, #120]	; (8003cf4 <Reset_PIN+0x134>)
 8003c7c:	695b      	ldr	r3, [r3, #20]
 8003c7e:	79ba      	ldrb	r2, [r7, #6]
 8003c80:	2001      	movs	r0, #1
 8003c82:	fa00 f202 	lsl.w	r2, r0, r2
 8003c86:	4313      	orrs	r3, r2
 8003c88:	614b      	str	r3, [r1, #20]
		while( ( (GPIOD->ODR) & ( 1 << PIN) ) == ( 1 << PIN ) ); // wait set pin
 8003c8a:	bf00      	nop
 8003c8c:	4b19      	ldr	r3, [pc, #100]	; (8003cf4 <Reset_PIN+0x134>)
 8003c8e:	68db      	ldr	r3, [r3, #12]
 8003c90:	79ba      	ldrb	r2, [r7, #6]
 8003c92:	2101      	movs	r1, #1
 8003c94:	fa01 f202 	lsl.w	r2, r1, r2
 8003c98:	4013      	ands	r3, r2
 8003c9a:	79ba      	ldrb	r2, [r7, #6]
 8003c9c:	2101      	movs	r1, #1
 8003c9e:	fa01 f202 	lsl.w	r2, r1, r2
 8003ca2:	4293      	cmp	r3, r2
 8003ca4:	d0f2      	beq.n	8003c8c <Reset_PIN+0xcc>
	else if(PORT == PORTE){
		GPIOE->BRR |= 1 << PIN; // set pin
		while( ( (GPIOE->ODR) & ( 1 << PIN) ) == ( 1 << PIN ) ); // wait set pin
	}
	
};
 8003ca6:	e019      	b.n	8003cdc <Reset_PIN+0x11c>
	else if(PORT == PORTD){
		GPIOD->BRR |= 1 << PIN; // set pin
		while( ( (GPIOD->ODR) & ( 1 << PIN) ) == ( 1 << PIN ) ); // wait set pin
	}
	
	else if(PORT == PORTE){
 8003ca8:	79fb      	ldrb	r3, [r7, #7]
 8003caa:	2b05      	cmp	r3, #5
 8003cac:	d116      	bne.n	8003cdc <Reset_PIN+0x11c>
		GPIOE->BRR |= 1 << PIN; // set pin
 8003cae:	4912      	ldr	r1, [pc, #72]	; (8003cf8 <Reset_PIN+0x138>)
 8003cb0:	4b11      	ldr	r3, [pc, #68]	; (8003cf8 <Reset_PIN+0x138>)
 8003cb2:	695b      	ldr	r3, [r3, #20]
 8003cb4:	79ba      	ldrb	r2, [r7, #6]
 8003cb6:	2001      	movs	r0, #1
 8003cb8:	fa00 f202 	lsl.w	r2, r0, r2
 8003cbc:	4313      	orrs	r3, r2
 8003cbe:	614b      	str	r3, [r1, #20]
		while( ( (GPIOE->ODR) & ( 1 << PIN) ) == ( 1 << PIN ) ); // wait set pin
 8003cc0:	bf00      	nop
 8003cc2:	4b0d      	ldr	r3, [pc, #52]	; (8003cf8 <Reset_PIN+0x138>)
 8003cc4:	68db      	ldr	r3, [r3, #12]
 8003cc6:	79ba      	ldrb	r2, [r7, #6]
 8003cc8:	2101      	movs	r1, #1
 8003cca:	fa01 f202 	lsl.w	r2, r1, r2
 8003cce:	4013      	ands	r3, r2
 8003cd0:	79ba      	ldrb	r2, [r7, #6]
 8003cd2:	2101      	movs	r1, #1
 8003cd4:	fa01 f202 	lsl.w	r2, r1, r2
 8003cd8:	4293      	cmp	r3, r2
 8003cda:	d0f2      	beq.n	8003cc2 <Reset_PIN+0x102>
	}
	
};
 8003cdc:	bf00      	nop
 8003cde:	370c      	adds	r7, #12
 8003ce0:	46bd      	mov	sp, r7
 8003ce2:	bc80      	pop	{r7}
 8003ce4:	4770      	bx	lr
 8003ce6:	bf00      	nop
 8003ce8:	40010800 	.word	0x40010800
 8003cec:	40010c00 	.word	0x40010c00
 8003cf0:	40011000 	.word	0x40011000
 8003cf4:	40011400 	.word	0x40011400
 8003cf8:	40011800 	.word	0x40011800

08003cfc <IWDG_Init>:

#include "stm32f10x.h"
#include "IWDG.h"

void IWDG_Init(int Prescaler){
 8003cfc:	b480      	push	{r7}
 8003cfe:	b083      	sub	sp, #12
 8003d00:	af00      	add	r7, sp, #0
 8003d02:	6078      	str	r0, [r7, #4]
	RCC->CSR |= (1 << 0); // LSI ON
 8003d04:	4a25      	ldr	r2, [pc, #148]	; (8003d9c <IWDG_Init+0xa0>)
 8003d06:	4b25      	ldr	r3, [pc, #148]	; (8003d9c <IWDG_Init+0xa0>)
 8003d08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d0a:	f043 0301 	orr.w	r3, r3, #1
 8003d0e:	6253      	str	r3, [r2, #36]	; 0x24
	while( ( (RCC->CSR) & (1 << 1) ) == 0 ); // wait ON LSI
 8003d10:	bf00      	nop
 8003d12:	4b22      	ldr	r3, [pc, #136]	; (8003d9c <IWDG_Init+0xa0>)
 8003d14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d16:	f003 0302 	and.w	r3, r3, #2
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d0f9      	beq.n	8003d12 <IWDG_Init+0x16>
	IWDG->KR = 0xCCCC; // Enable IWDG
 8003d1e:	4b20      	ldr	r3, [pc, #128]	; (8003da0 <IWDG_Init+0xa4>)
 8003d20:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 8003d24:	601a      	str	r2, [r3, #0]
	IWDG->KR = 0x5555; // Enable Register Access
 8003d26:	4b1e      	ldr	r3, [pc, #120]	; (8003da0 <IWDG_Init+0xa4>)
 8003d28:	f245 5255 	movw	r2, #21845	; 0x5555
 8003d2c:	601a      	str	r2, [r3, #0]
	
	if(Prescaler == 4)
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	2b04      	cmp	r3, #4
 8003d32:	d103      	bne.n	8003d3c <IWDG_Init+0x40>
		
		IWDG->PR = 0; // frequency LSI / 4
 8003d34:	4b1a      	ldr	r3, [pc, #104]	; (8003da0 <IWDG_Init+0xa4>)
 8003d36:	2200      	movs	r2, #0
 8003d38:	605a      	str	r2, [r3, #4]
		IWDG->PR = 6; // frequency LSI / 256
	
	else
		while(1);

};
 8003d3a:	e02b      	b.n	8003d94 <IWDG_Init+0x98>
	IWDG->KR = 0x5555; // Enable Register Access
	
	if(Prescaler == 4)
		
		IWDG->PR = 0; // frequency LSI / 4
	else if(Prescaler == 8)
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	2b08      	cmp	r3, #8
 8003d40:	d103      	bne.n	8003d4a <IWDG_Init+0x4e>
		IWDG->PR = 1; // frequency LSI / 8
 8003d42:	4b17      	ldr	r3, [pc, #92]	; (8003da0 <IWDG_Init+0xa4>)
 8003d44:	2201      	movs	r2, #1
 8003d46:	605a      	str	r2, [r3, #4]
		IWDG->PR = 6; // frequency LSI / 256
	
	else
		while(1);

};
 8003d48:	e024      	b.n	8003d94 <IWDG_Init+0x98>
		
		IWDG->PR = 0; // frequency LSI / 4
	else if(Prescaler == 8)
		IWDG->PR = 1; // frequency LSI / 8
	
	else if(Prescaler == 16)
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	2b10      	cmp	r3, #16
 8003d4e:	d103      	bne.n	8003d58 <IWDG_Init+0x5c>
		IWDG->PR = 2; // frequency LSI / 16
 8003d50:	4b13      	ldr	r3, [pc, #76]	; (8003da0 <IWDG_Init+0xa4>)
 8003d52:	2202      	movs	r2, #2
 8003d54:	605a      	str	r2, [r3, #4]
		IWDG->PR = 6; // frequency LSI / 256
	
	else
		while(1);

};
 8003d56:	e01d      	b.n	8003d94 <IWDG_Init+0x98>
		IWDG->PR = 1; // frequency LSI / 8
	
	else if(Prescaler == 16)
		IWDG->PR = 2; // frequency LSI / 16
	
	else if(Prescaler == 32)
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	2b20      	cmp	r3, #32
 8003d5c:	d103      	bne.n	8003d66 <IWDG_Init+0x6a>
		IWDG->PR = 3; // frequency LSI / 32
 8003d5e:	4b10      	ldr	r3, [pc, #64]	; (8003da0 <IWDG_Init+0xa4>)
 8003d60:	2203      	movs	r2, #3
 8003d62:	605a      	str	r2, [r3, #4]
		IWDG->PR = 6; // frequency LSI / 256
	
	else
		while(1);

};
 8003d64:	e016      	b.n	8003d94 <IWDG_Init+0x98>
		IWDG->PR = 2; // frequency LSI / 16
	
	else if(Prescaler == 32)
		IWDG->PR = 3; // frequency LSI / 32
	
	else if(Prescaler == 64)
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	2b40      	cmp	r3, #64	; 0x40
 8003d6a:	d103      	bne.n	8003d74 <IWDG_Init+0x78>
		IWDG->PR = 4; // frequency LSI / 64
 8003d6c:	4b0c      	ldr	r3, [pc, #48]	; (8003da0 <IWDG_Init+0xa4>)
 8003d6e:	2204      	movs	r2, #4
 8003d70:	605a      	str	r2, [r3, #4]
		IWDG->PR = 6; // frequency LSI / 256
	
	else
		while(1);

};
 8003d72:	e00f      	b.n	8003d94 <IWDG_Init+0x98>
		IWDG->PR = 3; // frequency LSI / 32
	
	else if(Prescaler == 64)
		IWDG->PR = 4; // frequency LSI / 64
	
	else if(Prescaler == 128)
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	2b80      	cmp	r3, #128	; 0x80
 8003d78:	d103      	bne.n	8003d82 <IWDG_Init+0x86>
		IWDG->PR = 5; // frequency LSI / 128
 8003d7a:	4b09      	ldr	r3, [pc, #36]	; (8003da0 <IWDG_Init+0xa4>)
 8003d7c:	2205      	movs	r2, #5
 8003d7e:	605a      	str	r2, [r3, #4]
		IWDG->PR = 6; // frequency LSI / 256
	
	else
		while(1);

};
 8003d80:	e008      	b.n	8003d94 <IWDG_Init+0x98>
		IWDG->PR = 4; // frequency LSI / 64
	
	else if(Prescaler == 128)
		IWDG->PR = 5; // frequency LSI / 128
	
	else if(Prescaler == 256)
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003d88:	d103      	bne.n	8003d92 <IWDG_Init+0x96>
		IWDG->PR = 6; // frequency LSI / 256
 8003d8a:	4b05      	ldr	r3, [pc, #20]	; (8003da0 <IWDG_Init+0xa4>)
 8003d8c:	2206      	movs	r2, #6
 8003d8e:	605a      	str	r2, [r3, #4]
	
	else
		while(1);

};
 8003d90:	e000      	b.n	8003d94 <IWDG_Init+0x98>
	
	else if(Prescaler == 256)
		IWDG->PR = 6; // frequency LSI / 256
	
	else
		while(1);
 8003d92:	e7fe      	b.n	8003d92 <IWDG_Init+0x96>

};
 8003d94:	370c      	adds	r7, #12
 8003d96:	46bd      	mov	sp, r7
 8003d98:	bc80      	pop	{r7}
 8003d9a:	4770      	bx	lr
 8003d9c:	40021000 	.word	0x40021000
 8003da0:	40003000 	.word	0x40003000

08003da4 <IWDG_Reset>:

void IWDG_Reset(){
 8003da4:	b480      	push	{r7}
 8003da6:	af00      	add	r7, sp, #0
	IWDG->KR = 0xAAAA;
 8003da8:	4b03      	ldr	r3, [pc, #12]	; (8003db8 <IWDG_Reset+0x14>)
 8003daa:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8003dae:	601a      	str	r2, [r3, #0]
 8003db0:	bf00      	nop
 8003db2:	46bd      	mov	sp, r7
 8003db4:	bc80      	pop	{r7}
 8003db6:	4770      	bx	lr
 8003db8:	40003000 	.word	0x40003000

08003dbc <LCD_Delay>:
#define D2 300000//60000
#define D3 10// 10ms (30000)
#define D4 4000000 //4000
#define LCD_FREQ 18000000// 18MHz

void LCD_Delay(__uint16_t Time_ms){
 8003dbc:	b480      	push	{r7}
 8003dbe:	b085      	sub	sp, #20
 8003dc0:	af00      	add	r7, sp, #0
 8003dc2:	4603      	mov	r3, r0
 8003dc4:	80fb      	strh	r3, [r7, #6]
	while(Time_ms--)
 8003dc6:	e009      	b.n	8003ddc <LCD_Delay+0x20>
		for (__uint16_t i = 0; i <= (LCD_FREQ / 10000); i++);// wait 1ms
 8003dc8:	2300      	movs	r3, #0
 8003dca:	81fb      	strh	r3, [r7, #14]
 8003dcc:	e002      	b.n	8003dd4 <LCD_Delay+0x18>
 8003dce:	89fb      	ldrh	r3, [r7, #14]
 8003dd0:	3301      	adds	r3, #1
 8003dd2:	81fb      	strh	r3, [r7, #14]
 8003dd4:	89fb      	ldrh	r3, [r7, #14]
 8003dd6:	f5b3 6fe1 	cmp.w	r3, #1800	; 0x708
 8003dda:	d9f8      	bls.n	8003dce <LCD_Delay+0x12>
#define D3 10// 10ms (30000)
#define D4 4000000 //4000
#define LCD_FREQ 18000000// 18MHz

void LCD_Delay(__uint16_t Time_ms){
	while(Time_ms--)
 8003ddc:	88fb      	ldrh	r3, [r7, #6]
 8003dde:	1e5a      	subs	r2, r3, #1
 8003de0:	80fa      	strh	r2, [r7, #6]
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d1f0      	bne.n	8003dc8 <LCD_Delay+0xc>
		for (__uint16_t i = 0; i <= (LCD_FREQ / 10000); i++);// wait 1ms
};
 8003de6:	bf00      	nop
 8003de8:	3714      	adds	r7, #20
 8003dea:	46bd      	mov	sp, r7
 8003dec:	bc80      	pop	{r7}
 8003dee:	4770      	bx	lr

08003df0 <LCD_8BIT_Init>:

/********* function for lcd 8bit initilize **************/
void LCD_8BIT_Init(struct PIN_LCD *PIN_LCD){
 8003df0:	b580      	push	{r7, lr}
 8003df2:	b082      	sub	sp, #8
 8003df4:	af00      	add	r7, sp, #0
 8003df6:	6078      	str	r0, [r7, #4]
	Init_PIN(PIN_LCD->PORT_BIT0,PIN_LCD->PIN_BIT0,Config_Out_50MHz,OP); // set pin bit 0
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	7858      	ldrb	r0, [r3, #1]
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	7819      	ldrb	r1, [r3, #0]
 8003e00:	2300      	movs	r3, #0
 8003e02:	2203      	movs	r2, #3
 8003e04:	f7ff fa86 	bl	8003314 <Init_PIN>
	Init_PIN(PIN_LCD->PORT_BIT1,PIN_LCD->PIN_BIT1,Config_Out_50MHz,OP); // set pin bit 1
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	78d8      	ldrb	r0, [r3, #3]
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	7899      	ldrb	r1, [r3, #2]
 8003e10:	2300      	movs	r3, #0
 8003e12:	2203      	movs	r2, #3
 8003e14:	f7ff fa7e 	bl	8003314 <Init_PIN>
	Init_PIN(PIN_LCD->PORT_BIT2,PIN_LCD->PIN_BIT2,Config_Out_50MHz,OP); // set pin bit 2
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	7958      	ldrb	r0, [r3, #5]
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	7919      	ldrb	r1, [r3, #4]
 8003e20:	2300      	movs	r3, #0
 8003e22:	2203      	movs	r2, #3
 8003e24:	f7ff fa76 	bl	8003314 <Init_PIN>
	Init_PIN(PIN_LCD->PORT_BIT3,PIN_LCD->PIN_BIT3,Config_Out_50MHz,OP); // set pin bit 3
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	79d8      	ldrb	r0, [r3, #7]
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	7999      	ldrb	r1, [r3, #6]
 8003e30:	2300      	movs	r3, #0
 8003e32:	2203      	movs	r2, #3
 8003e34:	f7ff fa6e 	bl	8003314 <Init_PIN>
	Init_PIN(PIN_LCD->PORT_BIT4,PIN_LCD->PIN_BIT4,Config_Out_50MHz,OP); // set pin bit 4
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	7a58      	ldrb	r0, [r3, #9]
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	7a19      	ldrb	r1, [r3, #8]
 8003e40:	2300      	movs	r3, #0
 8003e42:	2203      	movs	r2, #3
 8003e44:	f7ff fa66 	bl	8003314 <Init_PIN>
	Init_PIN(PIN_LCD->PORT_BIT5,PIN_LCD->PIN_BIT5,Config_Out_50MHz,OP); // set pin bit 5
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	7ad8      	ldrb	r0, [r3, #11]
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	7a99      	ldrb	r1, [r3, #10]
 8003e50:	2300      	movs	r3, #0
 8003e52:	2203      	movs	r2, #3
 8003e54:	f7ff fa5e 	bl	8003314 <Init_PIN>
	Init_PIN(PIN_LCD->PORT_BIT6,PIN_LCD->PIN_BIT6,Config_Out_50MHz,OP); // set pin bit 6
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	7b58      	ldrb	r0, [r3, #13]
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	7b19      	ldrb	r1, [r3, #12]
 8003e60:	2300      	movs	r3, #0
 8003e62:	2203      	movs	r2, #3
 8003e64:	f7ff fa56 	bl	8003314 <Init_PIN>
	Init_PIN(PIN_LCD->PORT_BIT7,PIN_LCD->PIN_BIT7,Config_Out_50MHz,OP); // set pin bit 7
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	7bd8      	ldrb	r0, [r3, #15]
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	7b99      	ldrb	r1, [r3, #14]
 8003e70:	2300      	movs	r3, #0
 8003e72:	2203      	movs	r2, #3
 8003e74:	f7ff fa4e 	bl	8003314 <Init_PIN>
	Init_PIN(PIN_LCD->PORT_RS,PIN_LCD->PIN_RS,Config_Out_50MHz,OP); // set pin bit RS
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	7c18      	ldrb	r0, [r3, #16]
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	7c59      	ldrb	r1, [r3, #17]
 8003e80:	2300      	movs	r3, #0
 8003e82:	2203      	movs	r2, #3
 8003e84:	f7ff fa46 	bl	8003314 <Init_PIN>
	Init_PIN(PIN_LCD->PORT_E,PIN_LCD->PIN_E,Config_Out_50MHz,OP); // set pin bit E
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	7d18      	ldrb	r0, [r3, #20]
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	7d59      	ldrb	r1, [r3, #21]
 8003e90:	2300      	movs	r3, #0
 8003e92:	2203      	movs	r2, #3
 8003e94:	f7ff fa3e 	bl	8003314 <Init_PIN>
	Init_PIN(PIN_LCD->PORT_RW,PIN_LCD->PIN_RW,Config_Out_50MHz,OP); // set pin bit RW
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	7c98      	ldrb	r0, [r3, #18]
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	7cd9      	ldrb	r1, [r3, #19]
 8003ea0:	2300      	movs	r3, #0
 8003ea2:	2203      	movs	r2, #3
 8003ea4:	f7ff fa36 	bl	8003314 <Init_PIN>
		
	LCD_Command(0x38,PIN_LCD); // send command to lcd for init lcd 8 bit
 8003ea8:	6879      	ldr	r1, [r7, #4]
 8003eaa:	2038      	movs	r0, #56	; 0x38
 8003eac:	f000 f814 	bl	8003ed8 <LCD_Command>
	LCD_Command(0x0F,PIN_LCD); // send command to lcd for Display ON
 8003eb0:	6879      	ldr	r1, [r7, #4]
 8003eb2:	200f      	movs	r0, #15
 8003eb4:	f000 f810 	bl	8003ed8 <LCD_Command>
	LCD_Command(0x01,PIN_LCD); // send command to lcd for clear Display
 8003eb8:	6879      	ldr	r1, [r7, #4]
 8003eba:	2001      	movs	r0, #1
 8003ebc:	f000 f80c 	bl	8003ed8 <LCD_Command>
	LCD_Command(0x0E,PIN_LCD); // send command to lcd for clear Display
 8003ec0:	6879      	ldr	r1, [r7, #4]
 8003ec2:	200e      	movs	r0, #14
 8003ec4:	f000 f808 	bl	8003ed8 <LCD_Command>
	LCD_Command(192,PIN_LCD); // cursor go to row 1 & column 1 // 0x80
 8003ec8:	6879      	ldr	r1, [r7, #4]
 8003eca:	20c0      	movs	r0, #192	; 0xc0
 8003ecc:	f000 f804 	bl	8003ed8 <LCD_Command>
};
 8003ed0:	bf00      	nop
 8003ed2:	3708      	adds	r7, #8
 8003ed4:	46bd      	mov	sp, r7
 8003ed6:	bd80      	pop	{r7, pc}

08003ed8 <LCD_Command>:

/************ send command to lcd *************/
void LCD_Command(unsigned char Command,struct PIN_LCD *PIN_LCD){
 8003ed8:	b580      	push	{r7, lr}
 8003eda:	b082      	sub	sp, #8
 8003edc:	af00      	add	r7, sp, #0
 8003ede:	4603      	mov	r3, r0
 8003ee0:	6039      	str	r1, [r7, #0]
 8003ee2:	71fb      	strb	r3, [r7, #7]
	Set_PIN_LCD(PIN_LCD,Command); // set Pins value
 8003ee4:	79fb      	ldrb	r3, [r7, #7]
 8003ee6:	4619      	mov	r1, r3
 8003ee8:	6838      	ldr	r0, [r7, #0]
 8003eea:	f000 f8cf 	bl	800408c <Set_PIN_LCD>
	Reset_PIN(PIN_LCD->PORT_RW,PIN_LCD->PIN_RW); // reset Pin RW
 8003eee:	683b      	ldr	r3, [r7, #0]
 8003ef0:	7c9a      	ldrb	r2, [r3, #18]
 8003ef2:	683b      	ldr	r3, [r7, #0]
 8003ef4:	7cdb      	ldrb	r3, [r3, #19]
 8003ef6:	4619      	mov	r1, r3
 8003ef8:	4610      	mov	r0, r2
 8003efa:	f7ff fe61 	bl	8003bc0 <Reset_PIN>
	Reset_PIN(PIN_LCD->PORT_RS,PIN_LCD->PIN_RS); // reset Pin RS
 8003efe:	683b      	ldr	r3, [r7, #0]
 8003f00:	7c1a      	ldrb	r2, [r3, #16]
 8003f02:	683b      	ldr	r3, [r7, #0]
 8003f04:	7c5b      	ldrb	r3, [r3, #17]
 8003f06:	4619      	mov	r1, r3
 8003f08:	4610      	mov	r0, r2
 8003f0a:	f7ff fe59 	bl	8003bc0 <Reset_PIN>
	Set_PIN(PIN_LCD->PORT_E,PIN_LCD->PIN_E); // set Pin Enable LCD
 8003f0e:	683b      	ldr	r3, [r7, #0]
 8003f10:	7d1a      	ldrb	r2, [r3, #20]
 8003f12:	683b      	ldr	r3, [r7, #0]
 8003f14:	7d5b      	ldrb	r3, [r3, #21]
 8003f16:	4619      	mov	r1, r3
 8003f18:	4610      	mov	r0, r2
 8003f1a:	f7ff fdb7 	bl	8003a8c <Set_PIN>
	LCD_Delay(D1);// wait 2ms
 8003f1e:	2002      	movs	r0, #2
 8003f20:	f7ff ff4c 	bl	8003dbc <LCD_Delay>
	Reset_PIN(PIN_LCD->PORT_E,PIN_LCD->PIN_E); // Reset Pin Enable LCD
 8003f24:	683b      	ldr	r3, [r7, #0]
 8003f26:	7d1a      	ldrb	r2, [r3, #20]
 8003f28:	683b      	ldr	r3, [r7, #0]
 8003f2a:	7d5b      	ldrb	r3, [r3, #21]
 8003f2c:	4619      	mov	r1, r3
 8003f2e:	4610      	mov	r0, r2
 8003f30:	f7ff fe46 	bl	8003bc0 <Reset_PIN>
	LCD_Delay(D1);// wait 2ms
 8003f34:	2002      	movs	r0, #2
 8003f36:	f7ff ff41 	bl	8003dbc <LCD_Delay>
	Reset_PIN_LCD(PIN_LCD,Command); // reset Pins data
 8003f3a:	79fb      	ldrb	r3, [r7, #7]
 8003f3c:	4619      	mov	r1, r3
 8003f3e:	6838      	ldr	r0, [r7, #0]
 8003f40:	f000 f926 	bl	8004190 <Reset_PIN_LCD>
};
 8003f44:	bf00      	nop
 8003f46:	3708      	adds	r7, #8
 8003f48:	46bd      	mov	sp, r7
 8003f4a:	bd80      	pop	{r7, pc}

08003f4c <LCD_PutChar>:

/************ send Character to lcd *************/
void LCD_PutChar(char Char,struct PIN_LCD *PIN_LCD){
 8003f4c:	b580      	push	{r7, lr}
 8003f4e:	b082      	sub	sp, #8
 8003f50:	af00      	add	r7, sp, #0
 8003f52:	4603      	mov	r3, r0
 8003f54:	6039      	str	r1, [r7, #0]
 8003f56:	71fb      	strb	r3, [r7, #7]
	Set_PIN_LCD(PIN_LCD,Char); // set pins data
 8003f58:	79fb      	ldrb	r3, [r7, #7]
 8003f5a:	4619      	mov	r1, r3
 8003f5c:	6838      	ldr	r0, [r7, #0]
 8003f5e:	f000 f895 	bl	800408c <Set_PIN_LCD>
	Set_PIN(PIN_LCD->PORT_RS,PIN_LCD->PIN_RS); // set pin RS
 8003f62:	683b      	ldr	r3, [r7, #0]
 8003f64:	7c1a      	ldrb	r2, [r3, #16]
 8003f66:	683b      	ldr	r3, [r7, #0]
 8003f68:	7c5b      	ldrb	r3, [r3, #17]
 8003f6a:	4619      	mov	r1, r3
 8003f6c:	4610      	mov	r0, r2
 8003f6e:	f7ff fd8d 	bl	8003a8c <Set_PIN>
	Reset_PIN(PIN_LCD->PORT_RW,PIN_LCD->PIN_RW); // reset pin RW
 8003f72:	683b      	ldr	r3, [r7, #0]
 8003f74:	7c9a      	ldrb	r2, [r3, #18]
 8003f76:	683b      	ldr	r3, [r7, #0]
 8003f78:	7cdb      	ldrb	r3, [r3, #19]
 8003f7a:	4619      	mov	r1, r3
 8003f7c:	4610      	mov	r0, r2
 8003f7e:	f7ff fe1f 	bl	8003bc0 <Reset_PIN>
	Set_PIN(PIN_LCD->PORT_E,PIN_LCD->PIN_E); // set pin E
 8003f82:	683b      	ldr	r3, [r7, #0]
 8003f84:	7d1a      	ldrb	r2, [r3, #20]
 8003f86:	683b      	ldr	r3, [r7, #0]
 8003f88:	7d5b      	ldrb	r3, [r3, #21]
 8003f8a:	4619      	mov	r1, r3
 8003f8c:	4610      	mov	r0, r2
 8003f8e:	f7ff fd7d 	bl	8003a8c <Set_PIN>
	LCD_Delay(D1);// wait 2ms
 8003f92:	2002      	movs	r0, #2
 8003f94:	f7ff ff12 	bl	8003dbc <LCD_Delay>
	Reset_PIN(PIN_LCD->PORT_E,PIN_LCD->PIN_E); // reset pin Enable lcd
 8003f98:	683b      	ldr	r3, [r7, #0]
 8003f9a:	7d1a      	ldrb	r2, [r3, #20]
 8003f9c:	683b      	ldr	r3, [r7, #0]
 8003f9e:	7d5b      	ldrb	r3, [r3, #21]
 8003fa0:	4619      	mov	r1, r3
 8003fa2:	4610      	mov	r0, r2
 8003fa4:	f7ff fe0c 	bl	8003bc0 <Reset_PIN>
	LCD_Delay(D3);// wait 10ms
 8003fa8:	200a      	movs	r0, #10
 8003faa:	f7ff ff07 	bl	8003dbc <LCD_Delay>
	Reset_PIN_LCD(PIN_LCD,Char); // reset pins data
 8003fae:	79fb      	ldrb	r3, [r7, #7]
 8003fb0:	4619      	mov	r1, r3
 8003fb2:	6838      	ldr	r0, [r7, #0]
 8003fb4:	f000 f8ec 	bl	8004190 <Reset_PIN_LCD>
};
 8003fb8:	bf00      	nop
 8003fba:	3708      	adds	r7, #8
 8003fbc:	46bd      	mov	sp, r7
 8003fbe:	bd80      	pop	{r7, pc}

08003fc0 <LCD_Printf>:

/**************** Send String to LCD character *****************/
void LCD_Printf(char s[], struct PIN_LCD *PIN_LCD){
 8003fc0:	b580      	push	{r7, lr}
 8003fc2:	b084      	sub	sp, #16
 8003fc4:	af00      	add	r7, sp, #0
 8003fc6:	6078      	str	r0, [r7, #4]
 8003fc8:	6039      	str	r1, [r7, #0]
	char i = strlen(s); // variable i == number length string
 8003fca:	6878      	ldr	r0, [r7, #4]
 8003fcc:	f7fc f8ca 	bl	8000164 <strlen>
 8003fd0:	4603      	mov	r3, r0
 8003fd2:	73bb      	strb	r3, [r7, #14]
	char c;
	for(c = 0;c < i;c++){
 8003fd4:	2300      	movs	r3, #0
 8003fd6:	73fb      	strb	r3, [r7, #15]
 8003fd8:	e00a      	b.n	8003ff0 <LCD_Printf+0x30>
		LCD_PutChar(s[c], PIN_LCD); // send character
 8003fda:	7bfb      	ldrb	r3, [r7, #15]
 8003fdc:	687a      	ldr	r2, [r7, #4]
 8003fde:	4413      	add	r3, r2
 8003fe0:	781b      	ldrb	r3, [r3, #0]
 8003fe2:	6839      	ldr	r1, [r7, #0]
 8003fe4:	4618      	mov	r0, r3
 8003fe6:	f7ff ffb1 	bl	8003f4c <LCD_PutChar>

/**************** Send String to LCD character *****************/
void LCD_Printf(char s[], struct PIN_LCD *PIN_LCD){
	char i = strlen(s); // variable i == number length string
	char c;
	for(c = 0;c < i;c++){
 8003fea:	7bfb      	ldrb	r3, [r7, #15]
 8003fec:	3301      	adds	r3, #1
 8003fee:	73fb      	strb	r3, [r7, #15]
 8003ff0:	7bfa      	ldrb	r2, [r7, #15]
 8003ff2:	7bbb      	ldrb	r3, [r7, #14]
 8003ff4:	429a      	cmp	r2, r3
 8003ff6:	d3f0      	bcc.n	8003fda <LCD_Printf+0x1a>
		LCD_PutChar(s[c], PIN_LCD); // send character
	}
};
 8003ff8:	bf00      	nop
 8003ffa:	3710      	adds	r7, #16
 8003ffc:	46bd      	mov	sp, r7
 8003ffe:	bd80      	pop	{r7, pc}

08004000 <LCD_CLS>:

/************** command Ready for LCD character **************/
void LCD_CLS(struct PIN_LCD *PIN_LCD){
 8004000:	b580      	push	{r7, lr}
 8004002:	b082      	sub	sp, #8
 8004004:	af00      	add	r7, sp, #0
 8004006:	6078      	str	r0, [r7, #4]
	LCD_Command(0x01, PIN_LCD); // clear LCD character
 8004008:	6879      	ldr	r1, [r7, #4]
 800400a:	2001      	movs	r0, #1
 800400c:	f7ff ff64 	bl	8003ed8 <LCD_Command>
};
 8004010:	bf00      	nop
 8004012:	3708      	adds	r7, #8
 8004014:	46bd      	mov	sp, r7
 8004016:	bd80      	pop	{r7, pc}

08004018 <LCD_Home>:

void LCD_Home(struct PIN_LCD *PIN_LCD){
 8004018:	b580      	push	{r7, lr}
 800401a:	b082      	sub	sp, #8
 800401c:	af00      	add	r7, sp, #0
 800401e:	6078      	str	r0, [r7, #4]
	LCD_Command(0x02, PIN_LCD); // return Home
 8004020:	6879      	ldr	r1, [r7, #4]
 8004022:	2002      	movs	r0, #2
 8004024:	f7ff ff58 	bl	8003ed8 <LCD_Command>
};
 8004028:	bf00      	nop
 800402a:	3708      	adds	r7, #8
 800402c:	46bd      	mov	sp, r7
 800402e:	bd80      	pop	{r7, pc}

08004030 <LCD_XY>:

void LCD_XY(char x, char y, struct PIN_LCD *PIN_LCD){
 8004030:	b580      	push	{r7, lr}
 8004032:	b082      	sub	sp, #8
 8004034:	af00      	add	r7, sp, #0
 8004036:	4603      	mov	r3, r0
 8004038:	603a      	str	r2, [r7, #0]
 800403a:	71fb      	strb	r3, [r7, #7]
 800403c:	460b      	mov	r3, r1
 800403e:	71bb      	strb	r3, [r7, #6]
	if( (y == 1) && ( (x >= 0) && (x <= 16) ) ){
 8004040:	79bb      	ldrb	r3, [r7, #6]
 8004042:	2b01      	cmp	r3, #1
 8004044:	d10b      	bne.n	800405e <LCD_XY+0x2e>
 8004046:	79fb      	ldrb	r3, [r7, #7]
 8004048:	2b10      	cmp	r3, #16
 800404a:	d808      	bhi.n	800405e <LCD_XY+0x2e>
		LCD_Command( (128 | x) , PIN_LCD);
 800404c:	79fb      	ldrb	r3, [r7, #7]
 800404e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004052:	b2db      	uxtb	r3, r3
 8004054:	6839      	ldr	r1, [r7, #0]
 8004056:	4618      	mov	r0, r3
 8004058:	f7ff ff3e 	bl	8003ed8 <LCD_Command>
	}
	else if(y == 2 && ( (x >= 0 && x <= 16) ) ){
		LCD_Command( (128 | (x + 64) ) , PIN_LCD);
	}
};
 800405c:	e011      	b.n	8004082 <LCD_XY+0x52>

void LCD_XY(char x, char y, struct PIN_LCD *PIN_LCD){
	if( (y == 1) && ( (x >= 0) && (x <= 16) ) ){
		LCD_Command( (128 | x) , PIN_LCD);
	}
	else if(y == 2 && ( (x >= 0 && x <= 16) ) ){
 800405e:	79bb      	ldrb	r3, [r7, #6]
 8004060:	2b02      	cmp	r3, #2
 8004062:	d10e      	bne.n	8004082 <LCD_XY+0x52>
 8004064:	79fb      	ldrb	r3, [r7, #7]
 8004066:	2b10      	cmp	r3, #16
 8004068:	d80b      	bhi.n	8004082 <LCD_XY+0x52>
		LCD_Command( (128 | (x + 64) ) , PIN_LCD);
 800406a:	79fb      	ldrb	r3, [r7, #7]
 800406c:	3340      	adds	r3, #64	; 0x40
 800406e:	b2db      	uxtb	r3, r3
 8004070:	b25b      	sxtb	r3, r3
 8004072:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004076:	b25b      	sxtb	r3, r3
 8004078:	b2db      	uxtb	r3, r3
 800407a:	6839      	ldr	r1, [r7, #0]
 800407c:	4618      	mov	r0, r3
 800407e:	f7ff ff2b 	bl	8003ed8 <LCD_Command>
	}
};
 8004082:	bf00      	nop
 8004084:	3708      	adds	r7, #8
 8004086:	46bd      	mov	sp, r7
 8004088:	bd80      	pop	{r7, pc}
 800408a:	bf00      	nop

0800408c <Set_PIN_LCD>:
void Set_PIN_LCD(struct PIN_LCD *PIN_LCD,char Value){
 800408c:	b580      	push	{r7, lr}
 800408e:	b082      	sub	sp, #8
 8004090:	af00      	add	r7, sp, #0
 8004092:	6078      	str	r0, [r7, #4]
 8004094:	460b      	mov	r3, r1
 8004096:	70fb      	strb	r3, [r7, #3]
	if( (Value - 128) >= 0){
 8004098:	78fb      	ldrb	r3, [r7, #3]
 800409a:	3b80      	subs	r3, #128	; 0x80
 800409c:	2b00      	cmp	r3, #0
 800409e:	db0a      	blt.n	80040b6 <Set_PIN_LCD+0x2a>
	Set_PIN(PIN_LCD->PORT_BIT7,PIN_LCD->PIN_BIT7); // while (value -128) >=0 set PIN
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	7bda      	ldrb	r2, [r3, #15]
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	7b9b      	ldrb	r3, [r3, #14]
 80040a8:	4619      	mov	r1, r3
 80040aa:	4610      	mov	r0, r2
 80040ac:	f7ff fcee 	bl	8003a8c <Set_PIN>
	Value = Value - 128;
 80040b0:	78fb      	ldrb	r3, [r7, #3]
 80040b2:	3b80      	subs	r3, #128	; 0x80
 80040b4:	70fb      	strb	r3, [r7, #3]
	};
	
	if( (Value - 64) >= 0){
 80040b6:	78fb      	ldrb	r3, [r7, #3]
 80040b8:	3b40      	subs	r3, #64	; 0x40
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	db0a      	blt.n	80040d4 <Set_PIN_LCD+0x48>
	Set_PIN(PIN_LCD->PORT_BIT6,PIN_LCD->PIN_BIT6); // while (value -64) >=0 set PIN
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	7b5a      	ldrb	r2, [r3, #13]
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	7b1b      	ldrb	r3, [r3, #12]
 80040c6:	4619      	mov	r1, r3
 80040c8:	4610      	mov	r0, r2
 80040ca:	f7ff fcdf 	bl	8003a8c <Set_PIN>
	Value = Value - 64;
 80040ce:	78fb      	ldrb	r3, [r7, #3]
 80040d0:	3b40      	subs	r3, #64	; 0x40
 80040d2:	70fb      	strb	r3, [r7, #3]
	};
	
	if( (Value - 32) >= 0){
 80040d4:	78fb      	ldrb	r3, [r7, #3]
 80040d6:	3b20      	subs	r3, #32
 80040d8:	2b00      	cmp	r3, #0
 80040da:	db0a      	blt.n	80040f2 <Set_PIN_LCD+0x66>
	Set_PIN(PIN_LCD->PORT_BIT5,PIN_LCD->PIN_BIT5); // while (value -32) >=0 set PIN
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	7ada      	ldrb	r2, [r3, #11]
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	7a9b      	ldrb	r3, [r3, #10]
 80040e4:	4619      	mov	r1, r3
 80040e6:	4610      	mov	r0, r2
 80040e8:	f7ff fcd0 	bl	8003a8c <Set_PIN>
	Value = Value - 32;
 80040ec:	78fb      	ldrb	r3, [r7, #3]
 80040ee:	3b20      	subs	r3, #32
 80040f0:	70fb      	strb	r3, [r7, #3]
	};
	
	if( (Value - 16) >= 0){
 80040f2:	78fb      	ldrb	r3, [r7, #3]
 80040f4:	3b10      	subs	r3, #16
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	db0a      	blt.n	8004110 <Set_PIN_LCD+0x84>
	Set_PIN(PIN_LCD->PORT_BIT4,PIN_LCD->PIN_BIT4); // while (value -16) >=0 set PIN
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	7a5a      	ldrb	r2, [r3, #9]
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	7a1b      	ldrb	r3, [r3, #8]
 8004102:	4619      	mov	r1, r3
 8004104:	4610      	mov	r0, r2
 8004106:	f7ff fcc1 	bl	8003a8c <Set_PIN>
	Value = Value - 16;
 800410a:	78fb      	ldrb	r3, [r7, #3]
 800410c:	3b10      	subs	r3, #16
 800410e:	70fb      	strb	r3, [r7, #3]
	};
	
	if( (Value - 8) >= 0){
 8004110:	78fb      	ldrb	r3, [r7, #3]
 8004112:	3b08      	subs	r3, #8
 8004114:	2b00      	cmp	r3, #0
 8004116:	db0a      	blt.n	800412e <Set_PIN_LCD+0xa2>
	Set_PIN(PIN_LCD->PORT_BIT3,PIN_LCD->PIN_BIT3); // while (value -8) >=0 set PIN
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	79da      	ldrb	r2, [r3, #7]
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	799b      	ldrb	r3, [r3, #6]
 8004120:	4619      	mov	r1, r3
 8004122:	4610      	mov	r0, r2
 8004124:	f7ff fcb2 	bl	8003a8c <Set_PIN>
	Value = Value - 8;
 8004128:	78fb      	ldrb	r3, [r7, #3]
 800412a:	3b08      	subs	r3, #8
 800412c:	70fb      	strb	r3, [r7, #3]
	};
	
	if( (Value - 4) >= 0){
 800412e:	78fb      	ldrb	r3, [r7, #3]
 8004130:	3b04      	subs	r3, #4
 8004132:	2b00      	cmp	r3, #0
 8004134:	db0a      	blt.n	800414c <Set_PIN_LCD+0xc0>
	Set_PIN(PIN_LCD->PORT_BIT2,PIN_LCD->PIN_BIT2); // while (value -4) >=0 set PIN
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	795a      	ldrb	r2, [r3, #5]
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	791b      	ldrb	r3, [r3, #4]
 800413e:	4619      	mov	r1, r3
 8004140:	4610      	mov	r0, r2
 8004142:	f7ff fca3 	bl	8003a8c <Set_PIN>
	Value = Value - 4;
 8004146:	78fb      	ldrb	r3, [r7, #3]
 8004148:	3b04      	subs	r3, #4
 800414a:	70fb      	strb	r3, [r7, #3]
	};
	
	if( (Value - 2) >= 0){
 800414c:	78fb      	ldrb	r3, [r7, #3]
 800414e:	3b02      	subs	r3, #2
 8004150:	2b00      	cmp	r3, #0
 8004152:	db0a      	blt.n	800416a <Set_PIN_LCD+0xde>
	Set_PIN(PIN_LCD->PORT_BIT1,PIN_LCD->PIN_BIT1); // while (value -2) >=0 set PIN
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	78da      	ldrb	r2, [r3, #3]
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	789b      	ldrb	r3, [r3, #2]
 800415c:	4619      	mov	r1, r3
 800415e:	4610      	mov	r0, r2
 8004160:	f7ff fc94 	bl	8003a8c <Set_PIN>
	Value = Value - 2;
 8004164:	78fb      	ldrb	r3, [r7, #3]
 8004166:	3b02      	subs	r3, #2
 8004168:	70fb      	strb	r3, [r7, #3]
	};
	
	if( (Value - 1) >= 0){
 800416a:	78fb      	ldrb	r3, [r7, #3]
 800416c:	3b01      	subs	r3, #1
 800416e:	2b00      	cmp	r3, #0
 8004170:	db0a      	blt.n	8004188 <Set_PIN_LCD+0xfc>
	Set_PIN(PIN_LCD->PORT_BIT0,PIN_LCD->PIN_BIT0); // while (value -1) >=0 set PIN
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	785a      	ldrb	r2, [r3, #1]
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	781b      	ldrb	r3, [r3, #0]
 800417a:	4619      	mov	r1, r3
 800417c:	4610      	mov	r0, r2
 800417e:	f7ff fc85 	bl	8003a8c <Set_PIN>
	Value = Value - 1;
 8004182:	78fb      	ldrb	r3, [r7, #3]
 8004184:	3b01      	subs	r3, #1
 8004186:	70fb      	strb	r3, [r7, #3]
	};
	
};
 8004188:	bf00      	nop
 800418a:	3708      	adds	r7, #8
 800418c:	46bd      	mov	sp, r7
 800418e:	bd80      	pop	{r7, pc}

08004190 <Reset_PIN_LCD>:


void Reset_PIN_LCD(struct PIN_LCD *PIN_LCD,char Value){
 8004190:	b580      	push	{r7, lr}
 8004192:	b082      	sub	sp, #8
 8004194:	af00      	add	r7, sp, #0
 8004196:	6078      	str	r0, [r7, #4]
 8004198:	460b      	mov	r3, r1
 800419a:	70fb      	strb	r3, [r7, #3]
	if( (Value - 128) >= 0){
 800419c:	78fb      	ldrb	r3, [r7, #3]
 800419e:	3b80      	subs	r3, #128	; 0x80
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	db0a      	blt.n	80041ba <Reset_PIN_LCD+0x2a>
	Reset_PIN(PIN_LCD->PORT_BIT7,PIN_LCD->PIN_BIT7); // while (value -128) >=0 reset PIN
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	7bda      	ldrb	r2, [r3, #15]
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	7b9b      	ldrb	r3, [r3, #14]
 80041ac:	4619      	mov	r1, r3
 80041ae:	4610      	mov	r0, r2
 80041b0:	f7ff fd06 	bl	8003bc0 <Reset_PIN>
	Value = Value - 128;
 80041b4:	78fb      	ldrb	r3, [r7, #3]
 80041b6:	3b80      	subs	r3, #128	; 0x80
 80041b8:	70fb      	strb	r3, [r7, #3]
	};
	
	if( (Value - 64) >= 0){
 80041ba:	78fb      	ldrb	r3, [r7, #3]
 80041bc:	3b40      	subs	r3, #64	; 0x40
 80041be:	2b00      	cmp	r3, #0
 80041c0:	db0a      	blt.n	80041d8 <Reset_PIN_LCD+0x48>
	Reset_PIN(PIN_LCD->PORT_BIT6,PIN_LCD->PIN_BIT6); // while (value -64) >=0 reset PIN
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	7b5a      	ldrb	r2, [r3, #13]
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	7b1b      	ldrb	r3, [r3, #12]
 80041ca:	4619      	mov	r1, r3
 80041cc:	4610      	mov	r0, r2
 80041ce:	f7ff fcf7 	bl	8003bc0 <Reset_PIN>
	Value = Value - 64;
 80041d2:	78fb      	ldrb	r3, [r7, #3]
 80041d4:	3b40      	subs	r3, #64	; 0x40
 80041d6:	70fb      	strb	r3, [r7, #3]
	};
	
	if( (Value - 32) >= 0){
 80041d8:	78fb      	ldrb	r3, [r7, #3]
 80041da:	3b20      	subs	r3, #32
 80041dc:	2b00      	cmp	r3, #0
 80041de:	db0a      	blt.n	80041f6 <Reset_PIN_LCD+0x66>
	Reset_PIN(PIN_LCD->PORT_BIT5,PIN_LCD->PIN_BIT5); // while (value -32) >=0 reset PIN
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	7ada      	ldrb	r2, [r3, #11]
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	7a9b      	ldrb	r3, [r3, #10]
 80041e8:	4619      	mov	r1, r3
 80041ea:	4610      	mov	r0, r2
 80041ec:	f7ff fce8 	bl	8003bc0 <Reset_PIN>
	Value = Value - 32;
 80041f0:	78fb      	ldrb	r3, [r7, #3]
 80041f2:	3b20      	subs	r3, #32
 80041f4:	70fb      	strb	r3, [r7, #3]
	};
	
	if( (Value - 16) >= 0){
 80041f6:	78fb      	ldrb	r3, [r7, #3]
 80041f8:	3b10      	subs	r3, #16
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	db0a      	blt.n	8004214 <Reset_PIN_LCD+0x84>
	Reset_PIN(PIN_LCD->PORT_BIT4,PIN_LCD->PIN_BIT4); // while (value -16) >=0 reset PIN
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	7a5a      	ldrb	r2, [r3, #9]
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	7a1b      	ldrb	r3, [r3, #8]
 8004206:	4619      	mov	r1, r3
 8004208:	4610      	mov	r0, r2
 800420a:	f7ff fcd9 	bl	8003bc0 <Reset_PIN>
	Value = Value - 16;
 800420e:	78fb      	ldrb	r3, [r7, #3]
 8004210:	3b10      	subs	r3, #16
 8004212:	70fb      	strb	r3, [r7, #3]
	};
	
	if( (Value - 8) >= 0){
 8004214:	78fb      	ldrb	r3, [r7, #3]
 8004216:	3b08      	subs	r3, #8
 8004218:	2b00      	cmp	r3, #0
 800421a:	db0a      	blt.n	8004232 <Reset_PIN_LCD+0xa2>
	Reset_PIN(PIN_LCD->PORT_BIT3,PIN_LCD->PIN_BIT3); // while (value -8) >=0 reset PIN
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	79da      	ldrb	r2, [r3, #7]
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	799b      	ldrb	r3, [r3, #6]
 8004224:	4619      	mov	r1, r3
 8004226:	4610      	mov	r0, r2
 8004228:	f7ff fcca 	bl	8003bc0 <Reset_PIN>
	Value = Value - 8;
 800422c:	78fb      	ldrb	r3, [r7, #3]
 800422e:	3b08      	subs	r3, #8
 8004230:	70fb      	strb	r3, [r7, #3]
	};
	
	if( (Value - 4) >= 0){
 8004232:	78fb      	ldrb	r3, [r7, #3]
 8004234:	3b04      	subs	r3, #4
 8004236:	2b00      	cmp	r3, #0
 8004238:	db0a      	blt.n	8004250 <Reset_PIN_LCD+0xc0>
	Reset_PIN(PIN_LCD->PORT_BIT2,PIN_LCD->PIN_BIT2); // while (value -4) >=0 reset PIN
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	795a      	ldrb	r2, [r3, #5]
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	791b      	ldrb	r3, [r3, #4]
 8004242:	4619      	mov	r1, r3
 8004244:	4610      	mov	r0, r2
 8004246:	f7ff fcbb 	bl	8003bc0 <Reset_PIN>
	Value = Value - 4;
 800424a:	78fb      	ldrb	r3, [r7, #3]
 800424c:	3b04      	subs	r3, #4
 800424e:	70fb      	strb	r3, [r7, #3]
	};
	
	if( (Value - 2) >= 0){
 8004250:	78fb      	ldrb	r3, [r7, #3]
 8004252:	3b02      	subs	r3, #2
 8004254:	2b00      	cmp	r3, #0
 8004256:	db0a      	blt.n	800426e <Reset_PIN_LCD+0xde>
	Reset_PIN(PIN_LCD->PORT_BIT1,PIN_LCD->PIN_BIT1); // while (value -2) >=0 reset PIN
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	78da      	ldrb	r2, [r3, #3]
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	789b      	ldrb	r3, [r3, #2]
 8004260:	4619      	mov	r1, r3
 8004262:	4610      	mov	r0, r2
 8004264:	f7ff fcac 	bl	8003bc0 <Reset_PIN>
	Value = Value - 2;
 8004268:	78fb      	ldrb	r3, [r7, #3]
 800426a:	3b02      	subs	r3, #2
 800426c:	70fb      	strb	r3, [r7, #3]
	};
	
	if( (Value - 1) >= 0){
 800426e:	78fb      	ldrb	r3, [r7, #3]
 8004270:	3b01      	subs	r3, #1
 8004272:	2b00      	cmp	r3, #0
 8004274:	db0a      	blt.n	800428c <Reset_PIN_LCD+0xfc>
	Reset_PIN(PIN_LCD->PORT_BIT0,PIN_LCD->PIN_BIT0); // while (value -1) >=0 reset PIN
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	785a      	ldrb	r2, [r3, #1]
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	781b      	ldrb	r3, [r3, #0]
 800427e:	4619      	mov	r1, r3
 8004280:	4610      	mov	r0, r2
 8004282:	f7ff fc9d 	bl	8003bc0 <Reset_PIN>
	Value = Value - 1;
 8004286:	78fb      	ldrb	r3, [r7, #3]
 8004288:	3b01      	subs	r3, #1
 800428a:	70fb      	strb	r3, [r7, #3]
	};
	
};
 800428c:	bf00      	nop
 800428e:	3708      	adds	r7, #8
 8004290:	46bd      	mov	sp, r7
 8004292:	bd80      	pop	{r7, pc}

08004294 <PLL_ON>:
char Src_SYS ;




void PLL_ON(void){
 8004294:	b480      	push	{r7}
 8004296:	af00      	add	r7, sp, #0
		RCC->CFGR &= ~(3 << 0); 
 8004298:	4a0c      	ldr	r2, [pc, #48]	; (80042cc <PLL_ON+0x38>)
 800429a:	4b0c      	ldr	r3, [pc, #48]	; (80042cc <PLL_ON+0x38>)
 800429c:	685b      	ldr	r3, [r3, #4]
 800429e:	f023 0303 	bic.w	r3, r3, #3
 80042a2:	6053      	str	r3, [r2, #4]
		RCC->CFGR |= Src_SYS; //system clock switch(Bit SW In Register CFGR) = Pvar Src_SYS
 80042a4:	4a09      	ldr	r2, [pc, #36]	; (80042cc <PLL_ON+0x38>)
 80042a6:	4b09      	ldr	r3, [pc, #36]	; (80042cc <PLL_ON+0x38>)
 80042a8:	685b      	ldr	r3, [r3, #4]
 80042aa:	4909      	ldr	r1, [pc, #36]	; (80042d0 <PLL_ON+0x3c>)
 80042ac:	7809      	ldrb	r1, [r1, #0]
 80042ae:	430b      	orrs	r3, r1
 80042b0:	6053      	str	r3, [r2, #4]
		RCC->CR |= (1 << 24); //PLL ON
 80042b2:	4a06      	ldr	r2, [pc, #24]	; (80042cc <PLL_ON+0x38>)
 80042b4:	4b05      	ldr	r3, [pc, #20]	; (80042cc <PLL_ON+0x38>)
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80042bc:	6013      	str	r3, [r2, #0]
		while( ((RCC->CR & (1 << 25) ) == 1) && ( ( RCC->CFGR & 12 ) != (Src_SYS << 2) ) ); //wait for start  
 80042be:	bf00      	nop
 80042c0:	4b02      	ldr	r3, [pc, #8]	; (80042cc <PLL_ON+0x38>)
 80042c2:	681b      	ldr	r3, [r3, #0]
};
 80042c4:	bf00      	nop
 80042c6:	46bd      	mov	sp, r7
 80042c8:	bc80      	pop	{r7}
 80042ca:	4770      	bx	lr
 80042cc:	40021000 	.word	0x40021000
 80042d0:	20000174 	.word	0x20000174

080042d4 <PLL_OFF>:

void PLL_OFF(void){
 80042d4:	b480      	push	{r7}
 80042d6:	af00      	add	r7, sp, #0
		Src_SYS = RCC->CFGR & (3);
 80042d8:	4b12      	ldr	r3, [pc, #72]	; (8004324 <PLL_OFF+0x50>)
 80042da:	685b      	ldr	r3, [r3, #4]
 80042dc:	b2db      	uxtb	r3, r3
 80042de:	f003 0303 	and.w	r3, r3, #3
 80042e2:	b2da      	uxtb	r2, r3
 80042e4:	4b10      	ldr	r3, [pc, #64]	; (8004328 <PLL_OFF+0x54>)
 80042e6:	701a      	strb	r2, [r3, #0]
		RCC->CFGR |= (3 << 0); //system clock switch = not allowed
 80042e8:	4a0e      	ldr	r2, [pc, #56]	; (8004324 <PLL_OFF+0x50>)
 80042ea:	4b0e      	ldr	r3, [pc, #56]	; (8004324 <PLL_OFF+0x50>)
 80042ec:	685b      	ldr	r3, [r3, #4]
 80042ee:	f043 0303 	orr.w	r3, r3, #3
 80042f2:	6053      	str	r3, [r2, #4]
		RCC->CR &= ~(1 << 24); // pll off
 80042f4:	4a0b      	ldr	r2, [pc, #44]	; (8004324 <PLL_OFF+0x50>)
 80042f6:	4b0b      	ldr	r3, [pc, #44]	; (8004324 <PLL_OFF+0x50>)
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80042fe:	6013      	str	r3, [r2, #0]
		while( ((RCC->CR & (1 << 25) ) == 0) && ((RCC->CFGR & 12)== 12) ); //wait for OFF PLL & SW
 8004300:	bf00      	nop
 8004302:	4b08      	ldr	r3, [pc, #32]	; (8004324 <PLL_OFF+0x50>)
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800430a:	2b00      	cmp	r3, #0
 800430c:	d105      	bne.n	800431a <PLL_OFF+0x46>
 800430e:	4b05      	ldr	r3, [pc, #20]	; (8004324 <PLL_OFF+0x50>)
 8004310:	685b      	ldr	r3, [r3, #4]
 8004312:	f003 030c 	and.w	r3, r3, #12
 8004316:	2b0c      	cmp	r3, #12
 8004318:	d0f3      	beq.n	8004302 <PLL_OFF+0x2e>
};
 800431a:	bf00      	nop
 800431c:	46bd      	mov	sp, r7
 800431e:	bc80      	pop	{r7}
 8004320:	4770      	bx	lr
 8004322:	bf00      	nop
 8004324:	40021000 	.word	0x40021000
 8004328:	20000174 	.word	0x20000174

0800432c <PLL_MUL>:

void PLL_MUL(char N2_16){
 800432c:	b580      	push	{r7, lr}
 800432e:	b082      	sub	sp, #8
 8004330:	af00      	add	r7, sp, #0
 8004332:	4603      	mov	r3, r0
 8004334:	71fb      	strb	r3, [r7, #7]
		if( (N2_16 >= 2) && (N2_16 <= 16) ){
 8004336:	79fb      	ldrb	r3, [r7, #7]
 8004338:	2b01      	cmp	r3, #1
 800433a:	d914      	bls.n	8004366 <PLL_MUL+0x3a>
 800433c:	79fb      	ldrb	r3, [r7, #7]
 800433e:	2b10      	cmp	r3, #16
 8004340:	d811      	bhi.n	8004366 <PLL_MUL+0x3a>
				PLL_OFF(); //PLL Disable
 8004342:	f7ff ffc7 	bl	80042d4 <PLL_OFF>
				RCC->CFGR &= ~(0xf << 18); //PLLMUL = 0
 8004346:	4a0a      	ldr	r2, [pc, #40]	; (8004370 <PLL_MUL+0x44>)
 8004348:	4b09      	ldr	r3, [pc, #36]	; (8004370 <PLL_MUL+0x44>)
 800434a:	685b      	ldr	r3, [r3, #4]
 800434c:	f423 1370 	bic.w	r3, r3, #3932160	; 0x3c0000
 8004350:	6053      	str	r3, [r2, #4]
				RCC->CFGR |= ( (N2_16 - 2) << 18 ); //set PLL Multiplication
 8004352:	4907      	ldr	r1, [pc, #28]	; (8004370 <PLL_MUL+0x44>)
 8004354:	4b06      	ldr	r3, [pc, #24]	; (8004370 <PLL_MUL+0x44>)
 8004356:	685b      	ldr	r3, [r3, #4]
 8004358:	79fa      	ldrb	r2, [r7, #7]
 800435a:	3a02      	subs	r2, #2
 800435c:	0492      	lsls	r2, r2, #18
 800435e:	4313      	orrs	r3, r2
 8004360:	604b      	str	r3, [r1, #4]
				PLL_ON(); //PLL Enable
 8004362:	f7ff ff97 	bl	8004294 <PLL_ON>
		}
};
 8004366:	bf00      	nop
 8004368:	3708      	adds	r7, #8
 800436a:	46bd      	mov	sp, r7
 800436c:	bd80      	pop	{r7, pc}
 800436e:	bf00      	nop
 8004370:	40021000 	.word	0x40021000

08004374 <PLL_SRC_Sel>:
		//RCC->CFGR2 &= ~0xf; // set PREDIV1(In Register CFGR2) = 0
		//RCC->CFGR2 |= (PLL_DivN1_16 - 1) << 0; // set value PREDIV1(PLL Divader)
		PLL_ON(); // PLL Enable
};

void PLL_SRC_Sel(char Sourse ){
 8004374:	b580      	push	{r7, lr}
 8004376:	b082      	sub	sp, #8
 8004378:	af00      	add	r7, sp, #0
 800437a:	4603      	mov	r3, r0
 800437c:	71fb      	strb	r3, [r7, #7]
		while( (Sourse != 1) && (Sourse != 2) ); //sourse = 1 OR 2;
 800437e:	79fb      	ldrb	r3, [r7, #7]
 8004380:	2b01      	cmp	r3, #1
 8004382:	d002      	beq.n	800438a <PLL_SRC_Sel+0x16>
 8004384:	79fb      	ldrb	r3, [r7, #7]
 8004386:	2b02      	cmp	r3, #2
 8004388:	d1f9      	bne.n	800437e <PLL_SRC_Sel+0xa>
		PLL_OFF(); // PLL Disable
 800438a:	f7ff ffa3 	bl	80042d4 <PLL_OFF>
		RCC->CFGR &= ~(1 << 16); // Bit PLLSRC = 0;
 800438e:	4a0f      	ldr	r2, [pc, #60]	; (80043cc <PLL_SRC_Sel+0x58>)
 8004390:	4b0e      	ldr	r3, [pc, #56]	; (80043cc <PLL_SRC_Sel+0x58>)
 8004392:	685b      	ldr	r3, [r3, #4]
 8004394:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004398:	6053      	str	r3, [r2, #4]
		RCC->CFGR |= ( (Sourse - 1) << 16); // Set Bit PLLSRC = Sourse
 800439a:	490c      	ldr	r1, [pc, #48]	; (80043cc <PLL_SRC_Sel+0x58>)
 800439c:	4b0b      	ldr	r3, [pc, #44]	; (80043cc <PLL_SRC_Sel+0x58>)
 800439e:	685b      	ldr	r3, [r3, #4]
 80043a0:	79fa      	ldrb	r2, [r7, #7]
 80043a2:	3a01      	subs	r2, #1
 80043a4:	0412      	lsls	r2, r2, #16
 80043a6:	4313      	orrs	r3, r2
 80043a8:	604b      	str	r3, [r1, #4]
		PLL_ON(); // PLL Enable
 80043aa:	f7ff ff73 	bl	8004294 <PLL_ON>
		while( ( RCC->CFGR & (1 << 16) ) != ( (Sourse - 1) << 16 ) ); //wait Set Bit PLLSRC = Sourse;
 80043ae:	bf00      	nop
 80043b0:	4b06      	ldr	r3, [pc, #24]	; (80043cc <PLL_SRC_Sel+0x58>)
 80043b2:	685b      	ldr	r3, [r3, #4]
 80043b4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80043b8:	79fa      	ldrb	r2, [r7, #7]
 80043ba:	3a01      	subs	r2, #1
 80043bc:	0412      	lsls	r2, r2, #16
 80043be:	4293      	cmp	r3, r2
 80043c0:	d1f6      	bne.n	80043b0 <PLL_SRC_Sel+0x3c>
};
 80043c2:	bf00      	nop
 80043c4:	3708      	adds	r7, #8
 80043c6:	46bd      	mov	sp, r7
 80043c8:	bd80      	pop	{r7, pc}
 80043ca:	bf00      	nop
 80043cc:	40021000 	.word	0x40021000

080043d0 <Src_Sys_Clk>:

void Src_Sys_Clk(char SysClk){
 80043d0:	b480      	push	{r7}
 80043d2:	b083      	sub	sp, #12
 80043d4:	af00      	add	r7, sp, #0
 80043d6:	4603      	mov	r3, r0
 80043d8:	71fb      	strb	r3, [r7, #7]
		while( (SysClk < 1) || (SysClk > 3) ); // SysClk = 1-2-3
 80043da:	79fb      	ldrb	r3, [r7, #7]
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d0fc      	beq.n	80043da <Src_Sys_Clk+0xa>
 80043e0:	79fb      	ldrb	r3, [r7, #7]
 80043e2:	2b03      	cmp	r3, #3
 80043e4:	d8f9      	bhi.n	80043da <Src_Sys_Clk+0xa>
		RCC->CFGR &= ~(3 << 0); // Set Bit SW(in register CFGR) = 0
 80043e6:	4a0e      	ldr	r2, [pc, #56]	; (8004420 <Src_Sys_Clk+0x50>)
 80043e8:	4b0d      	ldr	r3, [pc, #52]	; (8004420 <Src_Sys_Clk+0x50>)
 80043ea:	685b      	ldr	r3, [r3, #4]
 80043ec:	f023 0303 	bic.w	r3, r3, #3
 80043f0:	6053      	str	r3, [r2, #4]
		RCC->CFGR |= ( (SysClk - 1) << 0 ); // Set Bit SW = SysClk
 80043f2:	490b      	ldr	r1, [pc, #44]	; (8004420 <Src_Sys_Clk+0x50>)
 80043f4:	4b0a      	ldr	r3, [pc, #40]	; (8004420 <Src_Sys_Clk+0x50>)
 80043f6:	685b      	ldr	r3, [r3, #4]
 80043f8:	79fa      	ldrb	r2, [r7, #7]
 80043fa:	3a01      	subs	r2, #1
 80043fc:	4313      	orrs	r3, r2
 80043fe:	604b      	str	r3, [r1, #4]
		while( ( RCC->CFGR & ( 3 << 2) ) != ( ( SysClk - 1) << 2 ) ); // Check Bit SW = SysClk
 8004400:	bf00      	nop
 8004402:	4b07      	ldr	r3, [pc, #28]	; (8004420 <Src_Sys_Clk+0x50>)
 8004404:	685b      	ldr	r3, [r3, #4]
 8004406:	f003 030c 	and.w	r3, r3, #12
 800440a:	79fa      	ldrb	r2, [r7, #7]
 800440c:	3a01      	subs	r2, #1
 800440e:	0092      	lsls	r2, r2, #2
 8004410:	4293      	cmp	r3, r2
 8004412:	d1f6      	bne.n	8004402 <Src_Sys_Clk+0x32>
};
 8004414:	bf00      	nop
 8004416:	370c      	adds	r7, #12
 8004418:	46bd      	mov	sp, r7
 800441a:	bc80      	pop	{r7}
 800441c:	4770      	bx	lr
 800441e:	bf00      	nop
 8004420:	40021000 	.word	0x40021000

08004424 <AHB_Div>:

void AHB_Div(int Division){
 8004424:	b480      	push	{r7}
 8004426:	b083      	sub	sp, #12
 8004428:	af00      	add	r7, sp, #0
 800442a:	6078      	str	r0, [r7, #4]
		while(Division != 1 && Division != 2 && Division != 4 && Division != 8 && Division != 16 && Division != 64 && Division != 128 && Division != 256 && Division != 512 );  // Division = 1 Until =512
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	2b01      	cmp	r3, #1
 8004430:	d019      	beq.n	8004466 <AHB_Div+0x42>
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	2b02      	cmp	r3, #2
 8004436:	d016      	beq.n	8004466 <AHB_Div+0x42>
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	2b04      	cmp	r3, #4
 800443c:	d013      	beq.n	8004466 <AHB_Div+0x42>
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	2b08      	cmp	r3, #8
 8004442:	d010      	beq.n	8004466 <AHB_Div+0x42>
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	2b10      	cmp	r3, #16
 8004448:	d00d      	beq.n	8004466 <AHB_Div+0x42>
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	2b40      	cmp	r3, #64	; 0x40
 800444e:	d00a      	beq.n	8004466 <AHB_Div+0x42>
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	2b80      	cmp	r3, #128	; 0x80
 8004454:	d007      	beq.n	8004466 <AHB_Div+0x42>
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800445c:	d003      	beq.n	8004466 <AHB_Div+0x42>
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004464:	d1e2      	bne.n	800442c <AHB_Div+0x8>
		switch (Division){
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	2b10      	cmp	r3, #16
 800446a:	d06c      	beq.n	8004546 <AHB_Div+0x122>
 800446c:	2b10      	cmp	r3, #16
 800446e:	dc0b      	bgt.n	8004488 <AHB_Div+0x64>
 8004470:	2b02      	cmp	r3, #2
 8004472:	d02c      	beq.n	80044ce <AHB_Div+0xaa>
 8004474:	2b02      	cmp	r3, #2
 8004476:	dc02      	bgt.n	800447e <AHB_Div+0x5a>
 8004478:	2b01      	cmp	r3, #1
 800447a:	d016      	beq.n	80044aa <AHB_Div+0x86>
				RCC->CFGR |= (0xf << 4);
				while( (RCC->CFGR & (0xf << 4) ) != ( 0xf << 4 ) );
				break;
		}
		
};
 800447c:	e0c7      	b.n	800460e <AHB_Div+0x1ea>
		while( ( RCC->CFGR & ( 3 << 2) ) != ( ( SysClk - 1) << 2 ) ); // Check Bit SW = SysClk
};

void AHB_Div(int Division){
		while(Division != 1 && Division != 2 && Division != 4 && Division != 8 && Division != 16 && Division != 64 && Division != 128 && Division != 256 && Division != 512 );  // Division = 1 Until =512
		switch (Division){
 800447e:	2b04      	cmp	r3, #4
 8004480:	d039      	beq.n	80044f6 <AHB_Div+0xd2>
 8004482:	2b08      	cmp	r3, #8
 8004484:	d04b      	beq.n	800451e <AHB_Div+0xfa>
				RCC->CFGR |= (0xf << 4);
				while( (RCC->CFGR & (0xf << 4) ) != ( 0xf << 4 ) );
				break;
		}
		
};
 8004486:	e0c2      	b.n	800460e <AHB_Div+0x1ea>
		while( ( RCC->CFGR & ( 3 << 2) ) != ( ( SysClk - 1) << 2 ) ); // Check Bit SW = SysClk
};

void AHB_Div(int Division){
		while(Division != 1 && Division != 2 && Division != 4 && Division != 8 && Division != 16 && Division != 64 && Division != 128 && Division != 256 && Division != 512 );  // Division = 1 Until =512
		switch (Division){
 8004488:	2b80      	cmp	r3, #128	; 0x80
 800448a:	f000 8084 	beq.w	8004596 <AHB_Div+0x172>
 800448e:	2b80      	cmp	r3, #128	; 0x80
 8004490:	dc02      	bgt.n	8004498 <AHB_Div+0x74>
 8004492:	2b40      	cmp	r3, #64	; 0x40
 8004494:	d06b      	beq.n	800456e <AHB_Div+0x14a>
				RCC->CFGR |= (0xf << 4);
				while( (RCC->CFGR & (0xf << 4) ) != ( 0xf << 4 ) );
				break;
		}
		
};
 8004496:	e0ba      	b.n	800460e <AHB_Div+0x1ea>
		while( ( RCC->CFGR & ( 3 << 2) ) != ( ( SysClk - 1) << 2 ) ); // Check Bit SW = SysClk
};

void AHB_Div(int Division){
		while(Division != 1 && Division != 2 && Division != 4 && Division != 8 && Division != 16 && Division != 64 && Division != 128 && Division != 256 && Division != 512 );  // Division = 1 Until =512
		switch (Division){
 8004498:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800449c:	f000 808f 	beq.w	80045be <AHB_Div+0x19a>
 80044a0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80044a4:	f000 809f 	beq.w	80045e6 <AHB_Div+0x1c2>
				RCC->CFGR |= (0xf << 4);
				while( (RCC->CFGR & (0xf << 4) ) != ( 0xf << 4 ) );
				break;
		}
		
};
 80044a8:	e0b1      	b.n	800460e <AHB_Div+0x1ea>

void AHB_Div(int Division){
		while(Division != 1 && Division != 2 && Division != 4 && Division != 8 && Division != 16 && Division != 64 && Division != 128 && Division != 256 && Division != 512 );  // Division = 1 Until =512
		switch (Division){
			
				case 1: RCC->CFGR &= ~(0xf << 4); // Set Bit HPRE[3:0](In Register CFGR) = 0
 80044aa:	4a5b      	ldr	r2, [pc, #364]	; (8004618 <AHB_Div+0x1f4>)
 80044ac:	4b5a      	ldr	r3, [pc, #360]	; (8004618 <AHB_Div+0x1f4>)
 80044ae:	685b      	ldr	r3, [r3, #4]
 80044b0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80044b4:	6053      	str	r3, [r2, #4]
				RCC->CFGR |= (0 << 4); // set Bit HPRE = Division
 80044b6:	4a58      	ldr	r2, [pc, #352]	; (8004618 <AHB_Div+0x1f4>)
 80044b8:	4b57      	ldr	r3, [pc, #348]	; (8004618 <AHB_Div+0x1f4>)
 80044ba:	685b      	ldr	r3, [r3, #4]
 80044bc:	6053      	str	r3, [r2, #4]
				while( (RCC->CFGR & (0xf << 4) ) != ( 0 << 4 ) ); // check set HPRE = Division
 80044be:	bf00      	nop
 80044c0:	4b55      	ldr	r3, [pc, #340]	; (8004618 <AHB_Div+0x1f4>)
 80044c2:	685b      	ldr	r3, [r3, #4]
 80044c4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d1f9      	bne.n	80044c0 <AHB_Div+0x9c>
				break;
 80044cc:	e09f      	b.n	800460e <AHB_Div+0x1ea>
				
				case 2: RCC->CFGR &= ~(0xf << 4);
 80044ce:	4a52      	ldr	r2, [pc, #328]	; (8004618 <AHB_Div+0x1f4>)
 80044d0:	4b51      	ldr	r3, [pc, #324]	; (8004618 <AHB_Div+0x1f4>)
 80044d2:	685b      	ldr	r3, [r3, #4]
 80044d4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80044d8:	6053      	str	r3, [r2, #4]
				RCC->CFGR |= (8 << 4);
 80044da:	4a4f      	ldr	r2, [pc, #316]	; (8004618 <AHB_Div+0x1f4>)
 80044dc:	4b4e      	ldr	r3, [pc, #312]	; (8004618 <AHB_Div+0x1f4>)
 80044de:	685b      	ldr	r3, [r3, #4]
 80044e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80044e4:	6053      	str	r3, [r2, #4]
				while( (RCC->CFGR & (0xf << 4) ) != ( 8 << 4 ) );
 80044e6:	bf00      	nop
 80044e8:	4b4b      	ldr	r3, [pc, #300]	; (8004618 <AHB_Div+0x1f4>)
 80044ea:	685b      	ldr	r3, [r3, #4]
 80044ec:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80044f0:	2b80      	cmp	r3, #128	; 0x80
 80044f2:	d1f9      	bne.n	80044e8 <AHB_Div+0xc4>
				break;
 80044f4:	e08b      	b.n	800460e <AHB_Div+0x1ea>
				
				case 4: RCC->CFGR &= ~(0xf << 4);
 80044f6:	4a48      	ldr	r2, [pc, #288]	; (8004618 <AHB_Div+0x1f4>)
 80044f8:	4b47      	ldr	r3, [pc, #284]	; (8004618 <AHB_Div+0x1f4>)
 80044fa:	685b      	ldr	r3, [r3, #4]
 80044fc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004500:	6053      	str	r3, [r2, #4]
				RCC->CFGR |= (9 << 4);
 8004502:	4a45      	ldr	r2, [pc, #276]	; (8004618 <AHB_Div+0x1f4>)
 8004504:	4b44      	ldr	r3, [pc, #272]	; (8004618 <AHB_Div+0x1f4>)
 8004506:	685b      	ldr	r3, [r3, #4]
 8004508:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 800450c:	6053      	str	r3, [r2, #4]
				while( (RCC->CFGR & (0xf << 4) ) != ( 9 << 4 ) );
 800450e:	bf00      	nop
 8004510:	4b41      	ldr	r3, [pc, #260]	; (8004618 <AHB_Div+0x1f4>)
 8004512:	685b      	ldr	r3, [r3, #4]
 8004514:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004518:	2b90      	cmp	r3, #144	; 0x90
 800451a:	d1f9      	bne.n	8004510 <AHB_Div+0xec>
				break;
 800451c:	e077      	b.n	800460e <AHB_Div+0x1ea>
				
				case 8: RCC->CFGR &= ~(0xf << 4);
 800451e:	4a3e      	ldr	r2, [pc, #248]	; (8004618 <AHB_Div+0x1f4>)
 8004520:	4b3d      	ldr	r3, [pc, #244]	; (8004618 <AHB_Div+0x1f4>)
 8004522:	685b      	ldr	r3, [r3, #4]
 8004524:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004528:	6053      	str	r3, [r2, #4]
				RCC->CFGR |= (10 << 4);
 800452a:	4a3b      	ldr	r2, [pc, #236]	; (8004618 <AHB_Div+0x1f4>)
 800452c:	4b3a      	ldr	r3, [pc, #232]	; (8004618 <AHB_Div+0x1f4>)
 800452e:	685b      	ldr	r3, [r3, #4]
 8004530:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
 8004534:	6053      	str	r3, [r2, #4]
				while( (RCC->CFGR & (0xf << 4) ) != ( 10 << 4 ) );
 8004536:	bf00      	nop
 8004538:	4b37      	ldr	r3, [pc, #220]	; (8004618 <AHB_Div+0x1f4>)
 800453a:	685b      	ldr	r3, [r3, #4]
 800453c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004540:	2ba0      	cmp	r3, #160	; 0xa0
 8004542:	d1f9      	bne.n	8004538 <AHB_Div+0x114>
				break;
 8004544:	e063      	b.n	800460e <AHB_Div+0x1ea>
				
				case 16: RCC->CFGR &= ~(0xf << 4);
 8004546:	4a34      	ldr	r2, [pc, #208]	; (8004618 <AHB_Div+0x1f4>)
 8004548:	4b33      	ldr	r3, [pc, #204]	; (8004618 <AHB_Div+0x1f4>)
 800454a:	685b      	ldr	r3, [r3, #4]
 800454c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004550:	6053      	str	r3, [r2, #4]
				RCC->CFGR |= (11 << 4);
 8004552:	4a31      	ldr	r2, [pc, #196]	; (8004618 <AHB_Div+0x1f4>)
 8004554:	4b30      	ldr	r3, [pc, #192]	; (8004618 <AHB_Div+0x1f4>)
 8004556:	685b      	ldr	r3, [r3, #4]
 8004558:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 800455c:	6053      	str	r3, [r2, #4]
				while( (RCC->CFGR & (0xf << 4) ) != ( 11 << 4 ) );
 800455e:	bf00      	nop
 8004560:	4b2d      	ldr	r3, [pc, #180]	; (8004618 <AHB_Div+0x1f4>)
 8004562:	685b      	ldr	r3, [r3, #4]
 8004564:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004568:	2bb0      	cmp	r3, #176	; 0xb0
 800456a:	d1f9      	bne.n	8004560 <AHB_Div+0x13c>
				break;
 800456c:	e04f      	b.n	800460e <AHB_Div+0x1ea>
				
				case 64: RCC->CFGR &= ~(0xf << 4);
 800456e:	4a2a      	ldr	r2, [pc, #168]	; (8004618 <AHB_Div+0x1f4>)
 8004570:	4b29      	ldr	r3, [pc, #164]	; (8004618 <AHB_Div+0x1f4>)
 8004572:	685b      	ldr	r3, [r3, #4]
 8004574:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004578:	6053      	str	r3, [r2, #4]
				RCC->CFGR |= (12 << 4);
 800457a:	4a27      	ldr	r2, [pc, #156]	; (8004618 <AHB_Div+0x1f4>)
 800457c:	4b26      	ldr	r3, [pc, #152]	; (8004618 <AHB_Div+0x1f4>)
 800457e:	685b      	ldr	r3, [r3, #4]
 8004580:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004584:	6053      	str	r3, [r2, #4]
				while( (RCC->CFGR & (0xf << 4) ) != ( 12 << 4 ) );
 8004586:	bf00      	nop
 8004588:	4b23      	ldr	r3, [pc, #140]	; (8004618 <AHB_Div+0x1f4>)
 800458a:	685b      	ldr	r3, [r3, #4]
 800458c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004590:	2bc0      	cmp	r3, #192	; 0xc0
 8004592:	d1f9      	bne.n	8004588 <AHB_Div+0x164>
				break;
 8004594:	e03b      	b.n	800460e <AHB_Div+0x1ea>
				
				case 128: RCC->CFGR &= ~(0xf << 4);
 8004596:	4a20      	ldr	r2, [pc, #128]	; (8004618 <AHB_Div+0x1f4>)
 8004598:	4b1f      	ldr	r3, [pc, #124]	; (8004618 <AHB_Div+0x1f4>)
 800459a:	685b      	ldr	r3, [r3, #4]
 800459c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80045a0:	6053      	str	r3, [r2, #4]
				RCC->CFGR |= (13 << 4);
 80045a2:	4a1d      	ldr	r2, [pc, #116]	; (8004618 <AHB_Div+0x1f4>)
 80045a4:	4b1c      	ldr	r3, [pc, #112]	; (8004618 <AHB_Div+0x1f4>)
 80045a6:	685b      	ldr	r3, [r3, #4]
 80045a8:	f043 03d0 	orr.w	r3, r3, #208	; 0xd0
 80045ac:	6053      	str	r3, [r2, #4]
				while( (RCC->CFGR & (0xf << 4) ) != ( 13 << 4 ) );
 80045ae:	bf00      	nop
 80045b0:	4b19      	ldr	r3, [pc, #100]	; (8004618 <AHB_Div+0x1f4>)
 80045b2:	685b      	ldr	r3, [r3, #4]
 80045b4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80045b8:	2bd0      	cmp	r3, #208	; 0xd0
 80045ba:	d1f9      	bne.n	80045b0 <AHB_Div+0x18c>
				break;
 80045bc:	e027      	b.n	800460e <AHB_Div+0x1ea>
				
				case 256: RCC->CFGR &= ~(0xf << 4);
 80045be:	4a16      	ldr	r2, [pc, #88]	; (8004618 <AHB_Div+0x1f4>)
 80045c0:	4b15      	ldr	r3, [pc, #84]	; (8004618 <AHB_Div+0x1f4>)
 80045c2:	685b      	ldr	r3, [r3, #4]
 80045c4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80045c8:	6053      	str	r3, [r2, #4]
				RCC->CFGR |= (14 << 4);
 80045ca:	4a13      	ldr	r2, [pc, #76]	; (8004618 <AHB_Div+0x1f4>)
 80045cc:	4b12      	ldr	r3, [pc, #72]	; (8004618 <AHB_Div+0x1f4>)
 80045ce:	685b      	ldr	r3, [r3, #4]
 80045d0:	f043 03e0 	orr.w	r3, r3, #224	; 0xe0
 80045d4:	6053      	str	r3, [r2, #4]
				while( (RCC->CFGR & (0xf << 4) ) != ( 14 << 4 ) );
 80045d6:	bf00      	nop
 80045d8:	4b0f      	ldr	r3, [pc, #60]	; (8004618 <AHB_Div+0x1f4>)
 80045da:	685b      	ldr	r3, [r3, #4]
 80045dc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80045e0:	2be0      	cmp	r3, #224	; 0xe0
 80045e2:	d1f9      	bne.n	80045d8 <AHB_Div+0x1b4>
				break;
 80045e4:	e013      	b.n	800460e <AHB_Div+0x1ea>
				
				case 512: RCC->CFGR &= ~(0xf << 4);
 80045e6:	4a0c      	ldr	r2, [pc, #48]	; (8004618 <AHB_Div+0x1f4>)
 80045e8:	4b0b      	ldr	r3, [pc, #44]	; (8004618 <AHB_Div+0x1f4>)
 80045ea:	685b      	ldr	r3, [r3, #4]
 80045ec:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80045f0:	6053      	str	r3, [r2, #4]
				RCC->CFGR |= (0xf << 4);
 80045f2:	4a09      	ldr	r2, [pc, #36]	; (8004618 <AHB_Div+0x1f4>)
 80045f4:	4b08      	ldr	r3, [pc, #32]	; (8004618 <AHB_Div+0x1f4>)
 80045f6:	685b      	ldr	r3, [r3, #4]
 80045f8:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
 80045fc:	6053      	str	r3, [r2, #4]
				while( (RCC->CFGR & (0xf << 4) ) != ( 0xf << 4 ) );
 80045fe:	bf00      	nop
 8004600:	4b05      	ldr	r3, [pc, #20]	; (8004618 <AHB_Div+0x1f4>)
 8004602:	685b      	ldr	r3, [r3, #4]
 8004604:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004608:	2bf0      	cmp	r3, #240	; 0xf0
 800460a:	d1f9      	bne.n	8004600 <AHB_Div+0x1dc>
				break;
 800460c:	bf00      	nop
		}
		
};
 800460e:	bf00      	nop
 8004610:	370c      	adds	r7, #12
 8004612:	46bd      	mov	sp, r7
 8004614:	bc80      	pop	{r7}
 8004616:	4770      	bx	lr
 8004618:	40021000 	.word	0x40021000

0800461c <APB1_APB2_Div>:

void APB1_APB2_Div(char APB1_Div,char APB2_Div){
 800461c:	b480      	push	{r7}
 800461e:	b083      	sub	sp, #12
 8004620:	af00      	add	r7, sp, #0
 8004622:	4603      	mov	r3, r0
 8004624:	460a      	mov	r2, r1
 8004626:	71fb      	strb	r3, [r7, #7]
 8004628:	4613      	mov	r3, r2
 800462a:	71bb      	strb	r3, [r7, #6]
		switch (APB1_Div){
 800462c:	79fb      	ldrb	r3, [r7, #7]
 800462e:	3b01      	subs	r3, #1
 8004630:	2b0f      	cmp	r3, #15
 8004632:	f200 8089 	bhi.w	8004748 <APB1_APB2_Div+0x12c>
 8004636:	a201      	add	r2, pc, #4	; (adr r2, 800463c <APB1_APB2_Div+0x20>)
 8004638:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800463c:	0800467d 	.word	0x0800467d
 8004640:	080046a1 	.word	0x080046a1
 8004644:	08004749 	.word	0x08004749
 8004648:	080046cb 	.word	0x080046cb
 800464c:	08004749 	.word	0x08004749
 8004650:	08004749 	.word	0x08004749
 8004654:	08004749 	.word	0x08004749
 8004658:	080046f5 	.word	0x080046f5
 800465c:	08004749 	.word	0x08004749
 8004660:	08004749 	.word	0x08004749
 8004664:	08004749 	.word	0x08004749
 8004668:	08004749 	.word	0x08004749
 800466c:	08004749 	.word	0x08004749
 8004670:	08004749 	.word	0x08004749
 8004674:	08004749 	.word	0x08004749
 8004678:	0800471f 	.word	0x0800471f
				case 1: RCC->CFGR &= ~(7 << 8); // set Bit APB1(in register CFGR) = 0
 800467c:	4a7d      	ldr	r2, [pc, #500]	; (8004874 <APB1_APB2_Div+0x258>)
 800467e:	4b7d      	ldr	r3, [pc, #500]	; (8004874 <APB1_APB2_Div+0x258>)
 8004680:	685b      	ldr	r3, [r3, #4]
 8004682:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8004686:	6053      	str	r3, [r2, #4]
				RCC->CFGR |= (0 << 8); // set Bit APB1 = APB1_Div
 8004688:	4a7a      	ldr	r2, [pc, #488]	; (8004874 <APB1_APB2_Div+0x258>)
 800468a:	4b7a      	ldr	r3, [pc, #488]	; (8004874 <APB1_APB2_Div+0x258>)
 800468c:	685b      	ldr	r3, [r3, #4]
 800468e:	6053      	str	r3, [r2, #4]
				while( (RCC->CFGR & (7 << 8) ) != ( 0 << 8 ) ); // check set Bit APB1 = APB1_Div
 8004690:	bf00      	nop
 8004692:	4b78      	ldr	r3, [pc, #480]	; (8004874 <APB1_APB2_Div+0x258>)
 8004694:	685b      	ldr	r3, [r3, #4]
 8004696:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800469a:	2b00      	cmp	r3, #0
 800469c:	d1f9      	bne.n	8004692 <APB1_APB2_Div+0x76>
				break;	
 800469e:	e054      	b.n	800474a <APB1_APB2_Div+0x12e>

				case 2: RCC->CFGR &= ~(7 << 8);
 80046a0:	4a74      	ldr	r2, [pc, #464]	; (8004874 <APB1_APB2_Div+0x258>)
 80046a2:	4b74      	ldr	r3, [pc, #464]	; (8004874 <APB1_APB2_Div+0x258>)
 80046a4:	685b      	ldr	r3, [r3, #4]
 80046a6:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80046aa:	6053      	str	r3, [r2, #4]
				RCC->CFGR |= (4 << 8);
 80046ac:	4a71      	ldr	r2, [pc, #452]	; (8004874 <APB1_APB2_Div+0x258>)
 80046ae:	4b71      	ldr	r3, [pc, #452]	; (8004874 <APB1_APB2_Div+0x258>)
 80046b0:	685b      	ldr	r3, [r3, #4]
 80046b2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80046b6:	6053      	str	r3, [r2, #4]
				while( (RCC->CFGR & (7 << 8) ) != ( 4 << 8 ) );
 80046b8:	bf00      	nop
 80046ba:	4b6e      	ldr	r3, [pc, #440]	; (8004874 <APB1_APB2_Div+0x258>)
 80046bc:	685b      	ldr	r3, [r3, #4]
 80046be:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80046c2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80046c6:	d1f8      	bne.n	80046ba <APB1_APB2_Div+0x9e>
				break;				
 80046c8:	e03f      	b.n	800474a <APB1_APB2_Div+0x12e>

				case 4: RCC->CFGR &= ~(7 << 8);
 80046ca:	4a6a      	ldr	r2, [pc, #424]	; (8004874 <APB1_APB2_Div+0x258>)
 80046cc:	4b69      	ldr	r3, [pc, #420]	; (8004874 <APB1_APB2_Div+0x258>)
 80046ce:	685b      	ldr	r3, [r3, #4]
 80046d0:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80046d4:	6053      	str	r3, [r2, #4]
				RCC->CFGR |= (5 << 8);
 80046d6:	4a67      	ldr	r2, [pc, #412]	; (8004874 <APB1_APB2_Div+0x258>)
 80046d8:	4b66      	ldr	r3, [pc, #408]	; (8004874 <APB1_APB2_Div+0x258>)
 80046da:	685b      	ldr	r3, [r3, #4]
 80046dc:	f443 63a0 	orr.w	r3, r3, #1280	; 0x500
 80046e0:	6053      	str	r3, [r2, #4]
				while( (RCC->CFGR & (7 << 8) ) != ( 5 << 8 ) );
 80046e2:	bf00      	nop
 80046e4:	4b63      	ldr	r3, [pc, #396]	; (8004874 <APB1_APB2_Div+0x258>)
 80046e6:	685b      	ldr	r3, [r3, #4]
 80046e8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80046ec:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 80046f0:	d1f8      	bne.n	80046e4 <APB1_APB2_Div+0xc8>
				break;				
 80046f2:	e02a      	b.n	800474a <APB1_APB2_Div+0x12e>

				case 8: RCC->CFGR &= ~(7 << 8);
 80046f4:	4a5f      	ldr	r2, [pc, #380]	; (8004874 <APB1_APB2_Div+0x258>)
 80046f6:	4b5f      	ldr	r3, [pc, #380]	; (8004874 <APB1_APB2_Div+0x258>)
 80046f8:	685b      	ldr	r3, [r3, #4]
 80046fa:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80046fe:	6053      	str	r3, [r2, #4]
				RCC->CFGR |= (6 << 8);
 8004700:	4a5c      	ldr	r2, [pc, #368]	; (8004874 <APB1_APB2_Div+0x258>)
 8004702:	4b5c      	ldr	r3, [pc, #368]	; (8004874 <APB1_APB2_Div+0x258>)
 8004704:	685b      	ldr	r3, [r3, #4]
 8004706:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 800470a:	6053      	str	r3, [r2, #4]
				while( (RCC->CFGR & (7 << 8) ) != ( 6 << 8 ) );
 800470c:	bf00      	nop
 800470e:	4b59      	ldr	r3, [pc, #356]	; (8004874 <APB1_APB2_Div+0x258>)
 8004710:	685b      	ldr	r3, [r3, #4]
 8004712:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004716:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800471a:	d1f8      	bne.n	800470e <APB1_APB2_Div+0xf2>
				break;				
 800471c:	e015      	b.n	800474a <APB1_APB2_Div+0x12e>

				case 16: RCC->CFGR &= ~(7 << 8);
 800471e:	4a55      	ldr	r2, [pc, #340]	; (8004874 <APB1_APB2_Div+0x258>)
 8004720:	4b54      	ldr	r3, [pc, #336]	; (8004874 <APB1_APB2_Div+0x258>)
 8004722:	685b      	ldr	r3, [r3, #4]
 8004724:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8004728:	6053      	str	r3, [r2, #4]
				RCC->CFGR |= (7 << 8);
 800472a:	4a52      	ldr	r2, [pc, #328]	; (8004874 <APB1_APB2_Div+0x258>)
 800472c:	4b51      	ldr	r3, [pc, #324]	; (8004874 <APB1_APB2_Div+0x258>)
 800472e:	685b      	ldr	r3, [r3, #4]
 8004730:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004734:	6053      	str	r3, [r2, #4]
				while( (RCC->CFGR & (7 << 8) ) != ( 7 << 8 ) );
 8004736:	bf00      	nop
 8004738:	4b4e      	ldr	r3, [pc, #312]	; (8004874 <APB1_APB2_Div+0x258>)
 800473a:	685b      	ldr	r3, [r3, #4]
 800473c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004740:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004744:	d1f8      	bne.n	8004738 <APB1_APB2_Div+0x11c>
				break;	
 8004746:	e000      	b.n	800474a <APB1_APB2_Div+0x12e>
				
				default : 
				while(1);
 8004748:	e7fe      	b.n	8004748 <APB1_APB2_Div+0x12c>
		} // end loop APB1
			
		
		switch (APB2_Div){
 800474a:	79bb      	ldrb	r3, [r7, #6]
 800474c:	3b01      	subs	r3, #1
 800474e:	2b0f      	cmp	r3, #15
 8004750:	f200 808a 	bhi.w	8004868 <APB1_APB2_Div+0x24c>
 8004754:	a201      	add	r2, pc, #4	; (adr r2, 800475c <APB1_APB2_Div+0x140>)
 8004756:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800475a:	bf00      	nop
 800475c:	0800479d 	.word	0x0800479d
 8004760:	080047c1 	.word	0x080047c1
 8004764:	08004869 	.word	0x08004869
 8004768:	080047eb 	.word	0x080047eb
 800476c:	08004869 	.word	0x08004869
 8004770:	08004869 	.word	0x08004869
 8004774:	08004869 	.word	0x08004869
 8004778:	08004815 	.word	0x08004815
 800477c:	08004869 	.word	0x08004869
 8004780:	08004869 	.word	0x08004869
 8004784:	08004869 	.word	0x08004869
 8004788:	08004869 	.word	0x08004869
 800478c:	08004869 	.word	0x08004869
 8004790:	08004869 	.word	0x08004869
 8004794:	08004869 	.word	0x08004869
 8004798:	0800483f 	.word	0x0800483f
				case 1: RCC->CFGR &= ~(7 << 11); // set Bit APB2(in register CFGR) = 0
 800479c:	4a35      	ldr	r2, [pc, #212]	; (8004874 <APB1_APB2_Div+0x258>)
 800479e:	4b35      	ldr	r3, [pc, #212]	; (8004874 <APB1_APB2_Div+0x258>)
 80047a0:	685b      	ldr	r3, [r3, #4]
 80047a2:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 80047a6:	6053      	str	r3, [r2, #4]
				RCC->CFGR |= (0 << 11); // set Bit APB2 = APB2_Div
 80047a8:	4a32      	ldr	r2, [pc, #200]	; (8004874 <APB1_APB2_Div+0x258>)
 80047aa:	4b32      	ldr	r3, [pc, #200]	; (8004874 <APB1_APB2_Div+0x258>)
 80047ac:	685b      	ldr	r3, [r3, #4]
 80047ae:	6053      	str	r3, [r2, #4]
				while( (RCC->CFGR & (7 << 11) ) != ( 0 << 11 ) ); // check set Bit APB2 = APB2_Div
 80047b0:	bf00      	nop
 80047b2:	4b30      	ldr	r3, [pc, #192]	; (8004874 <APB1_APB2_Div+0x258>)
 80047b4:	685b      	ldr	r3, [r3, #4]
 80047b6:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d1f9      	bne.n	80047b2 <APB1_APB2_Div+0x196>
				break;	
 80047be:	e054      	b.n	800486a <APB1_APB2_Div+0x24e>

				case 2: RCC->CFGR &= ~(7 << 11);
 80047c0:	4a2c      	ldr	r2, [pc, #176]	; (8004874 <APB1_APB2_Div+0x258>)
 80047c2:	4b2c      	ldr	r3, [pc, #176]	; (8004874 <APB1_APB2_Div+0x258>)
 80047c4:	685b      	ldr	r3, [r3, #4]
 80047c6:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 80047ca:	6053      	str	r3, [r2, #4]
				RCC->CFGR |= (4 << 11);
 80047cc:	4a29      	ldr	r2, [pc, #164]	; (8004874 <APB1_APB2_Div+0x258>)
 80047ce:	4b29      	ldr	r3, [pc, #164]	; (8004874 <APB1_APB2_Div+0x258>)
 80047d0:	685b      	ldr	r3, [r3, #4]
 80047d2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80047d6:	6053      	str	r3, [r2, #4]
				while( (RCC->CFGR & (7 << 11) ) != ( 4 << 11 ) );
 80047d8:	bf00      	nop
 80047da:	4b26      	ldr	r3, [pc, #152]	; (8004874 <APB1_APB2_Div+0x258>)
 80047dc:	685b      	ldr	r3, [r3, #4]
 80047de:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 80047e2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80047e6:	d1f8      	bne.n	80047da <APB1_APB2_Div+0x1be>
				break;				
 80047e8:	e03f      	b.n	800486a <APB1_APB2_Div+0x24e>

				case 4: RCC->CFGR &= ~(7 << 11);
 80047ea:	4a22      	ldr	r2, [pc, #136]	; (8004874 <APB1_APB2_Div+0x258>)
 80047ec:	4b21      	ldr	r3, [pc, #132]	; (8004874 <APB1_APB2_Div+0x258>)
 80047ee:	685b      	ldr	r3, [r3, #4]
 80047f0:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 80047f4:	6053      	str	r3, [r2, #4]
				RCC->CFGR |= (5 << 11);
 80047f6:	4a1f      	ldr	r2, [pc, #124]	; (8004874 <APB1_APB2_Div+0x258>)
 80047f8:	4b1e      	ldr	r3, [pc, #120]	; (8004874 <APB1_APB2_Div+0x258>)
 80047fa:	685b      	ldr	r3, [r3, #4]
 80047fc:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 8004800:	6053      	str	r3, [r2, #4]
				while( (RCC->CFGR & (7 << 11) ) != ( 5 << 11 ) );
 8004802:	bf00      	nop
 8004804:	4b1b      	ldr	r3, [pc, #108]	; (8004874 <APB1_APB2_Div+0x258>)
 8004806:	685b      	ldr	r3, [r3, #4]
 8004808:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 800480c:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8004810:	d1f8      	bne.n	8004804 <APB1_APB2_Div+0x1e8>
				break;				
 8004812:	e02a      	b.n	800486a <APB1_APB2_Div+0x24e>

				case 8: RCC->CFGR &= ~(7 << 11);
 8004814:	4a17      	ldr	r2, [pc, #92]	; (8004874 <APB1_APB2_Div+0x258>)
 8004816:	4b17      	ldr	r3, [pc, #92]	; (8004874 <APB1_APB2_Div+0x258>)
 8004818:	685b      	ldr	r3, [r3, #4]
 800481a:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 800481e:	6053      	str	r3, [r2, #4]
				RCC->CFGR |= (6 << 11);
 8004820:	4a14      	ldr	r2, [pc, #80]	; (8004874 <APB1_APB2_Div+0x258>)
 8004822:	4b14      	ldr	r3, [pc, #80]	; (8004874 <APB1_APB2_Div+0x258>)
 8004824:	685b      	ldr	r3, [r3, #4]
 8004826:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 800482a:	6053      	str	r3, [r2, #4]
				while( (RCC->CFGR & (7 << 11) ) != ( 6 << 11 ) );
 800482c:	bf00      	nop
 800482e:	4b11      	ldr	r3, [pc, #68]	; (8004874 <APB1_APB2_Div+0x258>)
 8004830:	685b      	ldr	r3, [r3, #4]
 8004832:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8004836:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800483a:	d1f8      	bne.n	800482e <APB1_APB2_Div+0x212>
				break;				
 800483c:	e015      	b.n	800486a <APB1_APB2_Div+0x24e>

				case 16: RCC->CFGR &= ~(7 << 11);
 800483e:	4a0d      	ldr	r2, [pc, #52]	; (8004874 <APB1_APB2_Div+0x258>)
 8004840:	4b0c      	ldr	r3, [pc, #48]	; (8004874 <APB1_APB2_Div+0x258>)
 8004842:	685b      	ldr	r3, [r3, #4]
 8004844:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8004848:	6053      	str	r3, [r2, #4]
				RCC->CFGR |= (7 << 11);
 800484a:	4a0a      	ldr	r2, [pc, #40]	; (8004874 <APB1_APB2_Div+0x258>)
 800484c:	4b09      	ldr	r3, [pc, #36]	; (8004874 <APB1_APB2_Div+0x258>)
 800484e:	685b      	ldr	r3, [r3, #4]
 8004850:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8004854:	6053      	str	r3, [r2, #4]
				while( (RCC->CFGR & (7 << 11) ) != ( 7 << 11 ) );
 8004856:	bf00      	nop
 8004858:	4b06      	ldr	r3, [pc, #24]	; (8004874 <APB1_APB2_Div+0x258>)
 800485a:	685b      	ldr	r3, [r3, #4]
 800485c:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8004860:	f5b3 5f60 	cmp.w	r3, #14336	; 0x3800
 8004864:	d1f8      	bne.n	8004858 <APB1_APB2_Div+0x23c>
				break;	
 8004866:	e000      	b.n	800486a <APB1_APB2_Div+0x24e>
				
				default : 
				while(1);
 8004868:	e7fe      	b.n	8004868 <APB1_APB2_Div+0x24c>
		}; // end loop APB2
};
 800486a:	bf00      	nop
 800486c:	370c      	adds	r7, #12
 800486e:	46bd      	mov	sp, r7
 8004870:	bc80      	pop	{r7}
 8004872:	4770      	bx	lr
 8004874:	40021000 	.word	0x40021000

08004878 <SetPeriphAPB2>:

void SetPeriphAPB2(unsigned long int bit){ 
 8004878:	b480      	push	{r7}
 800487a:	b083      	sub	sp, #12
 800487c:	af00      	add	r7, sp, #0
 800487e:	6078      	str	r0, [r7, #4]
		RCC->APB2ENR |= bit;
 8004880:	4909      	ldr	r1, [pc, #36]	; (80048a8 <SetPeriphAPB2+0x30>)
 8004882:	4b09      	ldr	r3, [pc, #36]	; (80048a8 <SetPeriphAPB2+0x30>)
 8004884:	699a      	ldr	r2, [r3, #24]
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	4313      	orrs	r3, r2
 800488a:	618b      	str	r3, [r1, #24]
		while( ( (RCC->APB2ENR) & bit ) != bit ); 
 800488c:	bf00      	nop
 800488e:	4b06      	ldr	r3, [pc, #24]	; (80048a8 <SetPeriphAPB2+0x30>)
 8004890:	699a      	ldr	r2, [r3, #24]
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	401a      	ands	r2, r3
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	429a      	cmp	r2, r3
 800489a:	d1f8      	bne.n	800488e <SetPeriphAPB2+0x16>
};
 800489c:	bf00      	nop
 800489e:	370c      	adds	r7, #12
 80048a0:	46bd      	mov	sp, r7
 80048a2:	bc80      	pop	{r7}
 80048a4:	4770      	bx	lr
 80048a6:	bf00      	nop
 80048a8:	40021000 	.word	0x40021000

080048ac <SetPeriphAPB1>:

void SetPeriphAPB1(unsigned long int bit){ 
 80048ac:	b480      	push	{r7}
 80048ae:	b083      	sub	sp, #12
 80048b0:	af00      	add	r7, sp, #0
 80048b2:	6078      	str	r0, [r7, #4]
		RCC->APB1ENR |= bit;
 80048b4:	4909      	ldr	r1, [pc, #36]	; (80048dc <SetPeriphAPB1+0x30>)
 80048b6:	4b09      	ldr	r3, [pc, #36]	; (80048dc <SetPeriphAPB1+0x30>)
 80048b8:	69da      	ldr	r2, [r3, #28]
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	4313      	orrs	r3, r2
 80048be:	61cb      	str	r3, [r1, #28]
		while( ( (RCC->APB1ENR) & bit ) != bit ); 
 80048c0:	bf00      	nop
 80048c2:	4b06      	ldr	r3, [pc, #24]	; (80048dc <SetPeriphAPB1+0x30>)
 80048c4:	69da      	ldr	r2, [r3, #28]
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	401a      	ands	r2, r3
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	429a      	cmp	r2, r3
 80048ce:	d1f8      	bne.n	80048c2 <SetPeriphAPB1+0x16>
};
 80048d0:	bf00      	nop
 80048d2:	370c      	adds	r7, #12
 80048d4:	46bd      	mov	sp, r7
 80048d6:	bc80      	pop	{r7}
 80048d8:	4770      	bx	lr
 80048da:	bf00      	nop
 80048dc:	40021000 	.word	0x40021000

080048e0 <TimPinOutInit>:
#include "GPIO.h"
#include "stm32f10x.h"
#include "RCC.h"


void TimPinOutInit(int Port,int Pin){
 80048e0:	b580      	push	{r7, lr}
 80048e2:	b082      	sub	sp, #8
 80048e4:	af00      	add	r7, sp, #0
 80048e6:	6078      	str	r0, [r7, #4]
 80048e8:	6039      	str	r1, [r7, #0]
	Init_PIN(Port,Pin,Config_Out_50MHz,Alter_Out_PP);
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	b2d8      	uxtb	r0, r3
 80048ee:	683b      	ldr	r3, [r7, #0]
 80048f0:	b2d9      	uxtb	r1, r3
 80048f2:	2302      	movs	r3, #2
 80048f4:	2203      	movs	r2, #3
 80048f6:	f7fe fd0d 	bl	8003314 <Init_PIN>
};
 80048fa:	bf00      	nop
 80048fc:	3708      	adds	r7, #8
 80048fe:	46bd      	mov	sp, r7
 8004900:	bd80      	pop	{r7, pc}
 8004902:	bf00      	nop

08004904 <Tim1_PWM_Enable>:

void Tim1_PWM_Enable(char CH,int CCR){	
 8004904:	b480      	push	{r7}
 8004906:	b083      	sub	sp, #12
 8004908:	af00      	add	r7, sp, #0
 800490a:	4603      	mov	r3, r0
 800490c:	6039      	str	r1, [r7, #0]
 800490e:	71fb      	strb	r3, [r7, #7]
	if(CH == 1){
 8004910:	79fb      	ldrb	r3, [r7, #7]
 8004912:	2b01      	cmp	r3, #1
 8004914:	d130      	bne.n	8004978 <Tim1_PWM_Enable+0x74>
		TIM1->CR1 |= (1 << 0) | (1 << 7); // set counter And Bit ARPE
 8004916:	4a69      	ldr	r2, [pc, #420]	; (8004abc <Tim1_PWM_Enable+0x1b8>)
 8004918:	4b68      	ldr	r3, [pc, #416]	; (8004abc <Tim1_PWM_Enable+0x1b8>)
 800491a:	881b      	ldrh	r3, [r3, #0]
 800491c:	b29b      	uxth	r3, r3
 800491e:	f043 0381 	orr.w	r3, r3, #129	; 0x81
 8004922:	b29b      	uxth	r3, r3
 8004924:	8013      	strh	r3, [r2, #0]
		TIM1->CCMR1 &= ~( (7 << 4) | (1 << 3) ); // set type PWM Mode1 And Output Compare 1 preload == 0
 8004926:	4a65      	ldr	r2, [pc, #404]	; (8004abc <Tim1_PWM_Enable+0x1b8>)
 8004928:	4b64      	ldr	r3, [pc, #400]	; (8004abc <Tim1_PWM_Enable+0x1b8>)
 800492a:	8b1b      	ldrh	r3, [r3, #24]
 800492c:	b29b      	uxth	r3, r3
 800492e:	f023 0378 	bic.w	r3, r3, #120	; 0x78
 8004932:	b29b      	uxth	r3, r3
 8004934:	8313      	strh	r3, [r2, #24]
		TIM1->CCMR1 |= (6 << 4) | (1 << 3); // set type PWM Mode1 And Output Compare 1 preload enable
 8004936:	4a61      	ldr	r2, [pc, #388]	; (8004abc <Tim1_PWM_Enable+0x1b8>)
 8004938:	4b60      	ldr	r3, [pc, #384]	; (8004abc <Tim1_PWM_Enable+0x1b8>)
 800493a:	8b1b      	ldrh	r3, [r3, #24]
 800493c:	b29b      	uxth	r3, r3
 800493e:	f043 0368 	orr.w	r3, r3, #104	; 0x68
 8004942:	b29b      	uxth	r3, r3
 8004944:	8313      	strh	r3, [r2, #24]
		TIM1->CCER |= (1 << 0); // Capture/Compare 1 output enable
 8004946:	4a5d      	ldr	r2, [pc, #372]	; (8004abc <Tim1_PWM_Enable+0x1b8>)
 8004948:	4b5c      	ldr	r3, [pc, #368]	; (8004abc <Tim1_PWM_Enable+0x1b8>)
 800494a:	8c1b      	ldrh	r3, [r3, #32]
 800494c:	b29b      	uxth	r3, r3
 800494e:	f043 0301 	orr.w	r3, r3, #1
 8004952:	b29b      	uxth	r3, r3
 8004954:	8413      	strh	r3, [r2, #32]
		TIM1->BDTR |= (1 << 15) | (1 << 14); // Main output enable And Automatic output enable
 8004956:	4a59      	ldr	r2, [pc, #356]	; (8004abc <Tim1_PWM_Enable+0x1b8>)
 8004958:	4b58      	ldr	r3, [pc, #352]	; (8004abc <Tim1_PWM_Enable+0x1b8>)
 800495a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800495e:	b29b      	uxth	r3, r3
 8004960:	ea6f 4383 	mvn.w	r3, r3, lsl #18
 8004964:	ea6f 4393 	mvn.w	r3, r3, lsr #18
 8004968:	b29b      	uxth	r3, r3
 800496a:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
		TIM1->CCR1 = CCR; // set Valude Register CCR1
 800496e:	4b53      	ldr	r3, [pc, #332]	; (8004abc <Tim1_PWM_Enable+0x1b8>)
 8004970:	683a      	ldr	r2, [r7, #0]
 8004972:	b292      	uxth	r2, r2
 8004974:	869a      	strh	r2, [r3, #52]	; 0x34
		TIM1->BDTR |= (1 << 15) | (1 << 14); // Main output enable And Automatic output enable
		TIM1->CCR4 = CCR; // set Valude Register CCR4
	}
	
	else while(1); // number Channel > 4
};
 8004976:	e09d      	b.n	8004ab4 <Tim1_PWM_Enable+0x1b0>
		TIM1->CCER |= (1 << 0); // Capture/Compare 1 output enable
		TIM1->BDTR |= (1 << 15) | (1 << 14); // Main output enable And Automatic output enable
		TIM1->CCR1 = CCR; // set Valude Register CCR1
	}

	else if(CH == 2){
 8004978:	79fb      	ldrb	r3, [r7, #7]
 800497a:	2b02      	cmp	r3, #2
 800497c:	d130      	bne.n	80049e0 <Tim1_PWM_Enable+0xdc>
		TIM1->CR1 |= (1 << 0) | (1 << 7); // set counter And Bit ARPE
 800497e:	4a4f      	ldr	r2, [pc, #316]	; (8004abc <Tim1_PWM_Enable+0x1b8>)
 8004980:	4b4e      	ldr	r3, [pc, #312]	; (8004abc <Tim1_PWM_Enable+0x1b8>)
 8004982:	881b      	ldrh	r3, [r3, #0]
 8004984:	b29b      	uxth	r3, r3
 8004986:	f043 0381 	orr.w	r3, r3, #129	; 0x81
 800498a:	b29b      	uxth	r3, r3
 800498c:	8013      	strh	r3, [r2, #0]
		TIM1->CCMR1 &= ~( (7 << 12) | (1 << 11) ); // set type PWM Mode1 And Output Compare 1 preload == 0
 800498e:	4a4b      	ldr	r2, [pc, #300]	; (8004abc <Tim1_PWM_Enable+0x1b8>)
 8004990:	4b4a      	ldr	r3, [pc, #296]	; (8004abc <Tim1_PWM_Enable+0x1b8>)
 8004992:	8b1b      	ldrh	r3, [r3, #24]
 8004994:	b29b      	uxth	r3, r3
 8004996:	f423 43f0 	bic.w	r3, r3, #30720	; 0x7800
 800499a:	b29b      	uxth	r3, r3
 800499c:	8313      	strh	r3, [r2, #24]
		TIM1->CCMR1 |= (6 << 12) | (1 << 11); // set type PWM Mode1 And Output Compare 1 preload enable
 800499e:	4a47      	ldr	r2, [pc, #284]	; (8004abc <Tim1_PWM_Enable+0x1b8>)
 80049a0:	4b46      	ldr	r3, [pc, #280]	; (8004abc <Tim1_PWM_Enable+0x1b8>)
 80049a2:	8b1b      	ldrh	r3, [r3, #24]
 80049a4:	b29b      	uxth	r3, r3
 80049a6:	f443 43d0 	orr.w	r3, r3, #26624	; 0x6800
 80049aa:	b29b      	uxth	r3, r3
 80049ac:	8313      	strh	r3, [r2, #24]
		TIM1->CCER |= (1 << 4); // Capture/Compare 2 output enable
 80049ae:	4a43      	ldr	r2, [pc, #268]	; (8004abc <Tim1_PWM_Enable+0x1b8>)
 80049b0:	4b42      	ldr	r3, [pc, #264]	; (8004abc <Tim1_PWM_Enable+0x1b8>)
 80049b2:	8c1b      	ldrh	r3, [r3, #32]
 80049b4:	b29b      	uxth	r3, r3
 80049b6:	f043 0310 	orr.w	r3, r3, #16
 80049ba:	b29b      	uxth	r3, r3
 80049bc:	8413      	strh	r3, [r2, #32]
		TIM1->BDTR |= (1 << 15) | (1 << 14); // Main output enable And Automatic output enable
 80049be:	4a3f      	ldr	r2, [pc, #252]	; (8004abc <Tim1_PWM_Enable+0x1b8>)
 80049c0:	4b3e      	ldr	r3, [pc, #248]	; (8004abc <Tim1_PWM_Enable+0x1b8>)
 80049c2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80049c6:	b29b      	uxth	r3, r3
 80049c8:	ea6f 4383 	mvn.w	r3, r3, lsl #18
 80049cc:	ea6f 4393 	mvn.w	r3, r3, lsr #18
 80049d0:	b29b      	uxth	r3, r3
 80049d2:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
		TIM1->CCR2 = CCR; // set Valude Register CCR2
 80049d6:	4b39      	ldr	r3, [pc, #228]	; (8004abc <Tim1_PWM_Enable+0x1b8>)
 80049d8:	683a      	ldr	r2, [r7, #0]
 80049da:	b292      	uxth	r2, r2
 80049dc:	871a      	strh	r2, [r3, #56]	; 0x38
		TIM1->BDTR |= (1 << 15) | (1 << 14); // Main output enable And Automatic output enable
		TIM1->CCR4 = CCR; // set Valude Register CCR4
	}
	
	else while(1); // number Channel > 4
};
 80049de:	e069      	b.n	8004ab4 <Tim1_PWM_Enable+0x1b0>
		TIM1->CCER |= (1 << 4); // Capture/Compare 2 output enable
		TIM1->BDTR |= (1 << 15) | (1 << 14); // Main output enable And Automatic output enable
		TIM1->CCR2 = CCR; // set Valude Register CCR2
	}

	else if(CH == 3){
 80049e0:	79fb      	ldrb	r3, [r7, #7]
 80049e2:	2b03      	cmp	r3, #3
 80049e4:	d130      	bne.n	8004a48 <Tim1_PWM_Enable+0x144>
		TIM1->CR1 |= (1 << 0) | (1 << 7); // set counter And Bit ARPE
 80049e6:	4a35      	ldr	r2, [pc, #212]	; (8004abc <Tim1_PWM_Enable+0x1b8>)
 80049e8:	4b34      	ldr	r3, [pc, #208]	; (8004abc <Tim1_PWM_Enable+0x1b8>)
 80049ea:	881b      	ldrh	r3, [r3, #0]
 80049ec:	b29b      	uxth	r3, r3
 80049ee:	f043 0381 	orr.w	r3, r3, #129	; 0x81
 80049f2:	b29b      	uxth	r3, r3
 80049f4:	8013      	strh	r3, [r2, #0]
		TIM1->CCMR2 &= ~( (7 << 4) | (1 << 3) ); // set type PWM Mode1 And Output Compare 1 preload == 0
 80049f6:	4a31      	ldr	r2, [pc, #196]	; (8004abc <Tim1_PWM_Enable+0x1b8>)
 80049f8:	4b30      	ldr	r3, [pc, #192]	; (8004abc <Tim1_PWM_Enable+0x1b8>)
 80049fa:	8b9b      	ldrh	r3, [r3, #28]
 80049fc:	b29b      	uxth	r3, r3
 80049fe:	f023 0378 	bic.w	r3, r3, #120	; 0x78
 8004a02:	b29b      	uxth	r3, r3
 8004a04:	8393      	strh	r3, [r2, #28]
		TIM1->CCMR2 |= (6 << 4) | (1 << 3); // set type PWM Mode1 And Output Compare 1 preload enable
 8004a06:	4a2d      	ldr	r2, [pc, #180]	; (8004abc <Tim1_PWM_Enable+0x1b8>)
 8004a08:	4b2c      	ldr	r3, [pc, #176]	; (8004abc <Tim1_PWM_Enable+0x1b8>)
 8004a0a:	8b9b      	ldrh	r3, [r3, #28]
 8004a0c:	b29b      	uxth	r3, r3
 8004a0e:	f043 0368 	orr.w	r3, r3, #104	; 0x68
 8004a12:	b29b      	uxth	r3, r3
 8004a14:	8393      	strh	r3, [r2, #28]
		TIM1->CCER |= (1 << 8); // Capture/Compare 3 output enable
 8004a16:	4a29      	ldr	r2, [pc, #164]	; (8004abc <Tim1_PWM_Enable+0x1b8>)
 8004a18:	4b28      	ldr	r3, [pc, #160]	; (8004abc <Tim1_PWM_Enable+0x1b8>)
 8004a1a:	8c1b      	ldrh	r3, [r3, #32]
 8004a1c:	b29b      	uxth	r3, r3
 8004a1e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004a22:	b29b      	uxth	r3, r3
 8004a24:	8413      	strh	r3, [r2, #32]
		TIM1->BDTR |= (1 << 15) | (1 << 14); // Main output enable And Automatic output enable
 8004a26:	4a25      	ldr	r2, [pc, #148]	; (8004abc <Tim1_PWM_Enable+0x1b8>)
 8004a28:	4b24      	ldr	r3, [pc, #144]	; (8004abc <Tim1_PWM_Enable+0x1b8>)
 8004a2a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004a2e:	b29b      	uxth	r3, r3
 8004a30:	ea6f 4383 	mvn.w	r3, r3, lsl #18
 8004a34:	ea6f 4393 	mvn.w	r3, r3, lsr #18
 8004a38:	b29b      	uxth	r3, r3
 8004a3a:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
		TIM1->CCR3 = CCR; // set Valude Register CCR3
 8004a3e:	4b1f      	ldr	r3, [pc, #124]	; (8004abc <Tim1_PWM_Enable+0x1b8>)
 8004a40:	683a      	ldr	r2, [r7, #0]
 8004a42:	b292      	uxth	r2, r2
 8004a44:	879a      	strh	r2, [r3, #60]	; 0x3c
		TIM1->BDTR |= (1 << 15) | (1 << 14); // Main output enable And Automatic output enable
		TIM1->CCR4 = CCR; // set Valude Register CCR4
	}
	
	else while(1); // number Channel > 4
};
 8004a46:	e035      	b.n	8004ab4 <Tim1_PWM_Enable+0x1b0>
		TIM1->CCER |= (1 << 8); // Capture/Compare 3 output enable
		TIM1->BDTR |= (1 << 15) | (1 << 14); // Main output enable And Automatic output enable
		TIM1->CCR3 = CCR; // set Valude Register CCR3
	}

	else if(CH == 4){
 8004a48:	79fb      	ldrb	r3, [r7, #7]
 8004a4a:	2b04      	cmp	r3, #4
 8004a4c:	d131      	bne.n	8004ab2 <Tim1_PWM_Enable+0x1ae>
		TIM1->CR1 |= (1 << 0) | (1 << 7); // set counter And Bit ARPE
 8004a4e:	4a1b      	ldr	r2, [pc, #108]	; (8004abc <Tim1_PWM_Enable+0x1b8>)
 8004a50:	4b1a      	ldr	r3, [pc, #104]	; (8004abc <Tim1_PWM_Enable+0x1b8>)
 8004a52:	881b      	ldrh	r3, [r3, #0]
 8004a54:	b29b      	uxth	r3, r3
 8004a56:	f043 0381 	orr.w	r3, r3, #129	; 0x81
 8004a5a:	b29b      	uxth	r3, r3
 8004a5c:	8013      	strh	r3, [r2, #0]
		TIM1->CCMR2 &= ~( (7 << 12) | (1 << 11) ); // set type PWM Mode1 And Output Compare 1 preload == 0
 8004a5e:	4a17      	ldr	r2, [pc, #92]	; (8004abc <Tim1_PWM_Enable+0x1b8>)
 8004a60:	4b16      	ldr	r3, [pc, #88]	; (8004abc <Tim1_PWM_Enable+0x1b8>)
 8004a62:	8b9b      	ldrh	r3, [r3, #28]
 8004a64:	b29b      	uxth	r3, r3
 8004a66:	f423 43f0 	bic.w	r3, r3, #30720	; 0x7800
 8004a6a:	b29b      	uxth	r3, r3
 8004a6c:	8393      	strh	r3, [r2, #28]
		TIM1->CCMR2 |= (6 << 12) | (1 << 11); // set type PWM Mode1 And Output Compare 1 preload enable
 8004a6e:	4a13      	ldr	r2, [pc, #76]	; (8004abc <Tim1_PWM_Enable+0x1b8>)
 8004a70:	4b12      	ldr	r3, [pc, #72]	; (8004abc <Tim1_PWM_Enable+0x1b8>)
 8004a72:	8b9b      	ldrh	r3, [r3, #28]
 8004a74:	b29b      	uxth	r3, r3
 8004a76:	f443 43d0 	orr.w	r3, r3, #26624	; 0x6800
 8004a7a:	b29b      	uxth	r3, r3
 8004a7c:	8393      	strh	r3, [r2, #28]
		TIM1->CCER |= (1 << 12); // Capture/Compare 4 output enable
 8004a7e:	4a0f      	ldr	r2, [pc, #60]	; (8004abc <Tim1_PWM_Enable+0x1b8>)
 8004a80:	4b0e      	ldr	r3, [pc, #56]	; (8004abc <Tim1_PWM_Enable+0x1b8>)
 8004a82:	8c1b      	ldrh	r3, [r3, #32]
 8004a84:	b29b      	uxth	r3, r3
 8004a86:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004a8a:	b29b      	uxth	r3, r3
 8004a8c:	8413      	strh	r3, [r2, #32]
		TIM1->BDTR |= (1 << 15) | (1 << 14); // Main output enable And Automatic output enable
 8004a8e:	4a0b      	ldr	r2, [pc, #44]	; (8004abc <Tim1_PWM_Enable+0x1b8>)
 8004a90:	4b0a      	ldr	r3, [pc, #40]	; (8004abc <Tim1_PWM_Enable+0x1b8>)
 8004a92:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004a96:	b29b      	uxth	r3, r3
 8004a98:	ea6f 4383 	mvn.w	r3, r3, lsl #18
 8004a9c:	ea6f 4393 	mvn.w	r3, r3, lsr #18
 8004aa0:	b29b      	uxth	r3, r3
 8004aa2:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
		TIM1->CCR4 = CCR; // set Valude Register CCR4
 8004aa6:	4b05      	ldr	r3, [pc, #20]	; (8004abc <Tim1_PWM_Enable+0x1b8>)
 8004aa8:	683a      	ldr	r2, [r7, #0]
 8004aaa:	b292      	uxth	r2, r2
 8004aac:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
	}
	
	else while(1); // number Channel > 4
};
 8004ab0:	e000      	b.n	8004ab4 <Tim1_PWM_Enable+0x1b0>
		TIM1->CCER |= (1 << 12); // Capture/Compare 4 output enable
		TIM1->BDTR |= (1 << 15) | (1 << 14); // Main output enable And Automatic output enable
		TIM1->CCR4 = CCR; // set Valude Register CCR4
	}
	
	else while(1); // number Channel > 4
 8004ab2:	e7fe      	b.n	8004ab2 <Tim1_PWM_Enable+0x1ae>
};
 8004ab4:	370c      	adds	r7, #12
 8004ab6:	46bd      	mov	sp, r7
 8004ab8:	bc80      	pop	{r7}
 8004aba:	4770      	bx	lr
 8004abc:	40012c00 	.word	0x40012c00

08004ac0 <Tim2Enable>:

};


/********function TIMER2 Enable *************/
void Tim2Enable(char CH,int CCR,char MODE_IO){
 8004ac0:	b480      	push	{r7}
 8004ac2:	b083      	sub	sp, #12
 8004ac4:	af00      	add	r7, sp, #0
 8004ac6:	4603      	mov	r3, r0
 8004ac8:	6039      	str	r1, [r7, #0]
 8004aca:	71fb      	strb	r3, [r7, #7]
 8004acc:	4613      	mov	r3, r2
 8004ace:	71bb      	strb	r3, [r7, #6]
	TIM2->CR1 |= (1 << 0) | (1 << 7); // set counter And Bit ARPE
 8004ad0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8004ad4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004ad8:	881b      	ldrh	r3, [r3, #0]
 8004ada:	b29b      	uxth	r3, r3
 8004adc:	f043 0381 	orr.w	r3, r3, #129	; 0x81
 8004ae0:	b29b      	uxth	r3, r3
 8004ae2:	8013      	strh	r3, [r2, #0]
	
	if(CH == 1){ // channel == 1
 8004ae4:	79fb      	ldrb	r3, [r7, #7]
 8004ae6:	2b01      	cmp	r3, #1
 8004ae8:	d169      	bne.n	8004bbe <Tim2Enable+0xfe>
		TIM2->CCR1 = CCR; // set value CCRx
 8004aea:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004aee:	683a      	ldr	r2, [r7, #0]
 8004af0:	b292      	uxth	r2, r2
 8004af2:	869a      	strh	r2, [r3, #52]	; 0x34
		switch (MODE_IO){
 8004af4:	79bb      	ldrb	r3, [r7, #6]
 8004af6:	3b01      	subs	r3, #1
 8004af8:	2b03      	cmp	r3, #3
 8004afa:	f200 81a9 	bhi.w	8004e50 <Tim2Enable+0x390>
 8004afe:	a201      	add	r2, pc, #4	; (adr r2, 8004b04 <Tim2Enable+0x44>)
 8004b00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b04:	08004b15 	.word	0x08004b15
 8004b08:	08004b3f 	.word	0x08004b3f
 8004b0c:	08004b69 	.word	0x08004b69
 8004b10:	08004b93 	.word	0x08004b93
			case 1 : // MODE Output == SET PIN TIMER
			TIM2->CCMR1 |= (1 << 4); // MODE Output TIMER = SET PIN
 8004b14:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8004b18:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004b1c:	8b1b      	ldrh	r3, [r3, #24]
 8004b1e:	b29b      	uxth	r3, r3
 8004b20:	f043 0310 	orr.w	r3, r3, #16
 8004b24:	b29b      	uxth	r3, r3
 8004b26:	8313      	strh	r3, [r2, #24]
			TIM2->CCER |= (1 << 0); // enable output Bit CC1E
 8004b28:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8004b2c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004b30:	8c1b      	ldrh	r3, [r3, #32]
 8004b32:	b29b      	uxth	r3, r3
 8004b34:	f043 0301 	orr.w	r3, r3, #1
 8004b38:	b29b      	uxth	r3, r3
 8004b3a:	8413      	strh	r3, [r2, #32]
			break;
 8004b3c:	e188      	b.n	8004e50 <Tim2Enable+0x390>
			
			case 2 : // MODE Output == RESET PIN TIMER
			TIM2->CCMR1 |= (2 << 4); // MODE Output TIMER = RESET PIN
 8004b3e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8004b42:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004b46:	8b1b      	ldrh	r3, [r3, #24]
 8004b48:	b29b      	uxth	r3, r3
 8004b4a:	f043 0320 	orr.w	r3, r3, #32
 8004b4e:	b29b      	uxth	r3, r3
 8004b50:	8313      	strh	r3, [r2, #24]
			TIM2->CCER |= (1 << 0); // enable output Bit CC1E
 8004b52:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8004b56:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004b5a:	8c1b      	ldrh	r3, [r3, #32]
 8004b5c:	b29b      	uxth	r3, r3
 8004b5e:	f043 0301 	orr.w	r3, r3, #1
 8004b62:	b29b      	uxth	r3, r3
 8004b64:	8413      	strh	r3, [r2, #32]
			break;
 8004b66:	e173      	b.n	8004e50 <Tim2Enable+0x390>

			case 3 : // MODE Output == TOGGLE PIN TIMER
			TIM2->CCMR1 |= (3 << 4); // MODE Output TIMER = TOGGLE PIN
 8004b68:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8004b6c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004b70:	8b1b      	ldrh	r3, [r3, #24]
 8004b72:	b29b      	uxth	r3, r3
 8004b74:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8004b78:	b29b      	uxth	r3, r3
 8004b7a:	8313      	strh	r3, [r2, #24]
			TIM2->CCER |= (1 << 0); // enable output Bit CC1E
 8004b7c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8004b80:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004b84:	8c1b      	ldrh	r3, [r3, #32]
 8004b86:	b29b      	uxth	r3, r3
 8004b88:	f043 0301 	orr.w	r3, r3, #1
 8004b8c:	b29b      	uxth	r3, r3
 8004b8e:	8413      	strh	r3, [r2, #32]
			break;
 8004b90:	e15e      	b.n	8004e50 <Tim2Enable+0x390>

			case 4 : // MODE Output == None envent In Output TIMER
			TIM2->CCMR1 |= (2 << 4); // MODE Output TIMER = None envent In Output TIMER
 8004b92:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8004b96:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004b9a:	8b1b      	ldrh	r3, [r3, #24]
 8004b9c:	b29b      	uxth	r3, r3
 8004b9e:	f043 0320 	orr.w	r3, r3, #32
 8004ba2:	b29b      	uxth	r3, r3
 8004ba4:	8313      	strh	r3, [r2, #24]
			TIM2->CCER &= ~(1); // disable output Bit CC1E
 8004ba6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8004baa:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004bae:	8c1b      	ldrh	r3, [r3, #32]
 8004bb0:	b29b      	uxth	r3, r3
 8004bb2:	f023 0301 	bic.w	r3, r3, #1
 8004bb6:	b29b      	uxth	r3, r3
 8004bb8:	8413      	strh	r3, [r2, #32]
			break;
 8004bba:	bf00      	nop
 8004bbc:	e148      	b.n	8004e50 <Tim2Enable+0x390>
		}
	}
	else if(CH == 2){ // channel == 2
 8004bbe:	79fb      	ldrb	r3, [r7, #7]
 8004bc0:	2b02      	cmp	r3, #2
 8004bc2:	d16a      	bne.n	8004c9a <Tim2Enable+0x1da>
		TIM2->CCR2 = CCR; // set value CCRx
 8004bc4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004bc8:	683a      	ldr	r2, [r7, #0]
 8004bca:	b292      	uxth	r2, r2
 8004bcc:	871a      	strh	r2, [r3, #56]	; 0x38
		switch (MODE_IO){
 8004bce:	79bb      	ldrb	r3, [r7, #6]
 8004bd0:	3b01      	subs	r3, #1
 8004bd2:	2b03      	cmp	r3, #3
 8004bd4:	f200 813c 	bhi.w	8004e50 <Tim2Enable+0x390>
 8004bd8:	a201      	add	r2, pc, #4	; (adr r2, 8004be0 <Tim2Enable+0x120>)
 8004bda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bde:	bf00      	nop
 8004be0:	08004bf1 	.word	0x08004bf1
 8004be4:	08004c1b 	.word	0x08004c1b
 8004be8:	08004c45 	.word	0x08004c45
 8004bec:	08004c6f 	.word	0x08004c6f
			case 1 : // MODE Output == SET PIN TIMER
			TIM2->CCMR1 |= (1 << 12); // MODE Output TIMER = SET PIN
 8004bf0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8004bf4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004bf8:	8b1b      	ldrh	r3, [r3, #24]
 8004bfa:	b29b      	uxth	r3, r3
 8004bfc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004c00:	b29b      	uxth	r3, r3
 8004c02:	8313      	strh	r3, [r2, #24]
			TIM2->CCER |= (1 << 4); // enable output Bit CC2E
 8004c04:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8004c08:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004c0c:	8c1b      	ldrh	r3, [r3, #32]
 8004c0e:	b29b      	uxth	r3, r3
 8004c10:	f043 0310 	orr.w	r3, r3, #16
 8004c14:	b29b      	uxth	r3, r3
 8004c16:	8413      	strh	r3, [r2, #32]
			break;
 8004c18:	e11a      	b.n	8004e50 <Tim2Enable+0x390>
			
			case 2 : // MODE Output == RESET PIN TIMER
			TIM2->CCMR1 |= (2 << 12); // MODE Output TIMER = RESET PIN
 8004c1a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8004c1e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004c22:	8b1b      	ldrh	r3, [r3, #24]
 8004c24:	b29b      	uxth	r3, r3
 8004c26:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004c2a:	b29b      	uxth	r3, r3
 8004c2c:	8313      	strh	r3, [r2, #24]
			TIM2->CCER |= (1 << 4); // enable output Bit CC2E
 8004c2e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8004c32:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004c36:	8c1b      	ldrh	r3, [r3, #32]
 8004c38:	b29b      	uxth	r3, r3
 8004c3a:	f043 0310 	orr.w	r3, r3, #16
 8004c3e:	b29b      	uxth	r3, r3
 8004c40:	8413      	strh	r3, [r2, #32]
			break;
 8004c42:	e105      	b.n	8004e50 <Tim2Enable+0x390>

			case 3 : // MODE Output == TOGGLE PIN TIMER
			TIM2->CCMR1 |= (3 << 12); // MODE Output TIMER = TOGGLE PIN
 8004c44:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8004c48:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004c4c:	8b1b      	ldrh	r3, [r3, #24]
 8004c4e:	b29b      	uxth	r3, r3
 8004c50:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 8004c54:	b29b      	uxth	r3, r3
 8004c56:	8313      	strh	r3, [r2, #24]
			TIM2->CCER |= (1 << 4); // enable output Bit CC2E
 8004c58:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8004c5c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004c60:	8c1b      	ldrh	r3, [r3, #32]
 8004c62:	b29b      	uxth	r3, r3
 8004c64:	f043 0310 	orr.w	r3, r3, #16
 8004c68:	b29b      	uxth	r3, r3
 8004c6a:	8413      	strh	r3, [r2, #32]
			break;
 8004c6c:	e0f0      	b.n	8004e50 <Tim2Enable+0x390>

			case 4 : // MODE Output == None envent In Output TIMER
			TIM2->CCMR1 |= (2 << 12); // MODE Output TIMER = None envent In Output TIMER
 8004c6e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8004c72:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004c76:	8b1b      	ldrh	r3, [r3, #24]
 8004c78:	b29b      	uxth	r3, r3
 8004c7a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004c7e:	b29b      	uxth	r3, r3
 8004c80:	8313      	strh	r3, [r2, #24]
			TIM2->CCER &= ~(16); // disable output Bit CC1E
 8004c82:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8004c86:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004c8a:	8c1b      	ldrh	r3, [r3, #32]
 8004c8c:	b29b      	uxth	r3, r3
 8004c8e:	f023 0310 	bic.w	r3, r3, #16
 8004c92:	b29b      	uxth	r3, r3
 8004c94:	8413      	strh	r3, [r2, #32]
			break;
 8004c96:	bf00      	nop
 8004c98:	e0da      	b.n	8004e50 <Tim2Enable+0x390>
		}
	}
	else if(CH == 3){ // channel == 3
 8004c9a:	79fb      	ldrb	r3, [r7, #7]
 8004c9c:	2b03      	cmp	r3, #3
 8004c9e:	d16a      	bne.n	8004d76 <Tim2Enable+0x2b6>
		TIM2->CCR3 = CCR; // set value CCRx
 8004ca0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004ca4:	683a      	ldr	r2, [r7, #0]
 8004ca6:	b292      	uxth	r2, r2
 8004ca8:	879a      	strh	r2, [r3, #60]	; 0x3c
		switch (MODE_IO){
 8004caa:	79bb      	ldrb	r3, [r7, #6]
 8004cac:	3b01      	subs	r3, #1
 8004cae:	2b03      	cmp	r3, #3
 8004cb0:	f200 80ce 	bhi.w	8004e50 <Tim2Enable+0x390>
 8004cb4:	a201      	add	r2, pc, #4	; (adr r2, 8004cbc <Tim2Enable+0x1fc>)
 8004cb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cba:	bf00      	nop
 8004cbc:	08004ccd 	.word	0x08004ccd
 8004cc0:	08004cf7 	.word	0x08004cf7
 8004cc4:	08004d21 	.word	0x08004d21
 8004cc8:	08004d4b 	.word	0x08004d4b
			case 1 : // MODE Output == SET PIN TIMER
			TIM2->CCMR2 |= (1 << 4); // MODE Output TIMER = SET PIN
 8004ccc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8004cd0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004cd4:	8b9b      	ldrh	r3, [r3, #28]
 8004cd6:	b29b      	uxth	r3, r3
 8004cd8:	f043 0310 	orr.w	r3, r3, #16
 8004cdc:	b29b      	uxth	r3, r3
 8004cde:	8393      	strh	r3, [r2, #28]
			TIM2->CCER |= (1 << 8); // enable output Bit CC3E
 8004ce0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8004ce4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004ce8:	8c1b      	ldrh	r3, [r3, #32]
 8004cea:	b29b      	uxth	r3, r3
 8004cec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004cf0:	b29b      	uxth	r3, r3
 8004cf2:	8413      	strh	r3, [r2, #32]
			break;
 8004cf4:	e0ac      	b.n	8004e50 <Tim2Enable+0x390>
			
			case 2 : // MODE Output == RESET PIN TIMER
			TIM2->CCMR2 |= (2 << 4); // MODE Output TIMER = RESET PIN
 8004cf6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8004cfa:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004cfe:	8b9b      	ldrh	r3, [r3, #28]
 8004d00:	b29b      	uxth	r3, r3
 8004d02:	f043 0320 	orr.w	r3, r3, #32
 8004d06:	b29b      	uxth	r3, r3
 8004d08:	8393      	strh	r3, [r2, #28]
			TIM2->CCER |= (1 << 8); // enable output Bit CC3E
 8004d0a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8004d0e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004d12:	8c1b      	ldrh	r3, [r3, #32]
 8004d14:	b29b      	uxth	r3, r3
 8004d16:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004d1a:	b29b      	uxth	r3, r3
 8004d1c:	8413      	strh	r3, [r2, #32]
			break;
 8004d1e:	e097      	b.n	8004e50 <Tim2Enable+0x390>

			case 3 : // MODE Output == TOGGLE PIN TIMER
			TIM2->CCMR2 |= (3 << 4); // MODE Output TIMER = TOGGLE PIN
 8004d20:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8004d24:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004d28:	8b9b      	ldrh	r3, [r3, #28]
 8004d2a:	b29b      	uxth	r3, r3
 8004d2c:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8004d30:	b29b      	uxth	r3, r3
 8004d32:	8393      	strh	r3, [r2, #28]
			TIM2->CCER |= (1 << 8); // enable output Bit CC3E
 8004d34:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8004d38:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004d3c:	8c1b      	ldrh	r3, [r3, #32]
 8004d3e:	b29b      	uxth	r3, r3
 8004d40:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004d44:	b29b      	uxth	r3, r3
 8004d46:	8413      	strh	r3, [r2, #32]
			break;
 8004d48:	e082      	b.n	8004e50 <Tim2Enable+0x390>

			case 4 : // MODE Output == None envent In Output TIMER
			TIM2->CCMR2 |= (2 << 4); // MODE Output TIMER = None envent In Output TIMER
 8004d4a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8004d4e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004d52:	8b9b      	ldrh	r3, [r3, #28]
 8004d54:	b29b      	uxth	r3, r3
 8004d56:	f043 0320 	orr.w	r3, r3, #32
 8004d5a:	b29b      	uxth	r3, r3
 8004d5c:	8393      	strh	r3, [r2, #28]
			TIM2->CCER &= ~(1 << 8); // disable output Bit CC1E
 8004d5e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8004d62:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004d66:	8c1b      	ldrh	r3, [r3, #32]
 8004d68:	b29b      	uxth	r3, r3
 8004d6a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004d6e:	b29b      	uxth	r3, r3
 8004d70:	8413      	strh	r3, [r2, #32]
			break;
 8004d72:	bf00      	nop
 8004d74:	e06c      	b.n	8004e50 <Tim2Enable+0x390>
		}
	}	
	else if(CH == 4){ // channel == 4
 8004d76:	79fb      	ldrb	r3, [r7, #7]
 8004d78:	2b04      	cmp	r3, #4
 8004d7a:	d169      	bne.n	8004e50 <Tim2Enable+0x390>
		TIM2->CCR4 = CCR; // set value CCRx
 8004d7c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004d80:	683a      	ldr	r2, [r7, #0]
 8004d82:	b292      	uxth	r2, r2
 8004d84:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
		switch (MODE_IO){
 8004d88:	79bb      	ldrb	r3, [r7, #6]
 8004d8a:	3b01      	subs	r3, #1
 8004d8c:	2b03      	cmp	r3, #3
 8004d8e:	d85f      	bhi.n	8004e50 <Tim2Enable+0x390>
 8004d90:	a201      	add	r2, pc, #4	; (adr r2, 8004d98 <Tim2Enable+0x2d8>)
 8004d92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d96:	bf00      	nop
 8004d98:	08004da9 	.word	0x08004da9
 8004d9c:	08004dd3 	.word	0x08004dd3
 8004da0:	08004dfd 	.word	0x08004dfd
 8004da4:	08004e27 	.word	0x08004e27
			case 1 : // MODE Output == SET PIN TIMER
			TIM2->CCMR2 |= (1 << 12); // MODE Output TIMER = SET PIN
 8004da8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8004dac:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004db0:	8b9b      	ldrh	r3, [r3, #28]
 8004db2:	b29b      	uxth	r3, r3
 8004db4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004db8:	b29b      	uxth	r3, r3
 8004dba:	8393      	strh	r3, [r2, #28]
			TIM2->CCER |= (1 << 12); // enable output Bit CC4E
 8004dbc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8004dc0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004dc4:	8c1b      	ldrh	r3, [r3, #32]
 8004dc6:	b29b      	uxth	r3, r3
 8004dc8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004dcc:	b29b      	uxth	r3, r3
 8004dce:	8413      	strh	r3, [r2, #32]
			break;
 8004dd0:	e03e      	b.n	8004e50 <Tim2Enable+0x390>
			
			case 2 : // MODE Output == RESET PIN TIMER
			TIM2->CCMR2 |= (2 << 12); // MODE Output TIMER = RESET PIN
 8004dd2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8004dd6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004dda:	8b9b      	ldrh	r3, [r3, #28]
 8004ddc:	b29b      	uxth	r3, r3
 8004dde:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004de2:	b29b      	uxth	r3, r3
 8004de4:	8393      	strh	r3, [r2, #28]
			TIM2->CCER |= (1 << 12); // enable output Bit CC4E
 8004de6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8004dea:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004dee:	8c1b      	ldrh	r3, [r3, #32]
 8004df0:	b29b      	uxth	r3, r3
 8004df2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004df6:	b29b      	uxth	r3, r3
 8004df8:	8413      	strh	r3, [r2, #32]
			break;
 8004dfa:	e029      	b.n	8004e50 <Tim2Enable+0x390>

			case 3 : // MODE Output == TOGGLE PIN TIMER
			TIM2->CCMR2 |= (3 << 12); // MODE Output TIMER = TOGGLE PIN
 8004dfc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8004e00:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004e04:	8b9b      	ldrh	r3, [r3, #28]
 8004e06:	b29b      	uxth	r3, r3
 8004e08:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 8004e0c:	b29b      	uxth	r3, r3
 8004e0e:	8393      	strh	r3, [r2, #28]
			TIM2->CCER |= (1 << 12); // enable output Bit CC4E
 8004e10:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8004e14:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004e18:	8c1b      	ldrh	r3, [r3, #32]
 8004e1a:	b29b      	uxth	r3, r3
 8004e1c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004e20:	b29b      	uxth	r3, r3
 8004e22:	8413      	strh	r3, [r2, #32]
			break;
 8004e24:	e014      	b.n	8004e50 <Tim2Enable+0x390>

			case 4 : // MODE Output == None envent In Output TIMER
			TIM2->CCMR2 |= (2 << 12); // MODE Output TIMER = None envent In Output TIMER
 8004e26:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8004e2a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004e2e:	8b9b      	ldrh	r3, [r3, #28]
 8004e30:	b29b      	uxth	r3, r3
 8004e32:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004e36:	b29b      	uxth	r3, r3
 8004e38:	8393      	strh	r3, [r2, #28]
			TIM2->CCER &= ~(1 << 12); // disable output Bit CC4E
 8004e3a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8004e3e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004e42:	8c1b      	ldrh	r3, [r3, #32]
 8004e44:	b29b      	uxth	r3, r3
 8004e46:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004e4a:	b29b      	uxth	r3, r3
 8004e4c:	8413      	strh	r3, [r2, #32]
			break;
 8004e4e:	bf00      	nop
		}
	}	

}
 8004e50:	bf00      	nop
 8004e52:	370c      	adds	r7, #12
 8004e54:	46bd      	mov	sp, r7
 8004e56:	bc80      	pop	{r7}
 8004e58:	4770      	bx	lr
 8004e5a:	bf00      	nop

08004e5c <PWM_SetCCR>:
	}	

}

void PWM_SetCCR(TIM_TypeDef* TIMx, char CCRx, float CCRxVal)
{
 8004e5c:	b580      	push	{r7, lr}
 8004e5e:	b084      	sub	sp, #16
 8004e60:	af00      	add	r7, sp, #0
 8004e62:	60f8      	str	r0, [r7, #12]
 8004e64:	460b      	mov	r3, r1
 8004e66:	607a      	str	r2, [r7, #4]
 8004e68:	72fb      	strb	r3, [r7, #11]
	if(CCRx == 1){
 8004e6a:	7afb      	ldrb	r3, [r7, #11]
 8004e6c:	2b01      	cmp	r3, #1
 8004e6e:	d11e      	bne.n	8004eae <PWM_SetCCR+0x52>
		TIMx->CCR1 = ( (CCRxVal * TIMx->ARR) / 100 ) +1;// set value CCR1
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004e74:	b29b      	uxth	r3, r3
 8004e76:	4618      	mov	r0, r3
 8004e78:	f7fb feee 	bl	8000c58 <__aeabi_i2f>
 8004e7c:	4603      	mov	r3, r0
 8004e7e:	6879      	ldr	r1, [r7, #4]
 8004e80:	4618      	mov	r0, r3
 8004e82:	f7fb ff3d 	bl	8000d00 <__aeabi_fmul>
 8004e86:	4603      	mov	r3, r0
 8004e88:	493e      	ldr	r1, [pc, #248]	; (8004f84 <PWM_SetCCR+0x128>)
 8004e8a:	4618      	mov	r0, r3
 8004e8c:	f7fb ffec 	bl	8000e68 <__aeabi_fdiv>
 8004e90:	4603      	mov	r3, r0
 8004e92:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8004e96:	4618      	mov	r0, r3
 8004e98:	f7fb fe2a 	bl	8000af0 <__addsf3>
 8004e9c:	4603      	mov	r3, r0
 8004e9e:	4618      	mov	r0, r3
 8004ea0:	f7fc f91a 	bl	80010d8 <__aeabi_f2uiz>
 8004ea4:	4603      	mov	r3, r0
 8004ea6:	b29a      	uxth	r2, r3
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	869a      	strh	r2, [r3, #52]	; 0x34
		TIMx->CCR3 = ( (CCRxVal * TIMx->ARR) / 100 ) +1;// set value CCR3
	}
	else if(CCRx == 4){
		TIMx->CCR4 = ( (CCRxVal * TIMx->ARR) / 100 ) +1;// set value CCR4
	};
};
 8004eac:	e065      	b.n	8004f7a <PWM_SetCCR+0x11e>
void PWM_SetCCR(TIM_TypeDef* TIMx, char CCRx, float CCRxVal)
{
	if(CCRx == 1){
		TIMx->CCR1 = ( (CCRxVal * TIMx->ARR) / 100 ) +1;// set value CCR1
	}
	else if(CCRx == 2){
 8004eae:	7afb      	ldrb	r3, [r7, #11]
 8004eb0:	2b02      	cmp	r3, #2
 8004eb2:	d11e      	bne.n	8004ef2 <PWM_SetCCR+0x96>
		TIMx->CCR2 = ( (CCRxVal * TIMx->ARR) / 100 ) +1;// set value CCR2
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004eb8:	b29b      	uxth	r3, r3
 8004eba:	4618      	mov	r0, r3
 8004ebc:	f7fb fecc 	bl	8000c58 <__aeabi_i2f>
 8004ec0:	4603      	mov	r3, r0
 8004ec2:	6879      	ldr	r1, [r7, #4]
 8004ec4:	4618      	mov	r0, r3
 8004ec6:	f7fb ff1b 	bl	8000d00 <__aeabi_fmul>
 8004eca:	4603      	mov	r3, r0
 8004ecc:	492d      	ldr	r1, [pc, #180]	; (8004f84 <PWM_SetCCR+0x128>)
 8004ece:	4618      	mov	r0, r3
 8004ed0:	f7fb ffca 	bl	8000e68 <__aeabi_fdiv>
 8004ed4:	4603      	mov	r3, r0
 8004ed6:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8004eda:	4618      	mov	r0, r3
 8004edc:	f7fb fe08 	bl	8000af0 <__addsf3>
 8004ee0:	4603      	mov	r3, r0
 8004ee2:	4618      	mov	r0, r3
 8004ee4:	f7fc f8f8 	bl	80010d8 <__aeabi_f2uiz>
 8004ee8:	4603      	mov	r3, r0
 8004eea:	b29a      	uxth	r2, r3
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	871a      	strh	r2, [r3, #56]	; 0x38
		TIMx->CCR3 = ( (CCRxVal * TIMx->ARR) / 100 ) +1;// set value CCR3
	}
	else if(CCRx == 4){
		TIMx->CCR4 = ( (CCRxVal * TIMx->ARR) / 100 ) +1;// set value CCR4
	};
};
 8004ef0:	e043      	b.n	8004f7a <PWM_SetCCR+0x11e>
		TIMx->CCR1 = ( (CCRxVal * TIMx->ARR) / 100 ) +1;// set value CCR1
	}
	else if(CCRx == 2){
		TIMx->CCR2 = ( (CCRxVal * TIMx->ARR) / 100 ) +1;// set value CCR2
	}
	else if(CCRx == 3){
 8004ef2:	7afb      	ldrb	r3, [r7, #11]
 8004ef4:	2b03      	cmp	r3, #3
 8004ef6:	d11e      	bne.n	8004f36 <PWM_SetCCR+0xda>
		TIMx->CCR3 = ( (CCRxVal * TIMx->ARR) / 100 ) +1;// set value CCR3
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004efc:	b29b      	uxth	r3, r3
 8004efe:	4618      	mov	r0, r3
 8004f00:	f7fb feaa 	bl	8000c58 <__aeabi_i2f>
 8004f04:	4603      	mov	r3, r0
 8004f06:	6879      	ldr	r1, [r7, #4]
 8004f08:	4618      	mov	r0, r3
 8004f0a:	f7fb fef9 	bl	8000d00 <__aeabi_fmul>
 8004f0e:	4603      	mov	r3, r0
 8004f10:	491c      	ldr	r1, [pc, #112]	; (8004f84 <PWM_SetCCR+0x128>)
 8004f12:	4618      	mov	r0, r3
 8004f14:	f7fb ffa8 	bl	8000e68 <__aeabi_fdiv>
 8004f18:	4603      	mov	r3, r0
 8004f1a:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8004f1e:	4618      	mov	r0, r3
 8004f20:	f7fb fde6 	bl	8000af0 <__addsf3>
 8004f24:	4603      	mov	r3, r0
 8004f26:	4618      	mov	r0, r3
 8004f28:	f7fc f8d6 	bl	80010d8 <__aeabi_f2uiz>
 8004f2c:	4603      	mov	r3, r0
 8004f2e:	b29a      	uxth	r2, r3
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	879a      	strh	r2, [r3, #60]	; 0x3c
	}
	else if(CCRx == 4){
		TIMx->CCR4 = ( (CCRxVal * TIMx->ARR) / 100 ) +1;// set value CCR4
	};
};
 8004f34:	e021      	b.n	8004f7a <PWM_SetCCR+0x11e>
		TIMx->CCR2 = ( (CCRxVal * TIMx->ARR) / 100 ) +1;// set value CCR2
	}
	else if(CCRx == 3){
		TIMx->CCR3 = ( (CCRxVal * TIMx->ARR) / 100 ) +1;// set value CCR3
	}
	else if(CCRx == 4){
 8004f36:	7afb      	ldrb	r3, [r7, #11]
 8004f38:	2b04      	cmp	r3, #4
 8004f3a:	d11e      	bne.n	8004f7a <PWM_SetCCR+0x11e>
		TIMx->CCR4 = ( (CCRxVal * TIMx->ARR) / 100 ) +1;// set value CCR4
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004f40:	b29b      	uxth	r3, r3
 8004f42:	4618      	mov	r0, r3
 8004f44:	f7fb fe88 	bl	8000c58 <__aeabi_i2f>
 8004f48:	4603      	mov	r3, r0
 8004f4a:	6879      	ldr	r1, [r7, #4]
 8004f4c:	4618      	mov	r0, r3
 8004f4e:	f7fb fed7 	bl	8000d00 <__aeabi_fmul>
 8004f52:	4603      	mov	r3, r0
 8004f54:	490b      	ldr	r1, [pc, #44]	; (8004f84 <PWM_SetCCR+0x128>)
 8004f56:	4618      	mov	r0, r3
 8004f58:	f7fb ff86 	bl	8000e68 <__aeabi_fdiv>
 8004f5c:	4603      	mov	r3, r0
 8004f5e:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8004f62:	4618      	mov	r0, r3
 8004f64:	f7fb fdc4 	bl	8000af0 <__addsf3>
 8004f68:	4603      	mov	r3, r0
 8004f6a:	4618      	mov	r0, r3
 8004f6c:	f7fc f8b4 	bl	80010d8 <__aeabi_f2uiz>
 8004f70:	4603      	mov	r3, r0
 8004f72:	b29a      	uxth	r2, r3
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
	};
};
 8004f7a:	bf00      	nop
 8004f7c:	3710      	adds	r7, #16
 8004f7e:	46bd      	mov	sp, r7
 8004f80:	bd80      	pop	{r7, pc}
 8004f82:	bf00      	nop
 8004f84:	42c80000 	.word	0x42c80000

08004f88 <PWM_GetCCR>:
float PWM_GetCCR(TIM_TypeDef* TIMx, char CCRx)
{
 8004f88:	b580      	push	{r7, lr}
 8004f8a:	b082      	sub	sp, #8
 8004f8c:	af00      	add	r7, sp, #0
 8004f8e:	6078      	str	r0, [r7, #4]
 8004f90:	460b      	mov	r3, r1
 8004f92:	70fb      	strb	r3, [r7, #3]
	if(CCRx == 1)
 8004f94:	78fb      	ldrb	r3, [r7, #3]
 8004f96:	2b01      	cmp	r3, #1
 8004f98:	d110      	bne.n	8004fbc <PWM_GetCCR+0x34>
		return (100 * TIMx->CCR1) / TIMx->ARR;// return PWM value(percent)
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 8004f9e:	b29b      	uxth	r3, r3
 8004fa0:	461a      	mov	r2, r3
 8004fa2:	2364      	movs	r3, #100	; 0x64
 8004fa4:	fb03 f302 	mul.w	r3, r3, r2
 8004fa8:	687a      	ldr	r2, [r7, #4]
 8004faa:	8d92      	ldrh	r2, [r2, #44]	; 0x2c
 8004fac:	b292      	uxth	r2, r2
 8004fae:	fb93 f3f2 	sdiv	r3, r3, r2
 8004fb2:	4618      	mov	r0, r3
 8004fb4:	f7fb fe50 	bl	8000c58 <__aeabi_i2f>
 8004fb8:	4603      	mov	r3, r0
 8004fba:	e03b      	b.n	8005034 <PWM_GetCCR+0xac>

	else if(CCRx == 2)
 8004fbc:	78fb      	ldrb	r3, [r7, #3]
 8004fbe:	2b02      	cmp	r3, #2
 8004fc0:	d110      	bne.n	8004fe4 <PWM_GetCCR+0x5c>
		return (100 * TIMx->CCR1) / TIMx->ARR;// return PWM value(percent)
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 8004fc6:	b29b      	uxth	r3, r3
 8004fc8:	461a      	mov	r2, r3
 8004fca:	2364      	movs	r3, #100	; 0x64
 8004fcc:	fb03 f302 	mul.w	r3, r3, r2
 8004fd0:	687a      	ldr	r2, [r7, #4]
 8004fd2:	8d92      	ldrh	r2, [r2, #44]	; 0x2c
 8004fd4:	b292      	uxth	r2, r2
 8004fd6:	fb93 f3f2 	sdiv	r3, r3, r2
 8004fda:	4618      	mov	r0, r3
 8004fdc:	f7fb fe3c 	bl	8000c58 <__aeabi_i2f>
 8004fe0:	4603      	mov	r3, r0
 8004fe2:	e027      	b.n	8005034 <PWM_GetCCR+0xac>

	else if(CCRx == 3)
 8004fe4:	78fb      	ldrb	r3, [r7, #3]
 8004fe6:	2b03      	cmp	r3, #3
 8004fe8:	d110      	bne.n	800500c <PWM_GetCCR+0x84>
		return (100 * TIMx->CCR1) / TIMx->ARR;// return PWM value(percent)
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 8004fee:	b29b      	uxth	r3, r3
 8004ff0:	461a      	mov	r2, r3
 8004ff2:	2364      	movs	r3, #100	; 0x64
 8004ff4:	fb03 f302 	mul.w	r3, r3, r2
 8004ff8:	687a      	ldr	r2, [r7, #4]
 8004ffa:	8d92      	ldrh	r2, [r2, #44]	; 0x2c
 8004ffc:	b292      	uxth	r2, r2
 8004ffe:	fb93 f3f2 	sdiv	r3, r3, r2
 8005002:	4618      	mov	r0, r3
 8005004:	f7fb fe28 	bl	8000c58 <__aeabi_i2f>
 8005008:	4603      	mov	r3, r0
 800500a:	e013      	b.n	8005034 <PWM_GetCCR+0xac>

	else if(CCRx == 4)
 800500c:	78fb      	ldrb	r3, [r7, #3]
 800500e:	2b04      	cmp	r3, #4
 8005010:	d110      	bne.n	8005034 <PWM_GetCCR+0xac>
		return (100 * TIMx->CCR1) / TIMx->ARR;// return PWM value(percent)
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 8005016:	b29b      	uxth	r3, r3
 8005018:	461a      	mov	r2, r3
 800501a:	2364      	movs	r3, #100	; 0x64
 800501c:	fb03 f302 	mul.w	r3, r3, r2
 8005020:	687a      	ldr	r2, [r7, #4]
 8005022:	8d92      	ldrh	r2, [r2, #44]	; 0x2c
 8005024:	b292      	uxth	r2, r2
 8005026:	fb93 f3f2 	sdiv	r3, r3, r2
 800502a:	4618      	mov	r0, r3
 800502c:	f7fb fe14 	bl	8000c58 <__aeabi_i2f>
 8005030:	4603      	mov	r3, r0
 8005032:	e7ff      	b.n	8005034 <PWM_GetCCR+0xac>

};
 8005034:	4618      	mov	r0, r3
 8005036:	3708      	adds	r7, #8
 8005038:	46bd      	mov	sp, r7
 800503a:	bd80      	pop	{r7, pc}

0800503c <USART1_SendChar>:
		while(1);

};

/**************** functions send character ******************/
void USART1_SendChar(char Char){
 800503c:	b480      	push	{r7}
 800503e:	b083      	sub	sp, #12
 8005040:	af00      	add	r7, sp, #0
 8005042:	4603      	mov	r3, r0
 8005044:	71fb      	strb	r3, [r7, #7]
	USART1->DR = Char;
 8005046:	4b0c      	ldr	r3, [pc, #48]	; (8005078 <USART1_SendChar+0x3c>)
 8005048:	79fa      	ldrb	r2, [r7, #7]
 800504a:	b292      	uxth	r2, r2
 800504c:	809a      	strh	r2, [r3, #4]
	while( ( (USART1->SR) & (1 << 6) ) != (1 << 6) ); // wait if Bits TC == 0
 800504e:	bf00      	nop
 8005050:	4b09      	ldr	r3, [pc, #36]	; (8005078 <USART1_SendChar+0x3c>)
 8005052:	881b      	ldrh	r3, [r3, #0]
 8005054:	b29b      	uxth	r3, r3
 8005056:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800505a:	2b00      	cmp	r3, #0
 800505c:	d0f8      	beq.n	8005050 <USART1_SendChar+0x14>
	USART1->SR &= ~(1 << 6); // set TC == 0
 800505e:	4a06      	ldr	r2, [pc, #24]	; (8005078 <USART1_SendChar+0x3c>)
 8005060:	4b05      	ldr	r3, [pc, #20]	; (8005078 <USART1_SendChar+0x3c>)
 8005062:	881b      	ldrh	r3, [r3, #0]
 8005064:	b29b      	uxth	r3, r3
 8005066:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800506a:	b29b      	uxth	r3, r3
 800506c:	8013      	strh	r3, [r2, #0]
};
 800506e:	bf00      	nop
 8005070:	370c      	adds	r7, #12
 8005072:	46bd      	mov	sp, r7
 8005074:	bc80      	pop	{r7}
 8005076:	4770      	bx	lr
 8005078:	40013800 	.word	0x40013800

0800507c <USART1_Printf>:
	while( ( (USART3->SR) & (1 << 6) ) != (1 << 6) ); // if Bits TC == 0
	USART3->SR &= ~(1 << 6); // set TC == 0
};

/************** functions printf *********************/
void USART1_Printf(char s[]){
 800507c:	b580      	push	{r7, lr}
 800507e:	b084      	sub	sp, #16
 8005080:	af00      	add	r7, sp, #0
 8005082:	6078      	str	r0, [r7, #4]
	char i = strlen(s); // variable i == number length string
 8005084:	6878      	ldr	r0, [r7, #4]
 8005086:	f7fb f86d 	bl	8000164 <strlen>
 800508a:	4603      	mov	r3, r0
 800508c:	73bb      	strb	r3, [r7, #14]
	char c;
	for(c = 0;c <= i;c++){
 800508e:	2300      	movs	r3, #0
 8005090:	73fb      	strb	r3, [r7, #15]
 8005092:	e009      	b.n	80050a8 <USART1_Printf+0x2c>
		USART1_SendChar(s[c]); // send character
 8005094:	7bfb      	ldrb	r3, [r7, #15]
 8005096:	687a      	ldr	r2, [r7, #4]
 8005098:	4413      	add	r3, r2
 800509a:	781b      	ldrb	r3, [r3, #0]
 800509c:	4618      	mov	r0, r3
 800509e:	f7ff ffcd 	bl	800503c <USART1_SendChar>

/************** functions printf *********************/
void USART1_Printf(char s[]){
	char i = strlen(s); // variable i == number length string
	char c;
	for(c = 0;c <= i;c++){
 80050a2:	7bfb      	ldrb	r3, [r7, #15]
 80050a4:	3301      	adds	r3, #1
 80050a6:	73fb      	strb	r3, [r7, #15]
 80050a8:	7bfa      	ldrb	r2, [r7, #15]
 80050aa:	7bbb      	ldrb	r3, [r7, #14]
 80050ac:	429a      	cmp	r2, r3
 80050ae:	d9f1      	bls.n	8005094 <USART1_Printf+0x18>
		USART1_SendChar(s[c]); // send character
	}
};
 80050b0:	bf00      	nop
 80050b2:	3710      	adds	r7, #16
 80050b4:	46bd      	mov	sp, r7
 80050b6:	bd80      	pop	{r7, pc}

080050b8 <SHT_ReadTemp>:

#include "sht2x.h"
#include "stm32f10x_i2c.h"

float SHT_ReadTemp(I2C_TypeDef* I2Cx)
{
 80050b8:	b590      	push	{r4, r7, lr}
 80050ba:	b085      	sub	sp, #20
 80050bc:	af00      	add	r7, sp, #0
 80050be:	6078      	str	r0, [r7, #4]
	unsigned char a = 121, b = 83, c = 0;
 80050c0:	2379      	movs	r3, #121	; 0x79
 80050c2:	73fb      	strb	r3, [r7, #15]
 80050c4:	2353      	movs	r3, #83	; 0x53
 80050c6:	73bb      	strb	r3, [r7, #14]
 80050c8:	2300      	movs	r3, #0
 80050ca:	737b      	strb	r3, [r7, #13]
	unsigned int all = 0;
 80050cc:	2300      	movs	r3, #0
 80050ce:	60bb      	str	r3, [r7, #8]

	while(I2C_GetFlagStatus(I2Cx, I2C_FLAG_BUSY));
 80050d0:	bf00      	nop
 80050d2:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 80050d6:	6878      	ldr	r0, [r7, #4]
 80050d8:	f000 fb58 	bl	800578c <I2C_GetFlagStatus>
 80050dc:	4603      	mov	r3, r0
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d1f7      	bne.n	80050d2 <SHT_ReadTemp+0x1a>
	I2C_AcknowledgeConfig(I2Cx, ENABLE); // enable acknowledge
 80050e2:	2101      	movs	r1, #1
 80050e4:	6878      	ldr	r0, [r7, #4]
 80050e6:	f000 faa5 	bl	8005634 <I2C_AcknowledgeConfig>

	I2C_GenerateSTART(I2Cx, ENABLE);
 80050ea:	2101      	movs	r1, #1
 80050ec:	6878      	ldr	r0, [r7, #4]
 80050ee:	f000 fa61 	bl	80055b4 <I2C_GenerateSTART>
	while(!I2C_GetFlagStatus(I2Cx, I2C_FLAG_SB));// wait generate start condition
 80050f2:	bf00      	nop
 80050f4:	4956      	ldr	r1, [pc, #344]	; (8005250 <SHT_ReadTemp+0x198>)
 80050f6:	6878      	ldr	r0, [r7, #4]
 80050f8:	f000 fb48 	bl	800578c <I2C_GetFlagStatus>
 80050fc:	4603      	mov	r3, r0
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d0f8      	beq.n	80050f4 <SHT_ReadTemp+0x3c>

	I2C_Send7bitAddress(I2Cx, 0x80, I2C_Direction_Transmitter); // send address sht2x
 8005102:	2200      	movs	r2, #0
 8005104:	2180      	movs	r1, #128	; 0x80
 8005106:	6878      	ldr	r0, [r7, #4]
 8005108:	f000 fad2 	bl	80056b0 <I2C_Send7bitAddress>
	while(!I2C_CheckEvent(I2Cx, I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED)); // waitsend address sht2x
 800510c:	bf00      	nop
 800510e:	4951      	ldr	r1, [pc, #324]	; (8005254 <SHT_ReadTemp+0x19c>)
 8005110:	6878      	ldr	r0, [r7, #4]
 8005112:	f000 fb0b 	bl	800572c <I2C_CheckEvent>
 8005116:	4603      	mov	r3, r0
 8005118:	2b00      	cmp	r3, #0
 800511a:	d0f8      	beq.n	800510e <SHT_ReadTemp+0x56>

	I2C_SendData(I2Cx, 0xE3); // send command Measurement temperature
 800511c:	21e3      	movs	r1, #227	; 0xe3
 800511e:	6878      	ldr	r0, [r7, #4]
 8005120:	f000 faa8 	bl	8005674 <I2C_SendData>
	while(!I2C_CheckEvent(I2Cx, I2C_EVENT_MASTER_BYTE_TRANSMITTED));// wait send command(data)
 8005124:	bf00      	nop
 8005126:	494c      	ldr	r1, [pc, #304]	; (8005258 <SHT_ReadTemp+0x1a0>)
 8005128:	6878      	ldr	r0, [r7, #4]
 800512a:	f000 faff 	bl	800572c <I2C_CheckEvent>
 800512e:	4603      	mov	r3, r0
 8005130:	2b00      	cmp	r3, #0
 8005132:	d0f8      	beq.n	8005126 <SHT_ReadTemp+0x6e>

	I2C_GenerateSTART(I2Cx, ENABLE);
 8005134:	2101      	movs	r1, #1
 8005136:	6878      	ldr	r0, [r7, #4]
 8005138:	f000 fa3c 	bl	80055b4 <I2C_GenerateSTART>
	while(!I2C_GetFlagStatus(I2Cx, I2C_FLAG_SB));// wait generate start condition
 800513c:	bf00      	nop
 800513e:	4944      	ldr	r1, [pc, #272]	; (8005250 <SHT_ReadTemp+0x198>)
 8005140:	6878      	ldr	r0, [r7, #4]
 8005142:	f000 fb23 	bl	800578c <I2C_GetFlagStatus>
 8005146:	4603      	mov	r3, r0
 8005148:	2b00      	cmp	r3, #0
 800514a:	d0f8      	beq.n	800513e <SHT_ReadTemp+0x86>

	I2C_Send7bitAddress(I2Cx, 0x80, I2C_Direction_Receiver);
 800514c:	2201      	movs	r2, #1
 800514e:	2180      	movs	r1, #128	; 0x80
 8005150:	6878      	ldr	r0, [r7, #4]
 8005152:	f000 faad 	bl	80056b0 <I2C_Send7bitAddress>
	while(!I2C_CheckEvent(I2Cx, I2C_EVENT_MASTER_RECEIVER_MODE_SELECTED)); // wait send address sht2x
 8005156:	bf00      	nop
 8005158:	4940      	ldr	r1, [pc, #256]	; (800525c <SHT_ReadTemp+0x1a4>)
 800515a:	6878      	ldr	r0, [r7, #4]
 800515c:	f000 fae6 	bl	800572c <I2C_CheckEvent>
 8005160:	4603      	mov	r3, r0
 8005162:	2b00      	cmp	r3, #0
 8005164:	d0f8      	beq.n	8005158 <SHT_ReadTemp+0xa0>

	while(!I2C_CheckEvent(I2Cx, I2C_EVENT_MASTER_BYTE_RECEIVED)); // check received data
 8005166:	bf00      	nop
 8005168:	493d      	ldr	r1, [pc, #244]	; (8005260 <SHT_ReadTemp+0x1a8>)
 800516a:	6878      	ldr	r0, [r7, #4]
 800516c:	f000 fade 	bl	800572c <I2C_CheckEvent>
 8005170:	4603      	mov	r3, r0
 8005172:	2b00      	cmp	r3, #0
 8005174:	d0f8      	beq.n	8005168 <SHT_ReadTemp+0xb0>
	a = I2C_ReceiveData(I2Cx);
 8005176:	6878      	ldr	r0, [r7, #4]
 8005178:	f000 fa8c 	bl	8005694 <I2C_ReceiveData>
 800517c:	4603      	mov	r3, r0
 800517e:	73fb      	strb	r3, [r7, #15]

	while(!I2C_CheckEvent(I2Cx, I2C_EVENT_MASTER_BYTE_RECEIVED)); // check received data
 8005180:	bf00      	nop
 8005182:	4937      	ldr	r1, [pc, #220]	; (8005260 <SHT_ReadTemp+0x1a8>)
 8005184:	6878      	ldr	r0, [r7, #4]
 8005186:	f000 fad1 	bl	800572c <I2C_CheckEvent>
 800518a:	4603      	mov	r3, r0
 800518c:	2b00      	cmp	r3, #0
 800518e:	d0f8      	beq.n	8005182 <SHT_ReadTemp+0xca>
	b = I2C_ReceiveData(I2Cx);
 8005190:	6878      	ldr	r0, [r7, #4]
 8005192:	f000 fa7f 	bl	8005694 <I2C_ReceiveData>
 8005196:	4603      	mov	r3, r0
 8005198:	73bb      	strb	r3, [r7, #14]

	while(!I2C_CheckEvent(I2Cx, I2C_EVENT_MASTER_BYTE_RECEIVED)); // check received data
 800519a:	bf00      	nop
 800519c:	4930      	ldr	r1, [pc, #192]	; (8005260 <SHT_ReadTemp+0x1a8>)
 800519e:	6878      	ldr	r0, [r7, #4]
 80051a0:	f000 fac4 	bl	800572c <I2C_CheckEvent>
 80051a4:	4603      	mov	r3, r0
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d0f8      	beq.n	800519c <SHT_ReadTemp+0xe4>
	c = I2C_ReceiveData(I2Cx);
 80051aa:	6878      	ldr	r0, [r7, #4]
 80051ac:	f000 fa72 	bl	8005694 <I2C_ReceiveData>
 80051b0:	4603      	mov	r3, r0
 80051b2:	737b      	strb	r3, [r7, #13]

	I2C_NACKPositionConfig(I2Cx, I2C_NACKPosition_Current); // send not acknowledge
 80051b4:	f24f 71ff 	movw	r1, #63487	; 0xf7ff
 80051b8:	6878      	ldr	r0, [r7, #4]
 80051ba:	f000 fa97 	bl	80056ec <I2C_NACKPositionConfig>
	I2C_AcknowledgeConfig(I2Cx, DISABLE);// disable acknowledge
 80051be:	2100      	movs	r1, #0
 80051c0:	6878      	ldr	r0, [r7, #4]
 80051c2:	f000 fa37 	bl	8005634 <I2C_AcknowledgeConfig>

	I2C_GenerateSTOP(I2Cx, ENABLE);
 80051c6:	2101      	movs	r1, #1
 80051c8:	6878      	ldr	r0, [r7, #4]
 80051ca:	f000 fa13 	bl	80055f4 <I2C_GenerateSTOP>
	while(I2C_GetFlagStatus(I2Cx, I2C_FLAG_STOPF)); // wait generate stop condition
 80051ce:	bf00      	nop
 80051d0:	4924      	ldr	r1, [pc, #144]	; (8005264 <SHT_ReadTemp+0x1ac>)
 80051d2:	6878      	ldr	r0, [r7, #4]
 80051d4:	f000 fada 	bl	800578c <I2C_GetFlagStatus>
 80051d8:	4603      	mov	r3, r0
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d1f8      	bne.n	80051d0 <SHT_ReadTemp+0x118>

	I2C_AcknowledgeConfig(I2Cx, ENABLE); // enable acknowledge
 80051de:	2101      	movs	r1, #1
 80051e0:	6878      	ldr	r0, [r7, #4]
 80051e2:	f000 fa27 	bl	8005634 <I2C_AcknowledgeConfig>

	all = (a << 8) + (b << 0);
 80051e6:	7bfb      	ldrb	r3, [r7, #15]
 80051e8:	021a      	lsls	r2, r3, #8
 80051ea:	7bbb      	ldrb	r3, [r7, #14]
 80051ec:	4413      	add	r3, r2
 80051ee:	60bb      	str	r3, [r7, #8]
	return ( -46.85 + (175.72 * ( (float)all / 65536) ) ); // calculate temperature
 80051f0:	68b8      	ldr	r0, [r7, #8]
 80051f2:	f7fb fd2d 	bl	8000c50 <__aeabi_ui2f>
 80051f6:	4603      	mov	r3, r0
 80051f8:	f04f 418f 	mov.w	r1, #1199570944	; 0x47800000
 80051fc:	4618      	mov	r0, r3
 80051fe:	f7fb fe33 	bl	8000e68 <__aeabi_fdiv>
 8005202:	4603      	mov	r3, r0
 8005204:	4618      	mov	r0, r3
 8005206:	f7fb f919 	bl	800043c <__aeabi_f2d>
 800520a:	a30d      	add	r3, pc, #52	; (adr r3, 8005240 <SHT_ReadTemp+0x188>)
 800520c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005210:	f7fb f968 	bl	80004e4 <__aeabi_dmul>
 8005214:	4603      	mov	r3, r0
 8005216:	460c      	mov	r4, r1
 8005218:	4618      	mov	r0, r3
 800521a:	4621      	mov	r1, r4
 800521c:	a30a      	add	r3, pc, #40	; (adr r3, 8005248 <SHT_ReadTemp+0x190>)
 800521e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005222:	f7fa ffab 	bl	800017c <__aeabi_dsub>
 8005226:	4603      	mov	r3, r0
 8005228:	460c      	mov	r4, r1
 800522a:	4618      	mov	r0, r3
 800522c:	4621      	mov	r1, r4
 800522e:	f7fb fc09 	bl	8000a44 <__aeabi_d2f>
 8005232:	4603      	mov	r3, r0
};
 8005234:	4618      	mov	r0, r3
 8005236:	3714      	adds	r7, #20
 8005238:	46bd      	mov	sp, r7
 800523a:	bd90      	pop	{r4, r7, pc}
 800523c:	f3af 8000 	nop.w
 8005240:	3d70a3d7 	.word	0x3d70a3d7
 8005244:	4065f70a 	.word	0x4065f70a
 8005248:	cccccccd 	.word	0xcccccccd
 800524c:	40476ccc 	.word	0x40476ccc
 8005250:	10000001 	.word	0x10000001
 8005254:	00070082 	.word	0x00070082
 8005258:	00070084 	.word	0x00070084
 800525c:	00030002 	.word	0x00030002
 8005260:	00030040 	.word	0x00030040
 8005264:	10000010 	.word	0x10000010

08005268 <SHT_ReadHumidity>:
float SHT_ReadHumidity(I2C_TypeDef* I2Cx)
{
 8005268:	b580      	push	{r7, lr}
 800526a:	b084      	sub	sp, #16
 800526c:	af00      	add	r7, sp, #0
 800526e:	6078      	str	r0, [r7, #4]
	unsigned char a = 0, b = 0, c = 0;
 8005270:	2300      	movs	r3, #0
 8005272:	73fb      	strb	r3, [r7, #15]
 8005274:	2300      	movs	r3, #0
 8005276:	73bb      	strb	r3, [r7, #14]
 8005278:	2300      	movs	r3, #0
 800527a:	737b      	strb	r3, [r7, #13]
	unsigned int all = 0;
 800527c:	2300      	movs	r3, #0
 800527e:	60bb      	str	r3, [r7, #8]

	while(I2C_GetFlagStatus(I2Cx, I2C_FLAG_BUSY));
 8005280:	bf00      	nop
 8005282:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 8005286:	6878      	ldr	r0, [r7, #4]
 8005288:	f000 fa80 	bl	800578c <I2C_GetFlagStatus>
 800528c:	4603      	mov	r3, r0
 800528e:	2b00      	cmp	r3, #0
 8005290:	d1f7      	bne.n	8005282 <SHT_ReadHumidity+0x1a>
	I2C_AcknowledgeConfig(I2Cx, ENABLE); // enable acknowledge
 8005292:	2101      	movs	r1, #1
 8005294:	6878      	ldr	r0, [r7, #4]
 8005296:	f000 f9cd 	bl	8005634 <I2C_AcknowledgeConfig>

	I2C_GenerateSTART(I2Cx, ENABLE);
 800529a:	2101      	movs	r1, #1
 800529c:	6878      	ldr	r0, [r7, #4]
 800529e:	f000 f989 	bl	80055b4 <I2C_GenerateSTART>
	while(!I2C_GetFlagStatus(I2Cx, I2C_FLAG_SB));// wait generate start condition
 80052a2:	bf00      	nop
 80052a4:	494a      	ldr	r1, [pc, #296]	; (80053d0 <SHT_ReadHumidity+0x168>)
 80052a6:	6878      	ldr	r0, [r7, #4]
 80052a8:	f000 fa70 	bl	800578c <I2C_GetFlagStatus>
 80052ac:	4603      	mov	r3, r0
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d0f8      	beq.n	80052a4 <SHT_ReadHumidity+0x3c>

	I2C_Send7bitAddress(I2Cx, 0x80, I2C_Direction_Transmitter); // send address sht2x
 80052b2:	2200      	movs	r2, #0
 80052b4:	2180      	movs	r1, #128	; 0x80
 80052b6:	6878      	ldr	r0, [r7, #4]
 80052b8:	f000 f9fa 	bl	80056b0 <I2C_Send7bitAddress>
	while(!I2C_CheckEvent(I2Cx, I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED)); // waitsend address sht2x
 80052bc:	bf00      	nop
 80052be:	4945      	ldr	r1, [pc, #276]	; (80053d4 <SHT_ReadHumidity+0x16c>)
 80052c0:	6878      	ldr	r0, [r7, #4]
 80052c2:	f000 fa33 	bl	800572c <I2C_CheckEvent>
 80052c6:	4603      	mov	r3, r0
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d0f8      	beq.n	80052be <SHT_ReadHumidity+0x56>

	I2C_SendData(I2Cx, 0xE5); // send command Measurement humidity
 80052cc:	21e5      	movs	r1, #229	; 0xe5
 80052ce:	6878      	ldr	r0, [r7, #4]
 80052d0:	f000 f9d0 	bl	8005674 <I2C_SendData>
	while(!I2C_CheckEvent(I2Cx, I2C_EVENT_MASTER_BYTE_TRANSMITTED));// wait send command(data)
 80052d4:	bf00      	nop
 80052d6:	4940      	ldr	r1, [pc, #256]	; (80053d8 <SHT_ReadHumidity+0x170>)
 80052d8:	6878      	ldr	r0, [r7, #4]
 80052da:	f000 fa27 	bl	800572c <I2C_CheckEvent>
 80052de:	4603      	mov	r3, r0
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d0f8      	beq.n	80052d6 <SHT_ReadHumidity+0x6e>

	I2C_GenerateSTART(I2Cx, ENABLE);
 80052e4:	2101      	movs	r1, #1
 80052e6:	6878      	ldr	r0, [r7, #4]
 80052e8:	f000 f964 	bl	80055b4 <I2C_GenerateSTART>
	while(!I2C_GetFlagStatus(I2Cx, I2C_FLAG_SB));// wait generate start condition
 80052ec:	bf00      	nop
 80052ee:	4938      	ldr	r1, [pc, #224]	; (80053d0 <SHT_ReadHumidity+0x168>)
 80052f0:	6878      	ldr	r0, [r7, #4]
 80052f2:	f000 fa4b 	bl	800578c <I2C_GetFlagStatus>
 80052f6:	4603      	mov	r3, r0
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d0f8      	beq.n	80052ee <SHT_ReadHumidity+0x86>

	I2C_Send7bitAddress(I2Cx, 0x80, I2C_Direction_Receiver);
 80052fc:	2201      	movs	r2, #1
 80052fe:	2180      	movs	r1, #128	; 0x80
 8005300:	6878      	ldr	r0, [r7, #4]
 8005302:	f000 f9d5 	bl	80056b0 <I2C_Send7bitAddress>
	while(!I2C_CheckEvent(I2Cx, I2C_EVENT_MASTER_RECEIVER_MODE_SELECTED)); // wait send address sht2x
 8005306:	bf00      	nop
 8005308:	4934      	ldr	r1, [pc, #208]	; (80053dc <SHT_ReadHumidity+0x174>)
 800530a:	6878      	ldr	r0, [r7, #4]
 800530c:	f000 fa0e 	bl	800572c <I2C_CheckEvent>
 8005310:	4603      	mov	r3, r0
 8005312:	2b00      	cmp	r3, #0
 8005314:	d0f8      	beq.n	8005308 <SHT_ReadHumidity+0xa0>

	while(!I2C_CheckEvent(I2Cx, I2C_EVENT_MASTER_BYTE_RECEIVED)); // check received data
 8005316:	bf00      	nop
 8005318:	4931      	ldr	r1, [pc, #196]	; (80053e0 <SHT_ReadHumidity+0x178>)
 800531a:	6878      	ldr	r0, [r7, #4]
 800531c:	f000 fa06 	bl	800572c <I2C_CheckEvent>
 8005320:	4603      	mov	r3, r0
 8005322:	2b00      	cmp	r3, #0
 8005324:	d0f8      	beq.n	8005318 <SHT_ReadHumidity+0xb0>
	a = I2C_ReceiveData(I2Cx);
 8005326:	6878      	ldr	r0, [r7, #4]
 8005328:	f000 f9b4 	bl	8005694 <I2C_ReceiveData>
 800532c:	4603      	mov	r3, r0
 800532e:	73fb      	strb	r3, [r7, #15]

	while(!I2C_CheckEvent(I2Cx, I2C_EVENT_MASTER_BYTE_RECEIVED)); // check received data
 8005330:	bf00      	nop
 8005332:	492b      	ldr	r1, [pc, #172]	; (80053e0 <SHT_ReadHumidity+0x178>)
 8005334:	6878      	ldr	r0, [r7, #4]
 8005336:	f000 f9f9 	bl	800572c <I2C_CheckEvent>
 800533a:	4603      	mov	r3, r0
 800533c:	2b00      	cmp	r3, #0
 800533e:	d0f8      	beq.n	8005332 <SHT_ReadHumidity+0xca>
	b = I2C_ReceiveData(I2Cx);
 8005340:	6878      	ldr	r0, [r7, #4]
 8005342:	f000 f9a7 	bl	8005694 <I2C_ReceiveData>
 8005346:	4603      	mov	r3, r0
 8005348:	73bb      	strb	r3, [r7, #14]

	while(!I2C_CheckEvent(I2Cx, I2C_EVENT_MASTER_BYTE_RECEIVED)); // check received data
 800534a:	bf00      	nop
 800534c:	4924      	ldr	r1, [pc, #144]	; (80053e0 <SHT_ReadHumidity+0x178>)
 800534e:	6878      	ldr	r0, [r7, #4]
 8005350:	f000 f9ec 	bl	800572c <I2C_CheckEvent>
 8005354:	4603      	mov	r3, r0
 8005356:	2b00      	cmp	r3, #0
 8005358:	d0f8      	beq.n	800534c <SHT_ReadHumidity+0xe4>
	c = I2C_ReceiveData(I2Cx);
 800535a:	6878      	ldr	r0, [r7, #4]
 800535c:	f000 f99a 	bl	8005694 <I2C_ReceiveData>
 8005360:	4603      	mov	r3, r0
 8005362:	737b      	strb	r3, [r7, #13]

	I2C_NACKPositionConfig(I2Cx, I2C_NACKPosition_Current); // send not acknowledge
 8005364:	f24f 71ff 	movw	r1, #63487	; 0xf7ff
 8005368:	6878      	ldr	r0, [r7, #4]
 800536a:	f000 f9bf 	bl	80056ec <I2C_NACKPositionConfig>
	I2C_AcknowledgeConfig(I2Cx, DISABLE);// disable acknowledge
 800536e:	2100      	movs	r1, #0
 8005370:	6878      	ldr	r0, [r7, #4]
 8005372:	f000 f95f 	bl	8005634 <I2C_AcknowledgeConfig>

	I2C_GenerateSTOP(I2Cx, ENABLE);
 8005376:	2101      	movs	r1, #1
 8005378:	6878      	ldr	r0, [r7, #4]
 800537a:	f000 f93b 	bl	80055f4 <I2C_GenerateSTOP>
	while(I2C_GetFlagStatus(I2Cx, I2C_FLAG_STOPF)); // wait generate stop condition
 800537e:	bf00      	nop
 8005380:	4918      	ldr	r1, [pc, #96]	; (80053e4 <SHT_ReadHumidity+0x17c>)
 8005382:	6878      	ldr	r0, [r7, #4]
 8005384:	f000 fa02 	bl	800578c <I2C_GetFlagStatus>
 8005388:	4603      	mov	r3, r0
 800538a:	2b00      	cmp	r3, #0
 800538c:	d1f8      	bne.n	8005380 <SHT_ReadHumidity+0x118>

	I2C_AcknowledgeConfig(I2Cx, ENABLE); // enable acknowledge
 800538e:	2101      	movs	r1, #1
 8005390:	6878      	ldr	r0, [r7, #4]
 8005392:	f000 f94f 	bl	8005634 <I2C_AcknowledgeConfig>

	all = (a << 8) + (b << 0);
 8005396:	7bfb      	ldrb	r3, [r7, #15]
 8005398:	021a      	lsls	r2, r3, #8
 800539a:	7bbb      	ldrb	r3, [r7, #14]
 800539c:	4413      	add	r3, r2
 800539e:	60bb      	str	r3, [r7, #8]
	return ( (float)-6 + ( (float)125 * ( (float)all / 65536) ) ); // calculate humidity
 80053a0:	68b8      	ldr	r0, [r7, #8]
 80053a2:	f7fb fc55 	bl	8000c50 <__aeabi_ui2f>
 80053a6:	4603      	mov	r3, r0
 80053a8:	f04f 418f 	mov.w	r1, #1199570944	; 0x47800000
 80053ac:	4618      	mov	r0, r3
 80053ae:	f7fb fd5b 	bl	8000e68 <__aeabi_fdiv>
 80053b2:	4603      	mov	r3, r0
 80053b4:	490c      	ldr	r1, [pc, #48]	; (80053e8 <SHT_ReadHumidity+0x180>)
 80053b6:	4618      	mov	r0, r3
 80053b8:	f7fb fca2 	bl	8000d00 <__aeabi_fmul>
 80053bc:	4603      	mov	r3, r0
 80053be:	490b      	ldr	r1, [pc, #44]	; (80053ec <SHT_ReadHumidity+0x184>)
 80053c0:	4618      	mov	r0, r3
 80053c2:	f7fb fb93 	bl	8000aec <__aeabi_fsub>
 80053c6:	4603      	mov	r3, r0

};
 80053c8:	4618      	mov	r0, r3
 80053ca:	3710      	adds	r7, #16
 80053cc:	46bd      	mov	sp, r7
 80053ce:	bd80      	pop	{r7, pc}
 80053d0:	10000001 	.word	0x10000001
 80053d4:	00070082 	.word	0x00070082
 80053d8:	00070084 	.word	0x00070084
 80053dc:	00030002 	.word	0x00030002
 80053e0:	00030040 	.word	0x00030040
 80053e4:	10000010 	.word	0x10000010
 80053e8:	42fa0000 	.word	0x42fa0000
 80053ec:	40c00000 	.word	0x40c00000

080053f0 <I2C_Init>:
  * @param  I2C_InitStruct: pointer to a I2C_InitTypeDef structure that
  *   contains the configuration information for the specified I2C peripheral.
  * @retval None
  */
void I2C_Init(I2C_TypeDef* I2Cx, I2C_InitTypeDef* I2C_InitStruct)
{
 80053f0:	b580      	push	{r7, lr}
 80053f2:	b08a      	sub	sp, #40	; 0x28
 80053f4:	af00      	add	r7, sp, #0
 80053f6:	6078      	str	r0, [r7, #4]
 80053f8:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0, freqrange = 0;
 80053fa:	2300      	movs	r3, #0
 80053fc:	84fb      	strh	r3, [r7, #38]	; 0x26
 80053fe:	2300      	movs	r3, #0
 8005400:	847b      	strh	r3, [r7, #34]	; 0x22
  uint16_t result = 0x04;
 8005402:	2304      	movs	r3, #4
 8005404:	84bb      	strh	r3, [r7, #36]	; 0x24
  uint32_t pclk1 = 8000000;
 8005406:	4b57      	ldr	r3, [pc, #348]	; (8005564 <I2C_Init+0x174>)
 8005408:	61fb      	str	r3, [r7, #28]
  assert_param(IS_I2C_ACK_STATE(I2C_InitStruct->I2C_Ack));
  assert_param(IS_I2C_ACKNOWLEDGE_ADDRESS(I2C_InitStruct->I2C_AcknowledgedAddress));

/*---------------------------- I2Cx CR2 Configuration ------------------------*/
  /* Get the I2Cx CR2 value */
  tmpreg = I2Cx->CR2;
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	889b      	ldrh	r3, [r3, #4]
 800540e:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Clear frequency FREQ[5:0] bits */
  tmpreg &= CR2_FREQ_Reset;
 8005410:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005412:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8005416:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Get pclk1 frequency value */
  RCC_GetClocksFreq(&rcc_clocks);
 8005418:	f107 0308 	add.w	r3, r7, #8
 800541c:	4618      	mov	r0, r3
 800541e:	f000 f9e7 	bl	80057f0 <RCC_GetClocksFreq>
  pclk1 = rcc_clocks.PCLK1_Frequency;
 8005422:	693b      	ldr	r3, [r7, #16]
 8005424:	61fb      	str	r3, [r7, #28]
  /* Set frequency bits depending on pclk1 value */
  freqrange = (uint16_t)(pclk1 / 1000000);
 8005426:	69fb      	ldr	r3, [r7, #28]
 8005428:	4a4f      	ldr	r2, [pc, #316]	; (8005568 <I2C_Init+0x178>)
 800542a:	fba2 2303 	umull	r2, r3, r2, r3
 800542e:	0c9b      	lsrs	r3, r3, #18
 8005430:	847b      	strh	r3, [r7, #34]	; 0x22
  tmpreg |= freqrange;
 8005432:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8005434:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005436:	4313      	orrs	r3, r2
 8005438:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Write to I2Cx CR2 */
  I2Cx->CR2 = tmpreg;
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800543e:	809a      	strh	r2, [r3, #4]

/*---------------------------- I2Cx CCR Configuration ------------------------*/
  /* Disable the selected I2C peripheral to configure TRISE */
  I2Cx->CR1 &= CR1_PE_Reset;
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	881b      	ldrh	r3, [r3, #0]
 8005444:	b29b      	uxth	r3, r3
 8005446:	f023 0301 	bic.w	r3, r3, #1
 800544a:	b29a      	uxth	r2, r3
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	801a      	strh	r2, [r3, #0]
  /* Reset tmpreg value */
  /* Clear F/S, DUTY and CCR[11:0] bits */
  tmpreg = 0;
 8005450:	2300      	movs	r3, #0
 8005452:	84fb      	strh	r3, [r7, #38]	; 0x26

  /* Configure speed in standard mode */
  if (I2C_InitStruct->I2C_ClockSpeed <= 100000)
 8005454:	683b      	ldr	r3, [r7, #0]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	4a44      	ldr	r2, [pc, #272]	; (800556c <I2C_Init+0x17c>)
 800545a:	4293      	cmp	r3, r2
 800545c:	d815      	bhi.n	800548a <I2C_Init+0x9a>
  {
    /* Standard mode speed calculate */
    result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed << 1));
 800545e:	683b      	ldr	r3, [r7, #0]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	005b      	lsls	r3, r3, #1
 8005464:	69fa      	ldr	r2, [r7, #28]
 8005466:	fbb2 f3f3 	udiv	r3, r2, r3
 800546a:	84bb      	strh	r3, [r7, #36]	; 0x24
    /* Test if CCR value is under 0x4*/
    if (result < 0x04)
 800546c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800546e:	2b03      	cmp	r3, #3
 8005470:	d801      	bhi.n	8005476 <I2C_Init+0x86>
    {
      /* Set minimum allowed value */
      result = 0x04;  
 8005472:	2304      	movs	r3, #4
 8005474:	84bb      	strh	r3, [r7, #36]	; 0x24
    }
    /* Set speed value for standard mode */
    tmpreg |= result;	  
 8005476:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8005478:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800547a:	4313      	orrs	r3, r2
 800547c:	84fb      	strh	r3, [r7, #38]	; 0x26
    /* Set Maximum Rise Time for standard mode */
    I2Cx->TRISE = freqrange + 1; 
 800547e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005480:	3301      	adds	r3, #1
 8005482:	b29a      	uxth	r2, r3
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	841a      	strh	r2, [r3, #32]
 8005488:	e040      	b.n	800550c <I2C_Init+0x11c>
  }
  /* Configure speed in fast mode */
  else /*(I2C_InitStruct->I2C_ClockSpeed <= 400000)*/
  {
    if (I2C_InitStruct->I2C_DutyCycle == I2C_DutyCycle_2)
 800548a:	683b      	ldr	r3, [r7, #0]
 800548c:	88db      	ldrh	r3, [r3, #6]
 800548e:	f64b 72ff 	movw	r2, #49151	; 0xbfff
 8005492:	4293      	cmp	r3, r2
 8005494:	d109      	bne.n	80054aa <I2C_Init+0xba>
    {
      /* Fast mode speed calculate: Tlow/Thigh = 2 */
      result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed * 3));
 8005496:	683b      	ldr	r3, [r7, #0]
 8005498:	681a      	ldr	r2, [r3, #0]
 800549a:	4613      	mov	r3, r2
 800549c:	005b      	lsls	r3, r3, #1
 800549e:	4413      	add	r3, r2
 80054a0:	69fa      	ldr	r2, [r7, #28]
 80054a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80054a6:	84bb      	strh	r3, [r7, #36]	; 0x24
 80054a8:	e00e      	b.n	80054c8 <I2C_Init+0xd8>
    }
    else /*I2C_InitStruct->I2C_DutyCycle == I2C_DutyCycle_16_9*/
    {
      /* Fast mode speed calculate: Tlow/Thigh = 16/9 */
      result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed * 25));
 80054aa:	683b      	ldr	r3, [r7, #0]
 80054ac:	681a      	ldr	r2, [r3, #0]
 80054ae:	4613      	mov	r3, r2
 80054b0:	009b      	lsls	r3, r3, #2
 80054b2:	4413      	add	r3, r2
 80054b4:	009a      	lsls	r2, r3, #2
 80054b6:	4413      	add	r3, r2
 80054b8:	69fa      	ldr	r2, [r7, #28]
 80054ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80054be:	84bb      	strh	r3, [r7, #36]	; 0x24
      /* Set DUTY bit */
      result |= I2C_DutyCycle_16_9;
 80054c0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80054c2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80054c6:	84bb      	strh	r3, [r7, #36]	; 0x24
    }

    /* Test if CCR value is under 0x1*/
    if ((result & CCR_CCR_Set) == 0)
 80054c8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80054ca:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d103      	bne.n	80054da <I2C_Init+0xea>
    {
      /* Set minimum allowed value */
      result |= (uint16_t)0x0001;  
 80054d2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80054d4:	f043 0301 	orr.w	r3, r3, #1
 80054d8:	84bb      	strh	r3, [r7, #36]	; 0x24
    }
    /* Set speed value and set F/S bit for fast mode */
    tmpreg |= (uint16_t)(result | CCR_FS_Set);
 80054da:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80054dc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80054de:	4313      	orrs	r3, r2
 80054e0:	b29b      	uxth	r3, r3
 80054e2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80054e6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80054ea:	84fb      	strh	r3, [r7, #38]	; 0x26
    /* Set Maximum Rise Time for fast mode */
    I2Cx->TRISE = (uint16_t)(((freqrange * (uint16_t)300) / (uint16_t)1000) + (uint16_t)1);  
 80054ec:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80054ee:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80054f2:	fb02 f303 	mul.w	r3, r2, r3
 80054f6:	4a1e      	ldr	r2, [pc, #120]	; (8005570 <I2C_Init+0x180>)
 80054f8:	fb82 1203 	smull	r1, r2, r2, r3
 80054fc:	1192      	asrs	r2, r2, #6
 80054fe:	17db      	asrs	r3, r3, #31
 8005500:	1ad3      	subs	r3, r2, r3
 8005502:	b29b      	uxth	r3, r3
 8005504:	3301      	adds	r3, #1
 8005506:	b29a      	uxth	r2, r3
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	841a      	strh	r2, [r3, #32]
  }

  /* Write to I2Cx CCR */
  I2Cx->CCR = tmpreg;
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8005510:	839a      	strh	r2, [r3, #28]
  /* Enable the selected I2C peripheral */
  I2Cx->CR1 |= CR1_PE_Set;
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	881b      	ldrh	r3, [r3, #0]
 8005516:	b29b      	uxth	r3, r3
 8005518:	f043 0301 	orr.w	r3, r3, #1
 800551c:	b29a      	uxth	r2, r3
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	801a      	strh	r2, [r3, #0]

/*---------------------------- I2Cx CR1 Configuration ------------------------*/
  /* Get the I2Cx CR1 value */
  tmpreg = I2Cx->CR1;
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	881b      	ldrh	r3, [r3, #0]
 8005526:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Clear ACK, SMBTYPE and  SMBUS bits */
  tmpreg &= CR1_CLEAR_Mask;
 8005528:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800552a:	f423 6381 	bic.w	r3, r3, #1032	; 0x408
 800552e:	f023 0302 	bic.w	r3, r3, #2
 8005532:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Configure I2Cx: mode and acknowledgement */
  /* Set SMBTYPE and SMBUS bits according to I2C_Mode value */
  /* Set ACK bit according to I2C_Ack value */
  tmpreg |= (uint16_t)((uint32_t)I2C_InitStruct->I2C_Mode | I2C_InitStruct->I2C_Ack);
 8005534:	683b      	ldr	r3, [r7, #0]
 8005536:	889a      	ldrh	r2, [r3, #4]
 8005538:	683b      	ldr	r3, [r7, #0]
 800553a:	895b      	ldrh	r3, [r3, #10]
 800553c:	4313      	orrs	r3, r2
 800553e:	b29a      	uxth	r2, r3
 8005540:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005542:	4313      	orrs	r3, r2
 8005544:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Write to I2Cx CR1 */
  I2Cx->CR1 = tmpreg;
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800554a:	801a      	strh	r2, [r3, #0]

/*---------------------------- I2Cx OAR1 Configuration -----------------------*/
  /* Set I2Cx Own Address1 and acknowledged address */
  I2Cx->OAR1 = (I2C_InitStruct->I2C_AcknowledgedAddress | I2C_InitStruct->I2C_OwnAddress1);
 800554c:	683b      	ldr	r3, [r7, #0]
 800554e:	899a      	ldrh	r2, [r3, #12]
 8005550:	683b      	ldr	r3, [r7, #0]
 8005552:	891b      	ldrh	r3, [r3, #8]
 8005554:	4313      	orrs	r3, r2
 8005556:	b29a      	uxth	r2, r3
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	811a      	strh	r2, [r3, #8]
}
 800555c:	bf00      	nop
 800555e:	3728      	adds	r7, #40	; 0x28
 8005560:	46bd      	mov	sp, r7
 8005562:	bd80      	pop	{r7, pc}
 8005564:	007a1200 	.word	0x007a1200
 8005568:	431bde83 	.word	0x431bde83
 800556c:	000186a0 	.word	0x000186a0
 8005570:	10624dd3 	.word	0x10624dd3

08005574 <I2C_Cmd>:
  * @param  NewState: new state of the I2Cx peripheral. 
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void I2C_Cmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 8005574:	b480      	push	{r7}
 8005576:	b083      	sub	sp, #12
 8005578:	af00      	add	r7, sp, #0
 800557a:	6078      	str	r0, [r7, #4]
 800557c:	460b      	mov	r3, r1
 800557e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8005580:	78fb      	ldrb	r3, [r7, #3]
 8005582:	2b00      	cmp	r3, #0
 8005584:	d008      	beq.n	8005598 <I2C_Cmd+0x24>
  {
    /* Enable the selected I2C peripheral */
    I2Cx->CR1 |= CR1_PE_Set;
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	881b      	ldrh	r3, [r3, #0]
 800558a:	b29b      	uxth	r3, r3
 800558c:	f043 0301 	orr.w	r3, r3, #1
 8005590:	b29a      	uxth	r2, r3
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the selected I2C peripheral */
    I2Cx->CR1 &= CR1_PE_Reset;
  }
}
 8005596:	e007      	b.n	80055a8 <I2C_Cmd+0x34>
    I2Cx->CR1 |= CR1_PE_Set;
  }
  else
  {
    /* Disable the selected I2C peripheral */
    I2Cx->CR1 &= CR1_PE_Reset;
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	881b      	ldrh	r3, [r3, #0]
 800559c:	b29b      	uxth	r3, r3
 800559e:	f023 0301 	bic.w	r3, r3, #1
 80055a2:	b29a      	uxth	r2, r3
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	801a      	strh	r2, [r3, #0]
  }
}
 80055a8:	bf00      	nop
 80055aa:	370c      	adds	r7, #12
 80055ac:	46bd      	mov	sp, r7
 80055ae:	bc80      	pop	{r7}
 80055b0:	4770      	bx	lr
 80055b2:	bf00      	nop

080055b4 <I2C_GenerateSTART>:
  * @param  NewState: new state of the I2C START condition generation.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None.
  */
void I2C_GenerateSTART(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 80055b4:	b480      	push	{r7}
 80055b6:	b083      	sub	sp, #12
 80055b8:	af00      	add	r7, sp, #0
 80055ba:	6078      	str	r0, [r7, #4]
 80055bc:	460b      	mov	r3, r1
 80055be:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80055c0:	78fb      	ldrb	r3, [r7, #3]
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d008      	beq.n	80055d8 <I2C_GenerateSTART+0x24>
  {
    /* Generate a START condition */
    I2Cx->CR1 |= CR1_START_Set;
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	881b      	ldrh	r3, [r3, #0]
 80055ca:	b29b      	uxth	r3, r3
 80055cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80055d0:	b29a      	uxth	r2, r3
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the START condition generation */
    I2Cx->CR1 &= CR1_START_Reset;
  }
}
 80055d6:	e007      	b.n	80055e8 <I2C_GenerateSTART+0x34>
    I2Cx->CR1 |= CR1_START_Set;
  }
  else
  {
    /* Disable the START condition generation */
    I2Cx->CR1 &= CR1_START_Reset;
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	881b      	ldrh	r3, [r3, #0]
 80055dc:	b29b      	uxth	r3, r3
 80055de:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80055e2:	b29a      	uxth	r2, r3
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	801a      	strh	r2, [r3, #0]
  }
}
 80055e8:	bf00      	nop
 80055ea:	370c      	adds	r7, #12
 80055ec:	46bd      	mov	sp, r7
 80055ee:	bc80      	pop	{r7}
 80055f0:	4770      	bx	lr
 80055f2:	bf00      	nop

080055f4 <I2C_GenerateSTOP>:
  * @param  NewState: new state of the I2C STOP condition generation.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None.
  */
void I2C_GenerateSTOP(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 80055f4:	b480      	push	{r7}
 80055f6:	b083      	sub	sp, #12
 80055f8:	af00      	add	r7, sp, #0
 80055fa:	6078      	str	r0, [r7, #4]
 80055fc:	460b      	mov	r3, r1
 80055fe:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8005600:	78fb      	ldrb	r3, [r7, #3]
 8005602:	2b00      	cmp	r3, #0
 8005604:	d008      	beq.n	8005618 <I2C_GenerateSTOP+0x24>
  {
    /* Generate a STOP condition */
    I2Cx->CR1 |= CR1_STOP_Set;
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	881b      	ldrh	r3, [r3, #0]
 800560a:	b29b      	uxth	r3, r3
 800560c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005610:	b29a      	uxth	r2, r3
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the STOP condition generation */
    I2Cx->CR1 &= CR1_STOP_Reset;
  }
}
 8005616:	e007      	b.n	8005628 <I2C_GenerateSTOP+0x34>
    I2Cx->CR1 |= CR1_STOP_Set;
  }
  else
  {
    /* Disable the STOP condition generation */
    I2Cx->CR1 &= CR1_STOP_Reset;
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	881b      	ldrh	r3, [r3, #0]
 800561c:	b29b      	uxth	r3, r3
 800561e:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005622:	b29a      	uxth	r2, r3
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	801a      	strh	r2, [r3, #0]
  }
}
 8005628:	bf00      	nop
 800562a:	370c      	adds	r7, #12
 800562c:	46bd      	mov	sp, r7
 800562e:	bc80      	pop	{r7}
 8005630:	4770      	bx	lr
 8005632:	bf00      	nop

08005634 <I2C_AcknowledgeConfig>:
  * @param  NewState: new state of the I2C Acknowledgement.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None.
  */
void I2C_AcknowledgeConfig(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 8005634:	b480      	push	{r7}
 8005636:	b083      	sub	sp, #12
 8005638:	af00      	add	r7, sp, #0
 800563a:	6078      	str	r0, [r7, #4]
 800563c:	460b      	mov	r3, r1
 800563e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8005640:	78fb      	ldrb	r3, [r7, #3]
 8005642:	2b00      	cmp	r3, #0
 8005644:	d008      	beq.n	8005658 <I2C_AcknowledgeConfig+0x24>
  {
    /* Enable the acknowledgement */
    I2Cx->CR1 |= CR1_ACK_Set;
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	881b      	ldrh	r3, [r3, #0]
 800564a:	b29b      	uxth	r3, r3
 800564c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005650:	b29a      	uxth	r2, r3
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the acknowledgement */
    I2Cx->CR1 &= CR1_ACK_Reset;
  }
}
 8005656:	e007      	b.n	8005668 <I2C_AcknowledgeConfig+0x34>
    I2Cx->CR1 |= CR1_ACK_Set;
  }
  else
  {
    /* Disable the acknowledgement */
    I2Cx->CR1 &= CR1_ACK_Reset;
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	881b      	ldrh	r3, [r3, #0]
 800565c:	b29b      	uxth	r3, r3
 800565e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005662:	b29a      	uxth	r2, r3
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	801a      	strh	r2, [r3, #0]
  }
}
 8005668:	bf00      	nop
 800566a:	370c      	adds	r7, #12
 800566c:	46bd      	mov	sp, r7
 800566e:	bc80      	pop	{r7}
 8005670:	4770      	bx	lr
 8005672:	bf00      	nop

08005674 <I2C_SendData>:
  * @param  I2Cx: where x can be 1 or 2 to select the I2C peripheral.
  * @param  Data: Byte to be transmitted..
  * @retval None
  */
void I2C_SendData(I2C_TypeDef* I2Cx, uint8_t Data)
{
 8005674:	b480      	push	{r7}
 8005676:	b083      	sub	sp, #12
 8005678:	af00      	add	r7, sp, #0
 800567a:	6078      	str	r0, [r7, #4]
 800567c:	460b      	mov	r3, r1
 800567e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  /* Write in the DR register the data to be sent */
  I2Cx->DR = Data;
 8005680:	78fb      	ldrb	r3, [r7, #3]
 8005682:	b29a      	uxth	r2, r3
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	821a      	strh	r2, [r3, #16]
}
 8005688:	bf00      	nop
 800568a:	370c      	adds	r7, #12
 800568c:	46bd      	mov	sp, r7
 800568e:	bc80      	pop	{r7}
 8005690:	4770      	bx	lr
 8005692:	bf00      	nop

08005694 <I2C_ReceiveData>:
  * @brief  Returns the most recent received data by the I2Cx peripheral.
  * @param  I2Cx: where x can be 1 or 2 to select the I2C peripheral.
  * @retval The value of the received data.
  */
uint8_t I2C_ReceiveData(I2C_TypeDef* I2Cx)
{
 8005694:	b480      	push	{r7}
 8005696:	b083      	sub	sp, #12
 8005698:	af00      	add	r7, sp, #0
 800569a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  /* Return the data in the DR register */
  return (uint8_t)I2Cx->DR;
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	8a1b      	ldrh	r3, [r3, #16]
 80056a0:	b29b      	uxth	r3, r3
 80056a2:	b2db      	uxtb	r3, r3
}
 80056a4:	4618      	mov	r0, r3
 80056a6:	370c      	adds	r7, #12
 80056a8:	46bd      	mov	sp, r7
 80056aa:	bc80      	pop	{r7}
 80056ac:	4770      	bx	lr
 80056ae:	bf00      	nop

080056b0 <I2C_Send7bitAddress>:
  *     @arg I2C_Direction_Transmitter: Transmitter mode
  *     @arg I2C_Direction_Receiver: Receiver mode
  * @retval None.
  */
void I2C_Send7bitAddress(I2C_TypeDef* I2Cx, uint8_t Address, uint8_t I2C_Direction)
{
 80056b0:	b480      	push	{r7}
 80056b2:	b083      	sub	sp, #12
 80056b4:	af00      	add	r7, sp, #0
 80056b6:	6078      	str	r0, [r7, #4]
 80056b8:	460b      	mov	r3, r1
 80056ba:	70fb      	strb	r3, [r7, #3]
 80056bc:	4613      	mov	r3, r2
 80056be:	70bb      	strb	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_DIRECTION(I2C_Direction));
  /* Test on the direction to set/reset the read/write bit */
  if (I2C_Direction != I2C_Direction_Transmitter)
 80056c0:	78bb      	ldrb	r3, [r7, #2]
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d004      	beq.n	80056d0 <I2C_Send7bitAddress+0x20>
  {
    /* Set the address bit0 for read */
    Address |= OAR1_ADD0_Set;
 80056c6:	78fb      	ldrb	r3, [r7, #3]
 80056c8:	f043 0301 	orr.w	r3, r3, #1
 80056cc:	70fb      	strb	r3, [r7, #3]
 80056ce:	e003      	b.n	80056d8 <I2C_Send7bitAddress+0x28>
  }
  else
  {
    /* Reset the address bit0 for write */
    Address &= OAR1_ADD0_Reset;
 80056d0:	78fb      	ldrb	r3, [r7, #3]
 80056d2:	f023 0301 	bic.w	r3, r3, #1
 80056d6:	70fb      	strb	r3, [r7, #3]
  }
  /* Send the address */
  I2Cx->DR = Address;
 80056d8:	78fb      	ldrb	r3, [r7, #3]
 80056da:	b29a      	uxth	r2, r3
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	821a      	strh	r2, [r3, #16]
}
 80056e0:	bf00      	nop
 80056e2:	370c      	adds	r7, #12
 80056e4:	46bd      	mov	sp, r7
 80056e6:	bc80      	pop	{r7}
 80056e8:	4770      	bx	lr
 80056ea:	bf00      	nop

080056ec <I2C_NACKPositionConfig>:
  *          is intended to used in SMBUS mode. 
  *            
  * @retval None
  */
void I2C_NACKPositionConfig(I2C_TypeDef* I2Cx, uint16_t I2C_NACKPosition)
{
 80056ec:	b480      	push	{r7}
 80056ee:	b083      	sub	sp, #12
 80056f0:	af00      	add	r7, sp, #0
 80056f2:	6078      	str	r0, [r7, #4]
 80056f4:	460b      	mov	r3, r1
 80056f6:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_NACK_POSITION(I2C_NACKPosition));
  
  /* Check the input parameter */
  if (I2C_NACKPosition == I2C_NACKPosition_Next)
 80056f8:	887b      	ldrh	r3, [r7, #2]
 80056fa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80056fe:	d108      	bne.n	8005712 <I2C_NACKPositionConfig+0x26>
  {
    /* Next byte in shift register is the last received byte */
    I2Cx->CR1 |= I2C_NACKPosition_Next;
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	881b      	ldrh	r3, [r3, #0]
 8005704:	b29b      	uxth	r3, r3
 8005706:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800570a:	b29a      	uxth	r2, r3
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Current byte in shift register is the last received byte */
    I2Cx->CR1 &= I2C_NACKPosition_Current;
  }
}
 8005710:	e007      	b.n	8005722 <I2C_NACKPositionConfig+0x36>
    I2Cx->CR1 |= I2C_NACKPosition_Next;
  }
  else
  {
    /* Current byte in shift register is the last received byte */
    I2Cx->CR1 &= I2C_NACKPosition_Current;
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	881b      	ldrh	r3, [r3, #0]
 8005716:	b29b      	uxth	r3, r3
 8005718:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800571c:	b29a      	uxth	r2, r3
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	801a      	strh	r2, [r3, #0]
  }
}
 8005722:	bf00      	nop
 8005724:	370c      	adds	r7, #12
 8005726:	46bd      	mov	sp, r7
 8005728:	bc80      	pop	{r7}
 800572a:	4770      	bx	lr

0800572c <I2C_CheckEvent>:
  * @retval An ErrorStatus enumeration value:
  * - SUCCESS: Last event is equal to the I2C_EVENT
  * - ERROR: Last event is different from the I2C_EVENT
  */
ErrorStatus I2C_CheckEvent(I2C_TypeDef* I2Cx, uint32_t I2C_EVENT)
{
 800572c:	b480      	push	{r7}
 800572e:	b087      	sub	sp, #28
 8005730:	af00      	add	r7, sp, #0
 8005732:	6078      	str	r0, [r7, #4]
 8005734:	6039      	str	r1, [r7, #0]
  uint32_t lastevent = 0;
 8005736:	2300      	movs	r3, #0
 8005738:	613b      	str	r3, [r7, #16]
  uint32_t flag1 = 0, flag2 = 0;
 800573a:	2300      	movs	r3, #0
 800573c:	60fb      	str	r3, [r7, #12]
 800573e:	2300      	movs	r3, #0
 8005740:	60bb      	str	r3, [r7, #8]
  ErrorStatus status = ERROR;
 8005742:	2300      	movs	r3, #0
 8005744:	75fb      	strb	r3, [r7, #23]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_EVENT(I2C_EVENT));

  /* Read the I2Cx status register */
  flag1 = I2Cx->SR1;
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	8a9b      	ldrh	r3, [r3, #20]
 800574a:	b29b      	uxth	r3, r3
 800574c:	60fb      	str	r3, [r7, #12]
  flag2 = I2Cx->SR2;
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	8b1b      	ldrh	r3, [r3, #24]
 8005752:	b29b      	uxth	r3, r3
 8005754:	60bb      	str	r3, [r7, #8]
  flag2 = flag2 << 16;
 8005756:	68bb      	ldr	r3, [r7, #8]
 8005758:	041b      	lsls	r3, r3, #16
 800575a:	60bb      	str	r3, [r7, #8]

  /* Get the last event value from I2C status register */
  lastevent = (flag1 | flag2) & FLAG_Mask;
 800575c:	68fa      	ldr	r2, [r7, #12]
 800575e:	68bb      	ldr	r3, [r7, #8]
 8005760:	4313      	orrs	r3, r2
 8005762:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8005766:	613b      	str	r3, [r7, #16]

  /* Check whether the last event contains the I2C_EVENT */
  if ((lastevent & I2C_EVENT) == I2C_EVENT)
 8005768:	693a      	ldr	r2, [r7, #16]
 800576a:	683b      	ldr	r3, [r7, #0]
 800576c:	401a      	ands	r2, r3
 800576e:	683b      	ldr	r3, [r7, #0]
 8005770:	429a      	cmp	r2, r3
 8005772:	d102      	bne.n	800577a <I2C_CheckEvent+0x4e>
  {
    /* SUCCESS: last event is equal to I2C_EVENT */
    status = SUCCESS;
 8005774:	2301      	movs	r3, #1
 8005776:	75fb      	strb	r3, [r7, #23]
 8005778:	e001      	b.n	800577e <I2C_CheckEvent+0x52>
  }
  else
  {
    /* ERROR: last event is different from I2C_EVENT */
    status = ERROR;
 800577a:	2300      	movs	r3, #0
 800577c:	75fb      	strb	r3, [r7, #23]
  }
  /* Return status */
  return status;
 800577e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005780:	4618      	mov	r0, r3
 8005782:	371c      	adds	r7, #28
 8005784:	46bd      	mov	sp, r7
 8005786:	bc80      	pop	{r7}
 8005788:	4770      	bx	lr
 800578a:	bf00      	nop

0800578c <I2C_GetFlagStatus>:
  *   Address matched flag (Slave mode)"ENDA"
  *     @arg I2C_FLAG_SB: Start bit flag (Master mode)
  * @retval The new state of I2C_FLAG (SET or RESET).
  */
FlagStatus I2C_GetFlagStatus(I2C_TypeDef* I2Cx, uint32_t I2C_FLAG)
{
 800578c:	b480      	push	{r7}
 800578e:	b087      	sub	sp, #28
 8005790:	af00      	add	r7, sp, #0
 8005792:	6078      	str	r0, [r7, #4]
 8005794:	6039      	str	r1, [r7, #0]
  FlagStatus bitstatus = RESET;
 8005796:	2300      	movs	r3, #0
 8005798:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t i2creg = 0, i2cxbase = 0;
 800579a:	2300      	movs	r3, #0
 800579c:	613b      	str	r3, [r7, #16]
 800579e:	2300      	movs	r3, #0
 80057a0:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_GET_FLAG(I2C_FLAG));

  /* Get the I2Cx peripheral base address */
  i2cxbase = (uint32_t)I2Cx;
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	60fb      	str	r3, [r7, #12]
  
  /* Read flag register index */
  i2creg = I2C_FLAG >> 28;
 80057a6:	683b      	ldr	r3, [r7, #0]
 80057a8:	0f1b      	lsrs	r3, r3, #28
 80057aa:	613b      	str	r3, [r7, #16]
  
  /* Get bit[23:0] of the flag */
  I2C_FLAG &= FLAG_Mask;
 80057ac:	683b      	ldr	r3, [r7, #0]
 80057ae:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80057b2:	603b      	str	r3, [r7, #0]
  
  if(i2creg != 0)
 80057b4:	693b      	ldr	r3, [r7, #16]
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d003      	beq.n	80057c2 <I2C_GetFlagStatus+0x36>
  {
    /* Get the I2Cx SR1 register address */
    i2cxbase += 0x14;
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	3314      	adds	r3, #20
 80057be:	60fb      	str	r3, [r7, #12]
 80057c0:	e005      	b.n	80057ce <I2C_GetFlagStatus+0x42>
  }
  else
  {
    /* Flag in I2Cx SR2 Register */
    I2C_FLAG = (uint32_t)(I2C_FLAG >> 16);
 80057c2:	683b      	ldr	r3, [r7, #0]
 80057c4:	0c1b      	lsrs	r3, r3, #16
 80057c6:	603b      	str	r3, [r7, #0]
    /* Get the I2Cx SR2 register address */
    i2cxbase += 0x18;
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	3318      	adds	r3, #24
 80057cc:	60fb      	str	r3, [r7, #12]
  }
  
  if(((*(__IO uint32_t *)i2cxbase) & I2C_FLAG) != (uint32_t)RESET)
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	681a      	ldr	r2, [r3, #0]
 80057d2:	683b      	ldr	r3, [r7, #0]
 80057d4:	4013      	ands	r3, r2
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d002      	beq.n	80057e0 <I2C_GetFlagStatus+0x54>
  {
    /* I2C_FLAG is set */
    bitstatus = SET;
 80057da:	2301      	movs	r3, #1
 80057dc:	75fb      	strb	r3, [r7, #23]
 80057de:	e001      	b.n	80057e4 <I2C_GetFlagStatus+0x58>
  }
  else
  {
    /* I2C_FLAG is reset */
    bitstatus = RESET;
 80057e0:	2300      	movs	r3, #0
 80057e2:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return the I2C_FLAG status */
  return  bitstatus;
 80057e4:	7dfb      	ldrb	r3, [r7, #23]
}
 80057e6:	4618      	mov	r0, r3
 80057e8:	371c      	adds	r7, #28
 80057ea:	46bd      	mov	sp, r7
 80057ec:	bc80      	pop	{r7}
 80057ee:	4770      	bx	lr

080057f0 <RCC_GetClocksFreq>:
  * @note   The result of this function could be not correct when using 
  *         fractional value for HSE crystal.  
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 80057f0:	b480      	push	{r7}
 80057f2:	b087      	sub	sp, #28
 80057f4:	af00      	add	r7, sp, #0
 80057f6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, pllmull = 0, pllsource = 0, presc = 0;
 80057f8:	2300      	movs	r3, #0
 80057fa:	617b      	str	r3, [r7, #20]
 80057fc:	2300      	movs	r3, #0
 80057fe:	613b      	str	r3, [r7, #16]
 8005800:	2300      	movs	r3, #0
 8005802:	60fb      	str	r3, [r7, #12]
 8005804:	2300      	movs	r3, #0
 8005806:	60bb      	str	r3, [r7, #8]
#if defined (STM32F10X_LD_VL) || defined (STM32F10X_MD_VL) || defined (STM32F10X_HD_VL)
  uint32_t prediv1factor = 0;
#endif
    
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & CFGR_SWS_Mask;
 8005808:	4b4c      	ldr	r3, [pc, #304]	; (800593c <RCC_GetClocksFreq+0x14c>)
 800580a:	685b      	ldr	r3, [r3, #4]
 800580c:	f003 030c 	and.w	r3, r3, #12
 8005810:	617b      	str	r3, [r7, #20]
  
  switch (tmp)
 8005812:	697b      	ldr	r3, [r7, #20]
 8005814:	2b04      	cmp	r3, #4
 8005816:	d007      	beq.n	8005828 <RCC_GetClocksFreq+0x38>
 8005818:	2b08      	cmp	r3, #8
 800581a:	d009      	beq.n	8005830 <RCC_GetClocksFreq+0x40>
 800581c:	2b00      	cmp	r3, #0
 800581e:	d133      	bne.n	8005888 <RCC_GetClocksFreq+0x98>
  {
    case 0x00:  /* HSI used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	4a47      	ldr	r2, [pc, #284]	; (8005940 <RCC_GetClocksFreq+0x150>)
 8005824:	601a      	str	r2, [r3, #0]
      break;
 8005826:	e033      	b.n	8005890 <RCC_GetClocksFreq+0xa0>
    case 0x04:  /* HSE used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	4a45      	ldr	r2, [pc, #276]	; (8005940 <RCC_GetClocksFreq+0x150>)
 800582c:	601a      	str	r2, [r3, #0]
      break;
 800582e:	e02f      	b.n	8005890 <RCC_GetClocksFreq+0xa0>
    case 0x08:  /* PLL used as system clock */

      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & CFGR_PLLMull_Mask;
 8005830:	4b42      	ldr	r3, [pc, #264]	; (800593c <RCC_GetClocksFreq+0x14c>)
 8005832:	685b      	ldr	r3, [r3, #4]
 8005834:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8005838:	613b      	str	r3, [r7, #16]
      pllsource = RCC->CFGR & CFGR_PLLSRC_Mask;
 800583a:	4b40      	ldr	r3, [pc, #256]	; (800593c <RCC_GetClocksFreq+0x14c>)
 800583c:	685b      	ldr	r3, [r3, #4]
 800583e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005842:	60fb      	str	r3, [r7, #12]
      
#ifndef STM32F10X_CL      
      pllmull = ( pllmull >> 18) + 2;
 8005844:	693b      	ldr	r3, [r7, #16]
 8005846:	0c9b      	lsrs	r3, r3, #18
 8005848:	3302      	adds	r3, #2
 800584a:	613b      	str	r3, [r7, #16]
      
      if (pllsource == 0x00)
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	2b00      	cmp	r3, #0
 8005850:	d106      	bne.n	8005860 <RCC_GetClocksFreq+0x70>
      {/* HSI oscillator clock divided by 2 selected as PLL clock entry */
        RCC_Clocks->SYSCLK_Frequency = (HSI_VALUE >> 1) * pllmull;
 8005852:	693b      	ldr	r3, [r7, #16]
 8005854:	4a3b      	ldr	r2, [pc, #236]	; (8005944 <RCC_GetClocksFreq+0x154>)
 8005856:	fb02 f203 	mul.w	r2, r2, r3
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	601a      	str	r2, [r3, #0]
          pll2mull = ((RCC->CFGR2 & CFGR2_PLL2MUL) >> 8 ) + 2; 
          RCC_Clocks->SYSCLK_Frequency = (((HSE_VALUE / prediv2factor) * pll2mull) / prediv1factor) * pllmull;                         
        }
      }
#endif /* STM32F10X_CL */ 
      break;
 800585e:	e017      	b.n	8005890 <RCC_GetClocksFreq+0xa0>
       prediv1factor = (RCC->CFGR2 & CFGR2_PREDIV1) + 1;
       /* HSE oscillator clock selected as PREDIV1 clock entry */
       RCC_Clocks->SYSCLK_Frequency = (HSE_VALUE / prediv1factor) * pllmull; 
 #else
        /* HSE selected as PLL clock entry */
        if ((RCC->CFGR & CFGR_PLLXTPRE_Mask) != (uint32_t)RESET)
 8005860:	4b36      	ldr	r3, [pc, #216]	; (800593c <RCC_GetClocksFreq+0x14c>)
 8005862:	685b      	ldr	r3, [r3, #4]
 8005864:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005868:	2b00      	cmp	r3, #0
 800586a:	d006      	beq.n	800587a <RCC_GetClocksFreq+0x8a>
        {/* HSE oscillator clock divided by 2 */
          RCC_Clocks->SYSCLK_Frequency = (HSE_VALUE >> 1) * pllmull;
 800586c:	693b      	ldr	r3, [r7, #16]
 800586e:	4a35      	ldr	r2, [pc, #212]	; (8005944 <RCC_GetClocksFreq+0x154>)
 8005870:	fb02 f203 	mul.w	r2, r2, r3
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	601a      	str	r2, [r3, #0]
          pll2mull = ((RCC->CFGR2 & CFGR2_PLL2MUL) >> 8 ) + 2; 
          RCC_Clocks->SYSCLK_Frequency = (((HSE_VALUE / prediv2factor) * pll2mull) / prediv1factor) * pllmull;                         
        }
      }
#endif /* STM32F10X_CL */ 
      break;
 8005878:	e00a      	b.n	8005890 <RCC_GetClocksFreq+0xa0>
        {/* HSE oscillator clock divided by 2 */
          RCC_Clocks->SYSCLK_Frequency = (HSE_VALUE >> 1) * pllmull;
        }
        else
        {
          RCC_Clocks->SYSCLK_Frequency = HSE_VALUE * pllmull;
 800587a:	693b      	ldr	r3, [r7, #16]
 800587c:	4a30      	ldr	r2, [pc, #192]	; (8005940 <RCC_GetClocksFreq+0x150>)
 800587e:	fb02 f203 	mul.w	r2, r2, r3
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	601a      	str	r2, [r3, #0]
          pll2mull = ((RCC->CFGR2 & CFGR2_PLL2MUL) >> 8 ) + 2; 
          RCC_Clocks->SYSCLK_Frequency = (((HSE_VALUE / prediv2factor) * pll2mull) / prediv1factor) * pllmull;                         
        }
      }
#endif /* STM32F10X_CL */ 
      break;
 8005886:	e003      	b.n	8005890 <RCC_GetClocksFreq+0xa0>

    default:
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	4a2d      	ldr	r2, [pc, #180]	; (8005940 <RCC_GetClocksFreq+0x150>)
 800588c:	601a      	str	r2, [r3, #0]
      break;
 800588e:	bf00      	nop
  }

  /* Compute HCLK, PCLK1, PCLK2 and ADCCLK clocks frequencies ----------------*/
  /* Get HCLK prescaler */
  tmp = RCC->CFGR & CFGR_HPRE_Set_Mask;
 8005890:	4b2a      	ldr	r3, [pc, #168]	; (800593c <RCC_GetClocksFreq+0x14c>)
 8005892:	685b      	ldr	r3, [r3, #4]
 8005894:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005898:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 4;
 800589a:	697b      	ldr	r3, [r7, #20]
 800589c:	091b      	lsrs	r3, r3, #4
 800589e:	617b      	str	r3, [r7, #20]
  presc = APBAHBPrescTable[tmp];
 80058a0:	4a29      	ldr	r2, [pc, #164]	; (8005948 <RCC_GetClocksFreq+0x158>)
 80058a2:	697b      	ldr	r3, [r7, #20]
 80058a4:	4413      	add	r3, r2
 80058a6:	781b      	ldrb	r3, [r3, #0]
 80058a8:	b2db      	uxtb	r3, r3
 80058aa:	60bb      	str	r3, [r7, #8]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681a      	ldr	r2, [r3, #0]
 80058b0:	68bb      	ldr	r3, [r7, #8]
 80058b2:	40da      	lsrs	r2, r3
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	605a      	str	r2, [r3, #4]
  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & CFGR_PPRE1_Set_Mask;
 80058b8:	4b20      	ldr	r3, [pc, #128]	; (800593c <RCC_GetClocksFreq+0x14c>)
 80058ba:	685b      	ldr	r3, [r3, #4]
 80058bc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80058c0:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 8;
 80058c2:	697b      	ldr	r3, [r7, #20]
 80058c4:	0a1b      	lsrs	r3, r3, #8
 80058c6:	617b      	str	r3, [r7, #20]
  presc = APBAHBPrescTable[tmp];
 80058c8:	4a1f      	ldr	r2, [pc, #124]	; (8005948 <RCC_GetClocksFreq+0x158>)
 80058ca:	697b      	ldr	r3, [r7, #20]
 80058cc:	4413      	add	r3, r2
 80058ce:	781b      	ldrb	r3, [r3, #0]
 80058d0:	b2db      	uxtb	r3, r3
 80058d2:	60bb      	str	r3, [r7, #8]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	685a      	ldr	r2, [r3, #4]
 80058d8:	68bb      	ldr	r3, [r7, #8]
 80058da:	40da      	lsrs	r2, r3
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	609a      	str	r2, [r3, #8]
  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & CFGR_PPRE2_Set_Mask;
 80058e0:	4b16      	ldr	r3, [pc, #88]	; (800593c <RCC_GetClocksFreq+0x14c>)
 80058e2:	685b      	ldr	r3, [r3, #4]
 80058e4:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 80058e8:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 11;
 80058ea:	697b      	ldr	r3, [r7, #20]
 80058ec:	0adb      	lsrs	r3, r3, #11
 80058ee:	617b      	str	r3, [r7, #20]
  presc = APBAHBPrescTable[tmp];
 80058f0:	4a15      	ldr	r2, [pc, #84]	; (8005948 <RCC_GetClocksFreq+0x158>)
 80058f2:	697b      	ldr	r3, [r7, #20]
 80058f4:	4413      	add	r3, r2
 80058f6:	781b      	ldrb	r3, [r3, #0]
 80058f8:	b2db      	uxtb	r3, r3
 80058fa:	60bb      	str	r3, [r7, #8]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	685a      	ldr	r2, [r3, #4]
 8005900:	68bb      	ldr	r3, [r7, #8]
 8005902:	40da      	lsrs	r2, r3
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	60da      	str	r2, [r3, #12]
  /* Get ADCCLK prescaler */
  tmp = RCC->CFGR & CFGR_ADCPRE_Set_Mask;
 8005908:	4b0c      	ldr	r3, [pc, #48]	; (800593c <RCC_GetClocksFreq+0x14c>)
 800590a:	685b      	ldr	r3, [r3, #4]
 800590c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8005910:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 14;
 8005912:	697b      	ldr	r3, [r7, #20]
 8005914:	0b9b      	lsrs	r3, r3, #14
 8005916:	617b      	str	r3, [r7, #20]
  presc = ADCPrescTable[tmp];
 8005918:	4a0c      	ldr	r2, [pc, #48]	; (800594c <RCC_GetClocksFreq+0x15c>)
 800591a:	697b      	ldr	r3, [r7, #20]
 800591c:	4413      	add	r3, r2
 800591e:	781b      	ldrb	r3, [r3, #0]
 8005920:	b2db      	uxtb	r3, r3
 8005922:	60bb      	str	r3, [r7, #8]
  /* ADCCLK clock frequency */
  RCC_Clocks->ADCCLK_Frequency = RCC_Clocks->PCLK2_Frequency / presc;
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	68da      	ldr	r2, [r3, #12]
 8005928:	68bb      	ldr	r3, [r7, #8]
 800592a:	fbb2 f2f3 	udiv	r2, r2, r3
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	611a      	str	r2, [r3, #16]
}
 8005932:	bf00      	nop
 8005934:	371c      	adds	r7, #28
 8005936:	46bd      	mov	sp, r7
 8005938:	bc80      	pop	{r7}
 800593a:	4770      	bx	lr
 800593c:	40021000 	.word	0x40021000
 8005940:	007a1200 	.word	0x007a1200
 8005944:	003d0900 	.word	0x003d0900
 8005948:	20000000 	.word	0x20000000
 800594c:	20000010 	.word	0x20000010

08005950 <TIM_ClearFlag>:
  *   - TIM_FLAG_Break is used only with TIM1, TIM8 and TIM15. 
  *   - TIM_FLAG_COM is used only with TIM1, TIM8, TIM15, TIM16 and TIM17.   
  * @retval None
  */
void TIM_ClearFlag(TIM_TypeDef* TIMx, uint16_t TIM_FLAG)
{  
 8005950:	b480      	push	{r7}
 8005952:	b083      	sub	sp, #12
 8005954:	af00      	add	r7, sp, #0
 8005956:	6078      	str	r0, [r7, #4]
 8005958:	460b      	mov	r3, r1
 800595a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_CLEAR_FLAG(TIM_FLAG));
   
  /* Clear the flags */
  TIMx->SR = (uint16_t)~TIM_FLAG;
 800595c:	887b      	ldrh	r3, [r7, #2]
 800595e:	43db      	mvns	r3, r3
 8005960:	b29a      	uxth	r2, r3
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	821a      	strh	r2, [r3, #16]
}
 8005966:	bf00      	nop
 8005968:	370c      	adds	r7, #12
 800596a:	46bd      	mov	sp, r7
 800596c:	bc80      	pop	{r7}
 800596e:	4770      	bx	lr

08005970 <USART_Init>:
  *         that contains the configuration information for the specified USART 
  *         peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 8005970:	b580      	push	{r7, lr}
 8005972:	b08c      	sub	sp, #48	; 0x30
 8005974:	af00      	add	r7, sp, #0
 8005976:	6078      	str	r0, [r7, #4]
 8005978:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0x00, apbclock = 0x00;
 800597a:	2300      	movs	r3, #0
 800597c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800597e:	2300      	movs	r3, #0
 8005980:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t integerdivider = 0x00;
 8005982:	2300      	movs	r3, #0
 8005984:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t fractionaldivider = 0x00;
 8005986:	2300      	movs	r3, #0
 8005988:	623b      	str	r3, [r7, #32]
  uint32_t usartxbase = 0;
 800598a:	2300      	movs	r3, #0
 800598c:	61fb      	str	r3, [r7, #28]
  if (USART_InitStruct->USART_HardwareFlowControl != USART_HardwareFlowControl_None)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }

  usartxbase = (uint32_t)USARTx;
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	61fb      	str	r3, [r7, #28]

/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	8a1b      	ldrh	r3, [r3, #16]
 8005996:	b29b      	uxth	r3, r3
 8005998:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Clear STOP[13:12] bits */
  tmpreg &= CR2_STOP_CLEAR_Mask;
 800599a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800599c:	f64c 73ff 	movw	r3, #53247	; 0xcfff
 80059a0:	4013      	ands	r3, r2
 80059a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit ------------*/
  /* Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
 80059a4:	683b      	ldr	r3, [r7, #0]
 80059a6:	88db      	ldrh	r3, [r3, #6]
 80059a8:	461a      	mov	r2, r3
 80059aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059ac:	4313      	orrs	r3, r2
 80059ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
 80059b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059b2:	b29a      	uxth	r2, r3
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	821a      	strh	r2, [r3, #16]

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	899b      	ldrh	r3, [r3, #12]
 80059bc:	b29b      	uxth	r3, r3
 80059be:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= CR1_CLEAR_Mask;
 80059c0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80059c2:	f64e 13f3 	movw	r3, #59891	; 0xe9f3
 80059c6:	4013      	ands	r3, r2
 80059c8:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Configure the USART Word Length, Parity and mode ----------------------- */
  /* Set the M bits according to USART_WordLength value */
  /* Set PCE and PS bits according to USART_Parity value */
  /* Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 80059ca:	683b      	ldr	r3, [r7, #0]
 80059cc:	889a      	ldrh	r2, [r3, #4]
 80059ce:	683b      	ldr	r3, [r7, #0]
 80059d0:	891b      	ldrh	r3, [r3, #8]
 80059d2:	4313      	orrs	r3, r2
 80059d4:	b29a      	uxth	r2, r3
            USART_InitStruct->USART_Mode;
 80059d6:	683b      	ldr	r3, [r7, #0]
 80059d8:	895b      	ldrh	r3, [r3, #10]
  tmpreg &= CR1_CLEAR_Mask;
  /* Configure the USART Word Length, Parity and mode ----------------------- */
  /* Set the M bits according to USART_WordLength value */
  /* Set PCE and PS bits according to USART_Parity value */
  /* Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 80059da:	4313      	orrs	r3, r2
 80059dc:	b29b      	uxth	r3, r3
 80059de:	461a      	mov	r2, r3
 80059e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059e2:	4313      	orrs	r3, r2
 80059e4:	62fb      	str	r3, [r7, #44]	; 0x2c
            USART_InitStruct->USART_Mode;
  /* Write to USART CR1 */
  USARTx->CR1 = (uint16_t)tmpreg;
 80059e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059e8:	b29a      	uxth	r2, r3
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	819a      	strh	r2, [r3, #12]

/*---------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = USARTx->CR3;
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	8a9b      	ldrh	r3, [r3, #20]
 80059f2:	b29b      	uxth	r3, r3
 80059f4:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Clear CTSE and RTSE bits */
  tmpreg &= CR3_CLEAR_Mask;
 80059f6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80059f8:	f64f 43ff 	movw	r3, #64767	; 0xfcff
 80059fc:	4013      	ands	r3, r2
 80059fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Configure the USART HFC -------------------------------------------------*/
  /* Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;
 8005a00:	683b      	ldr	r3, [r7, #0]
 8005a02:	899b      	ldrh	r3, [r3, #12]
 8005a04:	461a      	mov	r2, r3
 8005a06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a08:	4313      	orrs	r3, r2
 8005a0a:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Write to USART CR3 */
  USARTx->CR3 = (uint16_t)tmpreg;
 8005a0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a0e:	b29a      	uxth	r2, r3
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	829a      	strh	r2, [r3, #20]

/*---------------------------- USART BRR Configuration -----------------------*/
  /* Configure the USART Baud Rate -------------------------------------------*/
  RCC_GetClocksFreq(&RCC_ClocksStatus);
 8005a14:	f107 0308 	add.w	r3, r7, #8
 8005a18:	4618      	mov	r0, r3
 8005a1a:	f7ff fee9 	bl	80057f0 <RCC_GetClocksFreq>
  if (usartxbase == USART1_BASE)
 8005a1e:	69fb      	ldr	r3, [r7, #28]
 8005a20:	4a2e      	ldr	r2, [pc, #184]	; (8005adc <USART_Init+0x16c>)
 8005a22:	4293      	cmp	r3, r2
 8005a24:	d102      	bne.n	8005a2c <USART_Init+0xbc>
  {
    apbclock = RCC_ClocksStatus.PCLK2_Frequency;
 8005a26:	697b      	ldr	r3, [r7, #20]
 8005a28:	62bb      	str	r3, [r7, #40]	; 0x28
 8005a2a:	e001      	b.n	8005a30 <USART_Init+0xc0>
  }
  else
  {
    apbclock = RCC_ClocksStatus.PCLK1_Frequency;
 8005a2c:	693b      	ldr	r3, [r7, #16]
 8005a2e:	62bb      	str	r3, [r7, #40]	; 0x28
  }
  
  /* Determine the integer part */
  if ((USARTx->CR1 & CR1_OVER8_Set) != 0)
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	899b      	ldrh	r3, [r3, #12]
 8005a34:	b29b      	uxth	r3, r3
 8005a36:	b21b      	sxth	r3, r3
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	da0c      	bge.n	8005a56 <USART_Init+0xe6>
  {
    /* Integer part computing in case Oversampling mode is 8 Samples */
    integerdivider = ((25 * apbclock) / (2 * (USART_InitStruct->USART_BaudRate)));    
 8005a3c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005a3e:	4613      	mov	r3, r2
 8005a40:	009b      	lsls	r3, r3, #2
 8005a42:	4413      	add	r3, r2
 8005a44:	009a      	lsls	r2, r3, #2
 8005a46:	441a      	add	r2, r3
 8005a48:	683b      	ldr	r3, [r7, #0]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	005b      	lsls	r3, r3, #1
 8005a4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a52:	627b      	str	r3, [r7, #36]	; 0x24
 8005a54:	e00b      	b.n	8005a6e <USART_Init+0xfe>
  }
  else /* if ((USARTx->CR1 & CR1_OVER8_Set) == 0) */
  {
    /* Integer part computing in case Oversampling mode is 16 Samples */
    integerdivider = ((25 * apbclock) / (4 * (USART_InitStruct->USART_BaudRate)));    
 8005a56:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005a58:	4613      	mov	r3, r2
 8005a5a:	009b      	lsls	r3, r3, #2
 8005a5c:	4413      	add	r3, r2
 8005a5e:	009a      	lsls	r2, r3, #2
 8005a60:	441a      	add	r2, r3
 8005a62:	683b      	ldr	r3, [r7, #0]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	009b      	lsls	r3, r3, #2
 8005a68:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a6c:	627b      	str	r3, [r7, #36]	; 0x24
  }
  tmpreg = (integerdivider / 100) << 4;
 8005a6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a70:	4a1b      	ldr	r2, [pc, #108]	; (8005ae0 <USART_Init+0x170>)
 8005a72:	fba2 2303 	umull	r2, r3, r2, r3
 8005a76:	095b      	lsrs	r3, r3, #5
 8005a78:	011b      	lsls	r3, r3, #4
 8005a7a:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Determine the fractional part */
  fractionaldivider = integerdivider - (100 * (tmpreg >> 4));
 8005a7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a7e:	091b      	lsrs	r3, r3, #4
 8005a80:	2264      	movs	r2, #100	; 0x64
 8005a82:	fb02 f303 	mul.w	r3, r2, r3
 8005a86:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005a88:	1ad3      	subs	r3, r2, r3
 8005a8a:	623b      	str	r3, [r7, #32]

  /* Implement the fractional part in the register */
  if ((USARTx->CR1 & CR1_OVER8_Set) != 0)
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	899b      	ldrh	r3, [r3, #12]
 8005a90:	b29b      	uxth	r3, r3
 8005a92:	b21b      	sxth	r3, r3
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	da0c      	bge.n	8005ab2 <USART_Init+0x142>
  {
    tmpreg |= ((((fractionaldivider * 8) + 50) / 100)) & ((uint8_t)0x07);
 8005a98:	6a3b      	ldr	r3, [r7, #32]
 8005a9a:	00db      	lsls	r3, r3, #3
 8005a9c:	3332      	adds	r3, #50	; 0x32
 8005a9e:	4a10      	ldr	r2, [pc, #64]	; (8005ae0 <USART_Init+0x170>)
 8005aa0:	fba2 2303 	umull	r2, r3, r2, r3
 8005aa4:	095b      	lsrs	r3, r3, #5
 8005aa6:	f003 0307 	and.w	r3, r3, #7
 8005aaa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005aac:	4313      	orrs	r3, r2
 8005aae:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005ab0:	e00b      	b.n	8005aca <USART_Init+0x15a>
  }
  else /* if ((USARTx->CR1 & CR1_OVER8_Set) == 0) */
  {
    tmpreg |= ((((fractionaldivider * 16) + 50) / 100)) & ((uint8_t)0x0F);
 8005ab2:	6a3b      	ldr	r3, [r7, #32]
 8005ab4:	011b      	lsls	r3, r3, #4
 8005ab6:	3332      	adds	r3, #50	; 0x32
 8005ab8:	4a09      	ldr	r2, [pc, #36]	; (8005ae0 <USART_Init+0x170>)
 8005aba:	fba2 2303 	umull	r2, r3, r2, r3
 8005abe:	095b      	lsrs	r3, r3, #5
 8005ac0:	f003 030f 	and.w	r3, r3, #15
 8005ac4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005ac6:	4313      	orrs	r3, r2
 8005ac8:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  
  /* Write to USART BRR */
  USARTx->BRR = (uint16_t)tmpreg;
 8005aca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005acc:	b29a      	uxth	r2, r3
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	811a      	strh	r2, [r3, #8]
}
 8005ad2:	bf00      	nop
 8005ad4:	3730      	adds	r7, #48	; 0x30
 8005ad6:	46bd      	mov	sp, r7
 8005ad8:	bd80      	pop	{r7, pc}
 8005ada:	bf00      	nop
 8005adc:	40013800 	.word	0x40013800
 8005ae0:	51eb851f 	.word	0x51eb851f

08005ae4 <USART_Cmd>:
  * @param  NewState: new state of the USARTx peripheral.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 8005ae4:	b480      	push	{r7}
 8005ae6:	b083      	sub	sp, #12
 8005ae8:	af00      	add	r7, sp, #0
 8005aea:	6078      	str	r0, [r7, #4]
 8005aec:	460b      	mov	r3, r1
 8005aee:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8005af0:	78fb      	ldrb	r3, [r7, #3]
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d008      	beq.n	8005b08 <USART_Cmd+0x24>
  {
    /* Enable the selected USART by setting the UE bit in the CR1 register */
    USARTx->CR1 |= CR1_UE_Set;
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	899b      	ldrh	r3, [r3, #12]
 8005afa:	b29b      	uxth	r3, r3
 8005afc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8005b00:	b29a      	uxth	r2, r3
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	819a      	strh	r2, [r3, #12]
  else
  {
    /* Disable the selected USART by clearing the UE bit in the CR1 register */
    USARTx->CR1 &= CR1_UE_Reset;
  }
}
 8005b06:	e007      	b.n	8005b18 <USART_Cmd+0x34>
    USARTx->CR1 |= CR1_UE_Set;
  }
  else
  {
    /* Disable the selected USART by clearing the UE bit in the CR1 register */
    USARTx->CR1 &= CR1_UE_Reset;
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	899b      	ldrh	r3, [r3, #12]
 8005b0c:	b29b      	uxth	r3, r3
 8005b0e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005b12:	b29a      	uxth	r2, r3
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	819a      	strh	r2, [r3, #12]
  }
}
 8005b18:	bf00      	nop
 8005b1a:	370c      	adds	r7, #12
 8005b1c:	46bd      	mov	sp, r7
 8005b1e:	bc80      	pop	{r7}
 8005b20:	4770      	bx	lr
 8005b22:	bf00      	nop

08005b24 <USART_SendData>:
  *   USART1, USART2, USART3, UART4 or UART5.
  * @param  Data: the data to transmit.
  * @retval None
  */
void USART_SendData(USART_TypeDef* USARTx, uint16_t Data)
{
 8005b24:	b480      	push	{r7}
 8005b26:	b083      	sub	sp, #12
 8005b28:	af00      	add	r7, sp, #0
 8005b2a:	6078      	str	r0, [r7, #4]
 8005b2c:	460b      	mov	r3, r1
 8005b2e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DATA(Data)); 
    
  /* Transmit Data */
  USARTx->DR = (Data & (uint16_t)0x01FF);
 8005b30:	887b      	ldrh	r3, [r7, #2]
 8005b32:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005b36:	b29a      	uxth	r2, r3
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	809a      	strh	r2, [r3, #4]
}
 8005b3c:	bf00      	nop
 8005b3e:	370c      	adds	r7, #12
 8005b40:	46bd      	mov	sp, r7
 8005b42:	bc80      	pop	{r7}
 8005b44:	4770      	bx	lr
 8005b46:	bf00      	nop

08005b48 <USART_ReceiveData>:
  *   This parameter can be one of the following values:
  *   USART1, USART2, USART3, UART4 or UART5.
  * @retval The received data.
  */
uint16_t USART_ReceiveData(USART_TypeDef* USARTx)
{
 8005b48:	b480      	push	{r7}
 8005b4a:	b083      	sub	sp, #12
 8005b4c:	af00      	add	r7, sp, #0
 8005b4e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  
  /* Receive Data */
  return (uint16_t)(USARTx->DR & (uint16_t)0x01FF);
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	889b      	ldrh	r3, [r3, #4]
 8005b54:	b29b      	uxth	r3, r3
 8005b56:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005b5a:	b29b      	uxth	r3, r3
}
 8005b5c:	4618      	mov	r0, r3
 8005b5e:	370c      	adds	r7, #12
 8005b60:	46bd      	mov	sp, r7
 8005b62:	bc80      	pop	{r7}
 8005b64:	4770      	bx	lr
 8005b66:	bf00      	nop

08005b68 <USART_GetFlagStatus>:
  *     @arg USART_FLAG_FE:   Framing Error flag
  *     @arg USART_FLAG_PE:   Parity Error flag
  * @retval The new state of USART_FLAG (SET or RESET).
  */
FlagStatus USART_GetFlagStatus(USART_TypeDef* USARTx, uint16_t USART_FLAG)
{
 8005b68:	b480      	push	{r7}
 8005b6a:	b085      	sub	sp, #20
 8005b6c:	af00      	add	r7, sp, #0
 8005b6e:	6078      	str	r0, [r7, #4]
 8005b70:	460b      	mov	r3, r1
 8005b72:	807b      	strh	r3, [r7, #2]
  FlagStatus bitstatus = RESET;
 8005b74:	2300      	movs	r3, #0
 8005b76:	73fb      	strb	r3, [r7, #15]
  if (USART_FLAG == USART_FLAG_CTS)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }  
  
  if ((USARTx->SR & USART_FLAG) != (uint16_t)RESET)
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	881b      	ldrh	r3, [r3, #0]
 8005b7c:	b29a      	uxth	r2, r3
 8005b7e:	887b      	ldrh	r3, [r7, #2]
 8005b80:	4013      	ands	r3, r2
 8005b82:	b29b      	uxth	r3, r3
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d002      	beq.n	8005b8e <USART_GetFlagStatus+0x26>
  {
    bitstatus = SET;
 8005b88:	2301      	movs	r3, #1
 8005b8a:	73fb      	strb	r3, [r7, #15]
 8005b8c:	e001      	b.n	8005b92 <USART_GetFlagStatus+0x2a>
  }
  else
  {
    bitstatus = RESET;
 8005b8e:	2300      	movs	r3, #0
 8005b90:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005b92:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b94:	4618      	mov	r0, r3
 8005b96:	3714      	adds	r7, #20
 8005b98:	46bd      	mov	sp, r7
 8005b9a:	bc80      	pop	{r7}
 8005b9c:	4770      	bx	lr
 8005b9e:	bf00      	nop

08005ba0 <USART_ClearFlag>:
  *   - TXE flag is cleared only by a write to the USART_DR register 
  *     (USART_SendData()).
  * @retval None
  */
void USART_ClearFlag(USART_TypeDef* USARTx, uint16_t USART_FLAG)
{
 8005ba0:	b480      	push	{r7}
 8005ba2:	b083      	sub	sp, #12
 8005ba4:	af00      	add	r7, sp, #0
 8005ba6:	6078      	str	r0, [r7, #4]
 8005ba8:	460b      	mov	r3, r1
 8005baa:	807b      	strh	r3, [r7, #2]
  if ((USART_FLAG & USART_FLAG_CTS) == USART_FLAG_CTS)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  } 
   
  USARTx->SR = (uint16_t)~USART_FLAG;
 8005bac:	887b      	ldrh	r3, [r7, #2]
 8005bae:	43db      	mvns	r3, r3
 8005bb0:	b29a      	uxth	r2, r3
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	801a      	strh	r2, [r3, #0]
}
 8005bb6:	bf00      	nop
 8005bb8:	370c      	adds	r7, #12
 8005bba:	46bd      	mov	sp, r7
 8005bbc:	bc80      	pop	{r7}
 8005bbe:	4770      	bx	lr

08005bc0 <main>:
#include "IWDG.h"
#include "TIMER.h"



void main(){
 8005bc0:	b580      	push	{r7, lr}
 8005bc2:	af00      	add	r7, sp, #0
	Chicken_Core();
 8005bc4:	f7fc fd7c 	bl	80026c0 <Chicken_Core>
};
 8005bc8:	bf00      	nop
 8005bca:	bd80      	pop	{r7, pc}

08005bcc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8005bcc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8005c04 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8005bd0:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8005bd2:	e003      	b.n	8005bdc <LoopCopyDataInit>

08005bd4 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8005bd4:	4b0c      	ldr	r3, [pc, #48]	; (8005c08 <LoopFillZerobss+0x18>)
	ldr	r3, [r3, r1]
 8005bd6:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8005bd8:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8005bda:	3104      	adds	r1, #4

08005bdc <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8005bdc:	480b      	ldr	r0, [pc, #44]	; (8005c0c <LoopFillZerobss+0x1c>)
	ldr	r3, =_edata
 8005bde:	4b0c      	ldr	r3, [pc, #48]	; (8005c10 <LoopFillZerobss+0x20>)
	adds	r2, r0, r1
 8005be0:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8005be2:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8005be4:	d3f6      	bcc.n	8005bd4 <CopyDataInit>
	ldr	r2, =_sbss
 8005be6:	4a0b      	ldr	r2, [pc, #44]	; (8005c14 <LoopFillZerobss+0x24>)
	b	LoopFillZerobss
 8005be8:	e002      	b.n	8005bf0 <LoopFillZerobss>

08005bea <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8005bea:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8005bec:	f842 3b04 	str.w	r3, [r2], #4

08005bf0 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8005bf0:	4b09      	ldr	r3, [pc, #36]	; (8005c18 <LoopFillZerobss+0x28>)
	cmp	r2, r3
 8005bf2:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8005bf4:	d3f9      	bcc.n	8005bea <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8005bf6:	f000 f841 	bl	8005c7c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8005bfa:	f000 f8fd 	bl	8005df8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8005bfe:	f7ff ffdf 	bl	8005bc0 <main>
	bx	lr
 8005c02:	4770      	bx	lr

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8005c04:	20005000 	.word	0x20005000
/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
  b	LoopCopyDataInit

CopyDataInit:
	ldr	r3, =_sidata
 8005c08:	080076b0 	.word	0x080076b0
	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
	adds	r1, r1, #4

LoopCopyDataInit:
	ldr	r0, =_sdata
 8005c0c:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8005c10:	20000080 	.word	0x20000080
	adds	r2, r0, r1
	cmp	r2, r3
	bcc	CopyDataInit
	ldr	r2, =_sbss
 8005c14:	20000080 	.word	0x20000080
FillZerobss:
	movs	r3, #0
	str	r3, [r2], #4

LoopFillZerobss:
	ldr	r3, = _ebss
 8005c18:	2000017c 	.word	0x2000017c

08005c1c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8005c1c:	e7fe      	b.n	8005c1c <ADC1_2_IRQHandler>
	...

08005c20 <NMI_Handler>:
  * @brief  This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 8005c20:	b480      	push	{r7}
 8005c22:	af00      	add	r7, sp, #0
}
 8005c24:	bf00      	nop
 8005c26:	46bd      	mov	sp, r7
 8005c28:	bc80      	pop	{r7}
 8005c2a:	4770      	bx	lr

08005c2c <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8005c2c:	b480      	push	{r7}
 8005c2e:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
  {
  }
 8005c30:	e7fe      	b.n	8005c30 <HardFault_Handler+0x4>
 8005c32:	bf00      	nop

08005c34 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8005c34:	b480      	push	{r7}
 8005c36:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
  {
  }
 8005c38:	e7fe      	b.n	8005c38 <MemManage_Handler+0x4>
 8005c3a:	bf00      	nop

08005c3c <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 8005c3c:	b480      	push	{r7}
 8005c3e:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
  {
  }
 8005c40:	e7fe      	b.n	8005c40 <BusFault_Handler+0x4>
 8005c42:	bf00      	nop

08005c44 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8005c44:	b480      	push	{r7}
 8005c46:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
  {
  }
 8005c48:	e7fe      	b.n	8005c48 <UsageFault_Handler+0x4>
 8005c4a:	bf00      	nop

08005c4c <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 8005c4c:	b480      	push	{r7}
 8005c4e:	af00      	add	r7, sp, #0
}
 8005c50:	bf00      	nop
 8005c52:	46bd      	mov	sp, r7
 8005c54:	bc80      	pop	{r7}
 8005c56:	4770      	bx	lr

08005c58 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 8005c58:	b480      	push	{r7}
 8005c5a:	af00      	add	r7, sp, #0
}
 8005c5c:	bf00      	nop
 8005c5e:	46bd      	mov	sp, r7
 8005c60:	bc80      	pop	{r7}
 8005c62:	4770      	bx	lr

08005c64 <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 8005c64:	b480      	push	{r7}
 8005c66:	af00      	add	r7, sp, #0
}
 8005c68:	bf00      	nop
 8005c6a:	46bd      	mov	sp, r7
 8005c6c:	bc80      	pop	{r7}
 8005c6e:	4770      	bx	lr

08005c70 <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 8005c70:	b480      	push	{r7}
 8005c72:	af00      	add	r7, sp, #0
}
 8005c74:	bf00      	nop
 8005c76:	46bd      	mov	sp, r7
 8005c78:	bc80      	pop	{r7}
 8005c7a:	4770      	bx	lr

08005c7c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8005c7c:	b580      	push	{r7, lr}
 8005c7e:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8005c80:	4a15      	ldr	r2, [pc, #84]	; (8005cd8 <SystemInit+0x5c>)
 8005c82:	4b15      	ldr	r3, [pc, #84]	; (8005cd8 <SystemInit+0x5c>)
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	f043 0301 	orr.w	r3, r3, #1
 8005c8a:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#ifndef STM32F10X_CL
  RCC->CFGR &= (uint32_t)0xF8FF0000;
 8005c8c:	4912      	ldr	r1, [pc, #72]	; (8005cd8 <SystemInit+0x5c>)
 8005c8e:	4b12      	ldr	r3, [pc, #72]	; (8005cd8 <SystemInit+0x5c>)
 8005c90:	685a      	ldr	r2, [r3, #4]
 8005c92:	4b12      	ldr	r3, [pc, #72]	; (8005cdc <SystemInit+0x60>)
 8005c94:	4013      	ands	r3, r2
 8005c96:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= (uint32_t)0xF0FF0000;
#endif /* STM32F10X_CL */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8005c98:	4a0f      	ldr	r2, [pc, #60]	; (8005cd8 <SystemInit+0x5c>)
 8005c9a:	4b0f      	ldr	r3, [pc, #60]	; (8005cd8 <SystemInit+0x5c>)
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8005ca2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005ca6:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8005ca8:	4a0b      	ldr	r2, [pc, #44]	; (8005cd8 <SystemInit+0x5c>)
 8005caa:	4b0b      	ldr	r3, [pc, #44]	; (8005cd8 <SystemInit+0x5c>)
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005cb2:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
 8005cb4:	4a08      	ldr	r2, [pc, #32]	; (8005cd8 <SystemInit+0x5c>)
 8005cb6:	4b08      	ldr	r3, [pc, #32]	; (8005cd8 <SystemInit+0x5c>)
 8005cb8:	685b      	ldr	r3, [r3, #4]
 8005cba:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8005cbe:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000;
 8005cc0:	4b05      	ldr	r3, [pc, #20]	; (8005cd8 <SystemInit+0x5c>)
 8005cc2:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8005cc6:	609a      	str	r2, [r3, #8]
  #endif /* DATA_IN_ExtSRAM */
#endif 

  /* Configure the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers */
  /* Configure the Flash Latency cycles and enable prefetch buffer */
  SetSysClock();
 8005cc8:	f000 f80c 	bl	8005ce4 <SetSysClock>

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8005ccc:	4b04      	ldr	r3, [pc, #16]	; (8005ce0 <SystemInit+0x64>)
 8005cce:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8005cd2:	609a      	str	r2, [r3, #8]
#endif 
}
 8005cd4:	bf00      	nop
 8005cd6:	bd80      	pop	{r7, pc}
 8005cd8:	40021000 	.word	0x40021000
 8005cdc:	f8ff0000 	.word	0xf8ff0000
 8005ce0:	e000ed00 	.word	0xe000ed00

08005ce4 <SetSysClock>:
  * @brief  Configures the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers.
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8005ce4:	b580      	push	{r7, lr}
 8005ce6:	af00      	add	r7, sp, #0
#elif defined SYSCLK_FREQ_48MHz
  SetSysClockTo48();
#elif defined SYSCLK_FREQ_56MHz
  SetSysClockTo56();  
#elif defined SYSCLK_FREQ_72MHz
  SetSysClockTo72();
 8005ce8:	f000 f802 	bl	8005cf0 <SetSysClockTo72>
#endif
 
 /* If none of the define above is enabled, the HSI is used as System clock
    source (default after reset) */ 
}
 8005cec:	bf00      	nop
 8005cee:	bd80      	pop	{r7, pc}

08005cf0 <SetSysClockTo72>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
static void SetSysClockTo72(void)
{
 8005cf0:	b480      	push	{r7}
 8005cf2:	b083      	sub	sp, #12
 8005cf4:	af00      	add	r7, sp, #0
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 8005cf6:	2300      	movs	r3, #0
 8005cf8:	607b      	str	r3, [r7, #4]
 8005cfa:	2300      	movs	r3, #0
 8005cfc:	603b      	str	r3, [r7, #0]
  
  /* SYSCLK, HCLK, PCLK2 and PCLK1 configuration ---------------------------*/    
  /* Enable HSE */    
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 8005cfe:	4a3a      	ldr	r2, [pc, #232]	; (8005de8 <SetSysClockTo72+0xf8>)
 8005d00:	4b39      	ldr	r3, [pc, #228]	; (8005de8 <SetSysClockTo72+0xf8>)
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005d08:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 8005d0a:	4b37      	ldr	r3, [pc, #220]	; (8005de8 <SetSysClockTo72+0xf8>)
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d12:	603b      	str	r3, [r7, #0]
    StartUpCounter++;  
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	3301      	adds	r3, #1
 8005d18:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 8005d1a:	683b      	ldr	r3, [r7, #0]
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d103      	bne.n	8005d28 <SetSysClockTo72+0x38>
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8005d26:	d1f0      	bne.n	8005d0a <SetSysClockTo72+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 8005d28:	4b2f      	ldr	r3, [pc, #188]	; (8005de8 <SetSysClockTo72+0xf8>)
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d002      	beq.n	8005d3a <SetSysClockTo72+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 8005d34:	2301      	movs	r3, #1
 8005d36:	603b      	str	r3, [r7, #0]
 8005d38:	e001      	b.n	8005d3e <SetSysClockTo72+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 8005d3a:	2300      	movs	r3, #0
 8005d3c:	603b      	str	r3, [r7, #0]
  }  

  if (HSEStatus == (uint32_t)0x01)
 8005d3e:	683b      	ldr	r3, [r7, #0]
 8005d40:	2b01      	cmp	r3, #1
 8005d42:	d14b      	bne.n	8005ddc <SetSysClockTo72+0xec>
  {
    /* Enable Prefetch Buffer */
    FLASH->ACR |= FLASH_ACR_PRFTBE;
 8005d44:	4a29      	ldr	r2, [pc, #164]	; (8005dec <SetSysClockTo72+0xfc>)
 8005d46:	4b29      	ldr	r3, [pc, #164]	; (8005dec <SetSysClockTo72+0xfc>)
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	f043 0310 	orr.w	r3, r3, #16
 8005d4e:	6013      	str	r3, [r2, #0]

    /* Flash 2 wait state */
    FLASH->ACR &= (uint32_t)((uint32_t)~FLASH_ACR_LATENCY);
 8005d50:	4a26      	ldr	r2, [pc, #152]	; (8005dec <SetSysClockTo72+0xfc>)
 8005d52:	4b26      	ldr	r3, [pc, #152]	; (8005dec <SetSysClockTo72+0xfc>)
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	f023 0303 	bic.w	r3, r3, #3
 8005d5a:	6013      	str	r3, [r2, #0]
    FLASH->ACR |= (uint32_t)FLASH_ACR_LATENCY_2;    
 8005d5c:	4a23      	ldr	r2, [pc, #140]	; (8005dec <SetSysClockTo72+0xfc>)
 8005d5e:	4b23      	ldr	r3, [pc, #140]	; (8005dec <SetSysClockTo72+0xfc>)
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	f043 0302 	orr.w	r3, r3, #2
 8005d66:	6013      	str	r3, [r2, #0]

 
    /* HCLK = SYSCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
 8005d68:	4a1f      	ldr	r2, [pc, #124]	; (8005de8 <SetSysClockTo72+0xf8>)
 8005d6a:	4b1f      	ldr	r3, [pc, #124]	; (8005de8 <SetSysClockTo72+0xf8>)
 8005d6c:	685b      	ldr	r3, [r3, #4]
 8005d6e:	6053      	str	r3, [r2, #4]
      
    /* PCLK2 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;
 8005d70:	4a1d      	ldr	r2, [pc, #116]	; (8005de8 <SetSysClockTo72+0xf8>)
 8005d72:	4b1d      	ldr	r3, [pc, #116]	; (8005de8 <SetSysClockTo72+0xf8>)
 8005d74:	685b      	ldr	r3, [r3, #4]
 8005d76:	6053      	str	r3, [r2, #4]
    
    /* PCLK1 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV2;
 8005d78:	4a1b      	ldr	r2, [pc, #108]	; (8005de8 <SetSysClockTo72+0xf8>)
 8005d7a:	4b1b      	ldr	r3, [pc, #108]	; (8005de8 <SetSysClockTo72+0xf8>)
 8005d7c:	685b      	ldr	r3, [r3, #4]
 8005d7e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005d82:	6053      	str	r3, [r2, #4]
    RCC->CFGR &= (uint32_t)~(RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLSRC | RCC_CFGR_PLLMULL);
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLXTPRE_PREDIV1 | RCC_CFGR_PLLSRC_PREDIV1 | 
                            RCC_CFGR_PLLMULL9); 
#else    
    /*  PLL configuration: PLLCLK = HSE * 9 = 72 MHz */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE |
 8005d84:	4a18      	ldr	r2, [pc, #96]	; (8005de8 <SetSysClockTo72+0xf8>)
 8005d86:	4b18      	ldr	r3, [pc, #96]	; (8005de8 <SetSysClockTo72+0xf8>)
 8005d88:	685b      	ldr	r3, [r3, #4]
 8005d8a:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 8005d8e:	6053      	str	r3, [r2, #4]
                                        RCC_CFGR_PLLMULL));
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSE | RCC_CFGR_PLLMULL9);
 8005d90:	4a15      	ldr	r2, [pc, #84]	; (8005de8 <SetSysClockTo72+0xf8>)
 8005d92:	4b15      	ldr	r3, [pc, #84]	; (8005de8 <SetSysClockTo72+0xf8>)
 8005d94:	685b      	ldr	r3, [r3, #4]
 8005d96:	f443 13e8 	orr.w	r3, r3, #1900544	; 0x1d0000
 8005d9a:	6053      	str	r3, [r2, #4]
#endif /* STM32F10X_CL */

    /* Enable PLL */
    RCC->CR |= RCC_CR_PLLON;
 8005d9c:	4a12      	ldr	r2, [pc, #72]	; (8005de8 <SetSysClockTo72+0xf8>)
 8005d9e:	4b12      	ldr	r3, [pc, #72]	; (8005de8 <SetSysClockTo72+0xf8>)
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005da6:	6013      	str	r3, [r2, #0]

    /* Wait till PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8005da8:	bf00      	nop
 8005daa:	4b0f      	ldr	r3, [pc, #60]	; (8005de8 <SetSysClockTo72+0xf8>)
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d0f9      	beq.n	8005daa <SetSysClockTo72+0xba>
    {
    }
    
    /* Select PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8005db6:	4a0c      	ldr	r2, [pc, #48]	; (8005de8 <SetSysClockTo72+0xf8>)
 8005db8:	4b0b      	ldr	r3, [pc, #44]	; (8005de8 <SetSysClockTo72+0xf8>)
 8005dba:	685b      	ldr	r3, [r3, #4]
 8005dbc:	f023 0303 	bic.w	r3, r3, #3
 8005dc0:	6053      	str	r3, [r2, #4]
    RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;    
 8005dc2:	4a09      	ldr	r2, [pc, #36]	; (8005de8 <SetSysClockTo72+0xf8>)
 8005dc4:	4b08      	ldr	r3, [pc, #32]	; (8005de8 <SetSysClockTo72+0xf8>)
 8005dc6:	685b      	ldr	r3, [r3, #4]
 8005dc8:	f043 0302 	orr.w	r3, r3, #2
 8005dcc:	6053      	str	r3, [r2, #4]

    /* Wait till PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)0x08)
 8005dce:	bf00      	nop
 8005dd0:	4b05      	ldr	r3, [pc, #20]	; (8005de8 <SetSysClockTo72+0xf8>)
 8005dd2:	685b      	ldr	r3, [r3, #4]
 8005dd4:	f003 030c 	and.w	r3, r3, #12
 8005dd8:	2b08      	cmp	r3, #8
 8005dda:	d1f9      	bne.n	8005dd0 <SetSysClockTo72+0xe0>
  }
  else
  { /* If HSE fails to start-up, the application will have wrong clock 
         configuration. User can add here some code to deal with this error */
  }
}
 8005ddc:	bf00      	nop
 8005dde:	370c      	adds	r7, #12
 8005de0:	46bd      	mov	sp, r7
 8005de2:	bc80      	pop	{r7}
 8005de4:	4770      	bx	lr
 8005de6:	bf00      	nop
 8005de8:	40021000 	.word	0x40021000
 8005dec:	40022000 	.word	0x40022000

08005df0 <atoi>:
 8005df0:	220a      	movs	r2, #10
 8005df2:	2100      	movs	r1, #0
 8005df4:	f000 b938 	b.w	8006068 <strtol>

08005df8 <__libc_init_array>:
 8005df8:	4b0e      	ldr	r3, [pc, #56]	; (8005e34 <__libc_init_array+0x3c>)
 8005dfa:	b570      	push	{r4, r5, r6, lr}
 8005dfc:	461e      	mov	r6, r3
 8005dfe:	4c0e      	ldr	r4, [pc, #56]	; (8005e38 <__libc_init_array+0x40>)
 8005e00:	2500      	movs	r5, #0
 8005e02:	1ae4      	subs	r4, r4, r3
 8005e04:	10a4      	asrs	r4, r4, #2
 8005e06:	42a5      	cmp	r5, r4
 8005e08:	d004      	beq.n	8005e14 <__libc_init_array+0x1c>
 8005e0a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005e0e:	4798      	blx	r3
 8005e10:	3501      	adds	r5, #1
 8005e12:	e7f8      	b.n	8005e06 <__libc_init_array+0xe>
 8005e14:	f001 fa12 	bl	800723c <_init>
 8005e18:	4b08      	ldr	r3, [pc, #32]	; (8005e3c <__libc_init_array+0x44>)
 8005e1a:	4c09      	ldr	r4, [pc, #36]	; (8005e40 <__libc_init_array+0x48>)
 8005e1c:	461e      	mov	r6, r3
 8005e1e:	1ae4      	subs	r4, r4, r3
 8005e20:	10a4      	asrs	r4, r4, #2
 8005e22:	2500      	movs	r5, #0
 8005e24:	42a5      	cmp	r5, r4
 8005e26:	d004      	beq.n	8005e32 <__libc_init_array+0x3a>
 8005e28:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005e2c:	4798      	blx	r3
 8005e2e:	3501      	adds	r5, #1
 8005e30:	e7f8      	b.n	8005e24 <__libc_init_array+0x2c>
 8005e32:	bd70      	pop	{r4, r5, r6, pc}
 8005e34:	080076a8 	.word	0x080076a8
 8005e38:	080076a8 	.word	0x080076a8
 8005e3c:	080076a8 	.word	0x080076a8
 8005e40:	080076ac 	.word	0x080076ac

08005e44 <__itoa>:
 8005e44:	1e93      	subs	r3, r2, #2
 8005e46:	2b22      	cmp	r3, #34	; 0x22
 8005e48:	b510      	push	{r4, lr}
 8005e4a:	460c      	mov	r4, r1
 8005e4c:	d902      	bls.n	8005e54 <__itoa+0x10>
 8005e4e:	2000      	movs	r0, #0
 8005e50:	7008      	strb	r0, [r1, #0]
 8005e52:	bd10      	pop	{r4, pc}
 8005e54:	2a0a      	cmp	r2, #10
 8005e56:	d106      	bne.n	8005e66 <__itoa+0x22>
 8005e58:	2800      	cmp	r0, #0
 8005e5a:	da04      	bge.n	8005e66 <__itoa+0x22>
 8005e5c:	232d      	movs	r3, #45	; 0x2d
 8005e5e:	700b      	strb	r3, [r1, #0]
 8005e60:	4240      	negs	r0, r0
 8005e62:	2101      	movs	r1, #1
 8005e64:	e000      	b.n	8005e68 <__itoa+0x24>
 8005e66:	2100      	movs	r1, #0
 8005e68:	4421      	add	r1, r4
 8005e6a:	f000 f907 	bl	800607c <__utoa>
 8005e6e:	4620      	mov	r0, r4
 8005e70:	bd10      	pop	{r4, pc}

08005e72 <itoa>:
 8005e72:	f7ff bfe7 	b.w	8005e44 <__itoa>
	...

08005e78 <srand>:
 8005e78:	b538      	push	{r3, r4, r5, lr}
 8005e7a:	4b12      	ldr	r3, [pc, #72]	; (8005ec4 <srand+0x4c>)
 8005e7c:	4605      	mov	r5, r0
 8005e7e:	681c      	ldr	r4, [r3, #0]
 8005e80:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005e82:	b9d3      	cbnz	r3, 8005eba <srand+0x42>
 8005e84:	2018      	movs	r0, #24
 8005e86:	f000 f935 	bl	80060f4 <malloc>
 8005e8a:	f243 330e 	movw	r3, #13070	; 0x330e
 8005e8e:	63a0      	str	r0, [r4, #56]	; 0x38
 8005e90:	8003      	strh	r3, [r0, #0]
 8005e92:	f64a 33cd 	movw	r3, #43981	; 0xabcd
 8005e96:	8043      	strh	r3, [r0, #2]
 8005e98:	f241 2334 	movw	r3, #4660	; 0x1234
 8005e9c:	8083      	strh	r3, [r0, #4]
 8005e9e:	f24e 636d 	movw	r3, #58989	; 0xe66d
 8005ea2:	80c3      	strh	r3, [r0, #6]
 8005ea4:	f64d 63ec 	movw	r3, #57068	; 0xdeec
 8005ea8:	8103      	strh	r3, [r0, #8]
 8005eaa:	2305      	movs	r3, #5
 8005eac:	8143      	strh	r3, [r0, #10]
 8005eae:	230b      	movs	r3, #11
 8005eb0:	8183      	strh	r3, [r0, #12]
 8005eb2:	2201      	movs	r2, #1
 8005eb4:	2300      	movs	r3, #0
 8005eb6:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8005eba:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005ebc:	2200      	movs	r2, #0
 8005ebe:	611d      	str	r5, [r3, #16]
 8005ec0:	615a      	str	r2, [r3, #20]
 8005ec2:	bd38      	pop	{r3, r4, r5, pc}
 8005ec4:	20000078 	.word	0x20000078

08005ec8 <rand>:
 8005ec8:	4b19      	ldr	r3, [pc, #100]	; (8005f30 <rand+0x68>)
 8005eca:	b510      	push	{r4, lr}
 8005ecc:	681c      	ldr	r4, [r3, #0]
 8005ece:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005ed0:	b9d3      	cbnz	r3, 8005f08 <rand+0x40>
 8005ed2:	2018      	movs	r0, #24
 8005ed4:	f000 f90e 	bl	80060f4 <malloc>
 8005ed8:	f243 330e 	movw	r3, #13070	; 0x330e
 8005edc:	63a0      	str	r0, [r4, #56]	; 0x38
 8005ede:	8003      	strh	r3, [r0, #0]
 8005ee0:	f64a 33cd 	movw	r3, #43981	; 0xabcd
 8005ee4:	8043      	strh	r3, [r0, #2]
 8005ee6:	f241 2334 	movw	r3, #4660	; 0x1234
 8005eea:	8083      	strh	r3, [r0, #4]
 8005eec:	f24e 636d 	movw	r3, #58989	; 0xe66d
 8005ef0:	80c3      	strh	r3, [r0, #6]
 8005ef2:	f64d 63ec 	movw	r3, #57068	; 0xdeec
 8005ef6:	8103      	strh	r3, [r0, #8]
 8005ef8:	2305      	movs	r3, #5
 8005efa:	8143      	strh	r3, [r0, #10]
 8005efc:	230b      	movs	r3, #11
 8005efe:	8183      	strh	r3, [r0, #12]
 8005f00:	2201      	movs	r2, #1
 8005f02:	2300      	movs	r3, #0
 8005f04:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8005f08:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8005f0a:	4c0a      	ldr	r4, [pc, #40]	; (8005f34 <rand+0x6c>)
 8005f0c:	690b      	ldr	r3, [r1, #16]
 8005f0e:	6948      	ldr	r0, [r1, #20]
 8005f10:	435c      	muls	r4, r3
 8005f12:	4a09      	ldr	r2, [pc, #36]	; (8005f38 <rand+0x70>)
 8005f14:	fb02 4000 	mla	r0, r2, r0, r4
 8005f18:	fba3 2302 	umull	r2, r3, r3, r2
 8005f1c:	3201      	adds	r2, #1
 8005f1e:	4403      	add	r3, r0
 8005f20:	f143 0300 	adc.w	r3, r3, #0
 8005f24:	e9c1 2304 	strd	r2, r3, [r1, #16]
 8005f28:	f023 4000 	bic.w	r0, r3, #2147483648	; 0x80000000
 8005f2c:	bd10      	pop	{r4, pc}
 8005f2e:	bf00      	nop
 8005f30:	20000078 	.word	0x20000078
 8005f34:	5851f42d 	.word	0x5851f42d
 8005f38:	4c957f2d 	.word	0x4c957f2d

08005f3c <strcat>:
 8005f3c:	4602      	mov	r2, r0
 8005f3e:	b510      	push	{r4, lr}
 8005f40:	4613      	mov	r3, r2
 8005f42:	781c      	ldrb	r4, [r3, #0]
 8005f44:	3201      	adds	r2, #1
 8005f46:	2c00      	cmp	r4, #0
 8005f48:	d1fa      	bne.n	8005f40 <strcat+0x4>
 8005f4a:	3b01      	subs	r3, #1
 8005f4c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005f50:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005f54:	2a00      	cmp	r2, #0
 8005f56:	d1f9      	bne.n	8005f4c <strcat+0x10>
 8005f58:	bd10      	pop	{r4, pc}
	...

08005f5c <_strtol_r>:
 8005f5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005f60:	460f      	mov	r7, r1
 8005f62:	4680      	mov	r8, r0
 8005f64:	483f      	ldr	r0, [pc, #252]	; (8006064 <_strtol_r+0x108>)
 8005f66:	f8d0 9000 	ldr.w	r9, [r0]
 8005f6a:	463d      	mov	r5, r7
 8005f6c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005f70:	eb09 0004 	add.w	r0, r9, r4
 8005f74:	7840      	ldrb	r0, [r0, #1]
 8005f76:	f000 0008 	and.w	r0, r0, #8
 8005f7a:	f000 06ff 	and.w	r6, r0, #255	; 0xff
 8005f7e:	b108      	cbz	r0, 8005f84 <_strtol_r+0x28>
 8005f80:	462f      	mov	r7, r5
 8005f82:	e7f2      	b.n	8005f6a <_strtol_r+0xe>
 8005f84:	2c2d      	cmp	r4, #45	; 0x2d
 8005f86:	d103      	bne.n	8005f90 <_strtol_r+0x34>
 8005f88:	1cbd      	adds	r5, r7, #2
 8005f8a:	787c      	ldrb	r4, [r7, #1]
 8005f8c:	2601      	movs	r6, #1
 8005f8e:	e003      	b.n	8005f98 <_strtol_r+0x3c>
 8005f90:	2c2b      	cmp	r4, #43	; 0x2b
 8005f92:	bf04      	itt	eq
 8005f94:	787c      	ldrbeq	r4, [r7, #1]
 8005f96:	1cbd      	addeq	r5, r7, #2
 8005f98:	b113      	cbz	r3, 8005fa0 <_strtol_r+0x44>
 8005f9a:	2b10      	cmp	r3, #16
 8005f9c:	d10a      	bne.n	8005fb4 <_strtol_r+0x58>
 8005f9e:	e05b      	b.n	8006058 <_strtol_r+0xfc>
 8005fa0:	2c30      	cmp	r4, #48	; 0x30
 8005fa2:	d157      	bne.n	8006054 <_strtol_r+0xf8>
 8005fa4:	7828      	ldrb	r0, [r5, #0]
 8005fa6:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8005faa:	2858      	cmp	r0, #88	; 0x58
 8005fac:	d14d      	bne.n	800604a <_strtol_r+0xee>
 8005fae:	786c      	ldrb	r4, [r5, #1]
 8005fb0:	2310      	movs	r3, #16
 8005fb2:	3502      	adds	r5, #2
 8005fb4:	2e00      	cmp	r6, #0
 8005fb6:	bf14      	ite	ne
 8005fb8:	f04f 4c00 	movne.w	ip, #2147483648	; 0x80000000
 8005fbc:	f06f 4c00 	mvneq.w	ip, #2147483648	; 0x80000000
 8005fc0:	fbbc faf3 	udiv	sl, ip, r3
 8005fc4:	2700      	movs	r7, #0
 8005fc6:	4638      	mov	r0, r7
 8005fc8:	fb03 cc1a 	mls	ip, r3, sl, ip
 8005fcc:	eb09 0e04 	add.w	lr, r9, r4
 8005fd0:	f89e e001 	ldrb.w	lr, [lr, #1]
 8005fd4:	f01e 0f04 	tst.w	lr, #4
 8005fd8:	d001      	beq.n	8005fde <_strtol_r+0x82>
 8005fda:	3c30      	subs	r4, #48	; 0x30
 8005fdc:	e00b      	b.n	8005ff6 <_strtol_r+0x9a>
 8005fde:	f01e 0e03 	ands.w	lr, lr, #3
 8005fe2:	d01b      	beq.n	800601c <_strtol_r+0xc0>
 8005fe4:	f1be 0f01 	cmp.w	lr, #1
 8005fe8:	bf0c      	ite	eq
 8005fea:	f04f 0e37 	moveq.w	lr, #55	; 0x37
 8005fee:	f04f 0e57 	movne.w	lr, #87	; 0x57
 8005ff2:	ebce 0404 	rsb	r4, lr, r4
 8005ff6:	42a3      	cmp	r3, r4
 8005ff8:	dd10      	ble.n	800601c <_strtol_r+0xc0>
 8005ffa:	f1b7 3fff 	cmp.w	r7, #4294967295
 8005ffe:	d00a      	beq.n	8006016 <_strtol_r+0xba>
 8006000:	4550      	cmp	r0, sl
 8006002:	d806      	bhi.n	8006012 <_strtol_r+0xb6>
 8006004:	d101      	bne.n	800600a <_strtol_r+0xae>
 8006006:	4564      	cmp	r4, ip
 8006008:	dc03      	bgt.n	8006012 <_strtol_r+0xb6>
 800600a:	fb03 4000 	mla	r0, r3, r0, r4
 800600e:	2701      	movs	r7, #1
 8006010:	e001      	b.n	8006016 <_strtol_r+0xba>
 8006012:	f04f 37ff 	mov.w	r7, #4294967295
 8006016:	f815 4b01 	ldrb.w	r4, [r5], #1
 800601a:	e7d7      	b.n	8005fcc <_strtol_r+0x70>
 800601c:	1c7b      	adds	r3, r7, #1
 800601e:	d10c      	bne.n	800603a <_strtol_r+0xde>
 8006020:	2e00      	cmp	r6, #0
 8006022:	f04f 0322 	mov.w	r3, #34	; 0x22
 8006026:	bf14      	ite	ne
 8006028:	f04f 4000 	movne.w	r0, #2147483648	; 0x80000000
 800602c:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8006030:	f8c8 3000 	str.w	r3, [r8]
 8006034:	b92a      	cbnz	r2, 8006042 <_strtol_r+0xe6>
 8006036:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800603a:	b106      	cbz	r6, 800603e <_strtol_r+0xe2>
 800603c:	4240      	negs	r0, r0
 800603e:	b172      	cbz	r2, 800605e <_strtol_r+0x102>
 8006040:	b107      	cbz	r7, 8006044 <_strtol_r+0xe8>
 8006042:	1e69      	subs	r1, r5, #1
 8006044:	6011      	str	r1, [r2, #0]
 8006046:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800604a:	2430      	movs	r4, #48	; 0x30
 800604c:	2b00      	cmp	r3, #0
 800604e:	d1b1      	bne.n	8005fb4 <_strtol_r+0x58>
 8006050:	2308      	movs	r3, #8
 8006052:	e7af      	b.n	8005fb4 <_strtol_r+0x58>
 8006054:	230a      	movs	r3, #10
 8006056:	e7ad      	b.n	8005fb4 <_strtol_r+0x58>
 8006058:	2c30      	cmp	r4, #48	; 0x30
 800605a:	d0a3      	beq.n	8005fa4 <_strtol_r+0x48>
 800605c:	e7aa      	b.n	8005fb4 <_strtol_r+0x58>
 800605e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006062:	bf00      	nop
 8006064:	20000014 	.word	0x20000014

08006068 <strtol>:
 8006068:	4613      	mov	r3, r2
 800606a:	460a      	mov	r2, r1
 800606c:	4601      	mov	r1, r0
 800606e:	4802      	ldr	r0, [pc, #8]	; (8006078 <strtol+0x10>)
 8006070:	6800      	ldr	r0, [r0, #0]
 8006072:	f7ff bf73 	b.w	8005f5c <_strtol_r>
 8006076:	bf00      	nop
 8006078:	20000078 	.word	0x20000078

0800607c <__utoa>:
 800607c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800607e:	b08b      	sub	sp, #44	; 0x2c
 8006080:	4603      	mov	r3, r0
 8006082:	460f      	mov	r7, r1
 8006084:	466d      	mov	r5, sp
 8006086:	4c1a      	ldr	r4, [pc, #104]	; (80060f0 <__utoa+0x74>)
 8006088:	f104 0e20 	add.w	lr, r4, #32
 800608c:	462e      	mov	r6, r5
 800608e:	6820      	ldr	r0, [r4, #0]
 8006090:	6861      	ldr	r1, [r4, #4]
 8006092:	3408      	adds	r4, #8
 8006094:	c603      	stmia	r6!, {r0, r1}
 8006096:	4574      	cmp	r4, lr
 8006098:	4635      	mov	r5, r6
 800609a:	d1f7      	bne.n	800608c <__utoa+0x10>
 800609c:	7921      	ldrb	r1, [r4, #4]
 800609e:	6820      	ldr	r0, [r4, #0]
 80060a0:	7131      	strb	r1, [r6, #4]
 80060a2:	1e91      	subs	r1, r2, #2
 80060a4:	2922      	cmp	r1, #34	; 0x22
 80060a6:	6030      	str	r0, [r6, #0]
 80060a8:	f04f 0000 	mov.w	r0, #0
 80060ac:	d901      	bls.n	80060b2 <__utoa+0x36>
 80060ae:	7038      	strb	r0, [r7, #0]
 80060b0:	e01c      	b.n	80060ec <__utoa+0x70>
 80060b2:	1e7d      	subs	r5, r7, #1
 80060b4:	fbb3 f4f2 	udiv	r4, r3, r2
 80060b8:	fb02 3314 	mls	r3, r2, r4, r3
 80060bc:	ae0a      	add	r6, sp, #40	; 0x28
 80060be:	4433      	add	r3, r6
 80060c0:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80060c4:	1c41      	adds	r1, r0, #1
 80060c6:	f805 3f01 	strb.w	r3, [r5, #1]!
 80060ca:	4623      	mov	r3, r4
 80060cc:	b10c      	cbz	r4, 80060d2 <__utoa+0x56>
 80060ce:	4608      	mov	r0, r1
 80060d0:	e7f0      	b.n	80060b4 <__utoa+0x38>
 80060d2:	547c      	strb	r4, [r7, r1]
 80060d4:	183a      	adds	r2, r7, r0
 80060d6:	1ac1      	subs	r1, r0, r3
 80060d8:	428b      	cmp	r3, r1
 80060da:	da06      	bge.n	80060ea <__utoa+0x6e>
 80060dc:	5cf9      	ldrb	r1, [r7, r3]
 80060de:	7814      	ldrb	r4, [r2, #0]
 80060e0:	54fc      	strb	r4, [r7, r3]
 80060e2:	f802 1901 	strb.w	r1, [r2], #-1
 80060e6:	3301      	adds	r3, #1
 80060e8:	e7f5      	b.n	80060d6 <__utoa+0x5a>
 80060ea:	4638      	mov	r0, r7
 80060ec:	b00b      	add	sp, #44	; 0x2c
 80060ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80060f0:	08007539 	.word	0x08007539

080060f4 <malloc>:
 80060f4:	4b02      	ldr	r3, [pc, #8]	; (8006100 <malloc+0xc>)
 80060f6:	4601      	mov	r1, r0
 80060f8:	6818      	ldr	r0, [r3, #0]
 80060fa:	f000 b803 	b.w	8006104 <_malloc_r>
 80060fe:	bf00      	nop
 8006100:	20000078 	.word	0x20000078

08006104 <_malloc_r>:
 8006104:	b570      	push	{r4, r5, r6, lr}
 8006106:	1ccd      	adds	r5, r1, #3
 8006108:	f025 0503 	bic.w	r5, r5, #3
 800610c:	3508      	adds	r5, #8
 800610e:	2d0c      	cmp	r5, #12
 8006110:	bf38      	it	cc
 8006112:	250c      	movcc	r5, #12
 8006114:	2d00      	cmp	r5, #0
 8006116:	4606      	mov	r6, r0
 8006118:	db01      	blt.n	800611e <_malloc_r+0x1a>
 800611a:	42a9      	cmp	r1, r5
 800611c:	d902      	bls.n	8006124 <_malloc_r+0x20>
 800611e:	230c      	movs	r3, #12
 8006120:	6033      	str	r3, [r6, #0]
 8006122:	e046      	b.n	80061b2 <_malloc_r+0xae>
 8006124:	f000 f85c 	bl	80061e0 <__malloc_lock>
 8006128:	4b23      	ldr	r3, [pc, #140]	; (80061b8 <_malloc_r+0xb4>)
 800612a:	681c      	ldr	r4, [r3, #0]
 800612c:	461a      	mov	r2, r3
 800612e:	4621      	mov	r1, r4
 8006130:	b1a1      	cbz	r1, 800615c <_malloc_r+0x58>
 8006132:	680b      	ldr	r3, [r1, #0]
 8006134:	1b5b      	subs	r3, r3, r5
 8006136:	d40e      	bmi.n	8006156 <_malloc_r+0x52>
 8006138:	2b0b      	cmp	r3, #11
 800613a:	d903      	bls.n	8006144 <_malloc_r+0x40>
 800613c:	600b      	str	r3, [r1, #0]
 800613e:	18cc      	adds	r4, r1, r3
 8006140:	50cd      	str	r5, [r1, r3]
 8006142:	e01e      	b.n	8006182 <_malloc_r+0x7e>
 8006144:	428c      	cmp	r4, r1
 8006146:	bf0b      	itete	eq
 8006148:	6863      	ldreq	r3, [r4, #4]
 800614a:	684b      	ldrne	r3, [r1, #4]
 800614c:	6013      	streq	r3, [r2, #0]
 800614e:	6063      	strne	r3, [r4, #4]
 8006150:	bf18      	it	ne
 8006152:	460c      	movne	r4, r1
 8006154:	e015      	b.n	8006182 <_malloc_r+0x7e>
 8006156:	460c      	mov	r4, r1
 8006158:	6849      	ldr	r1, [r1, #4]
 800615a:	e7e9      	b.n	8006130 <_malloc_r+0x2c>
 800615c:	4c17      	ldr	r4, [pc, #92]	; (80061bc <_malloc_r+0xb8>)
 800615e:	6823      	ldr	r3, [r4, #0]
 8006160:	b91b      	cbnz	r3, 800616a <_malloc_r+0x66>
 8006162:	4630      	mov	r0, r6
 8006164:	f000 f82c 	bl	80061c0 <_sbrk_r>
 8006168:	6020      	str	r0, [r4, #0]
 800616a:	4629      	mov	r1, r5
 800616c:	4630      	mov	r0, r6
 800616e:	f000 f827 	bl	80061c0 <_sbrk_r>
 8006172:	1c43      	adds	r3, r0, #1
 8006174:	d018      	beq.n	80061a8 <_malloc_r+0xa4>
 8006176:	1cc4      	adds	r4, r0, #3
 8006178:	f024 0403 	bic.w	r4, r4, #3
 800617c:	42a0      	cmp	r0, r4
 800617e:	d10d      	bne.n	800619c <_malloc_r+0x98>
 8006180:	6025      	str	r5, [r4, #0]
 8006182:	4630      	mov	r0, r6
 8006184:	f000 f82d 	bl	80061e2 <__malloc_unlock>
 8006188:	f104 000b 	add.w	r0, r4, #11
 800618c:	1d23      	adds	r3, r4, #4
 800618e:	f020 0007 	bic.w	r0, r0, #7
 8006192:	1ac3      	subs	r3, r0, r3
 8006194:	d00e      	beq.n	80061b4 <_malloc_r+0xb0>
 8006196:	425a      	negs	r2, r3
 8006198:	50e2      	str	r2, [r4, r3]
 800619a:	bd70      	pop	{r4, r5, r6, pc}
 800619c:	1a21      	subs	r1, r4, r0
 800619e:	4630      	mov	r0, r6
 80061a0:	f000 f80e 	bl	80061c0 <_sbrk_r>
 80061a4:	3001      	adds	r0, #1
 80061a6:	d1eb      	bne.n	8006180 <_malloc_r+0x7c>
 80061a8:	230c      	movs	r3, #12
 80061aa:	6033      	str	r3, [r6, #0]
 80061ac:	4630      	mov	r0, r6
 80061ae:	f000 f818 	bl	80061e2 <__malloc_unlock>
 80061b2:	2000      	movs	r0, #0
 80061b4:	bd70      	pop	{r4, r5, r6, pc}
 80061b6:	bf00      	nop
 80061b8:	200000a4 	.word	0x200000a4
 80061bc:	200000a0 	.word	0x200000a0

080061c0 <_sbrk_r>:
 80061c0:	b538      	push	{r3, r4, r5, lr}
 80061c2:	4c06      	ldr	r4, [pc, #24]	; (80061dc <_sbrk_r+0x1c>)
 80061c4:	2300      	movs	r3, #0
 80061c6:	4605      	mov	r5, r0
 80061c8:	4608      	mov	r0, r1
 80061ca:	6023      	str	r3, [r4, #0]
 80061cc:	f001 f828 	bl	8007220 <_sbrk>
 80061d0:	1c43      	adds	r3, r0, #1
 80061d2:	d102      	bne.n	80061da <_sbrk_r+0x1a>
 80061d4:	6823      	ldr	r3, [r4, #0]
 80061d6:	b103      	cbz	r3, 80061da <_sbrk_r+0x1a>
 80061d8:	602b      	str	r3, [r5, #0]
 80061da:	bd38      	pop	{r3, r4, r5, pc}
 80061dc:	20000178 	.word	0x20000178

080061e0 <__malloc_lock>:
 80061e0:	4770      	bx	lr

080061e2 <__malloc_unlock>:
 80061e2:	4770      	bx	lr

080061e4 <pow>:
 80061e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80061e8:	b08f      	sub	sp, #60	; 0x3c
 80061ea:	461d      	mov	r5, r3
 80061ec:	4682      	mov	sl, r0
 80061ee:	468b      	mov	fp, r1
 80061f0:	4614      	mov	r4, r2
 80061f2:	f000 f95d 	bl	80064b0 <__ieee754_pow>
 80061f6:	f8df 92b4 	ldr.w	r9, [pc, #692]	; 80064ac <pow+0x2c8>
 80061fa:	e9cd 0100 	strd	r0, r1, [sp]
 80061fe:	f999 3000 	ldrsb.w	r3, [r9]
 8006202:	46c8      	mov	r8, r9
 8006204:	9302      	str	r3, [sp, #8]
 8006206:	3301      	adds	r3, #1
 8006208:	f000 813d 	beq.w	8006486 <pow+0x2a2>
 800620c:	4622      	mov	r2, r4
 800620e:	462b      	mov	r3, r5
 8006210:	4620      	mov	r0, r4
 8006212:	4629      	mov	r1, r5
 8006214:	f7fa fc00 	bl	8000a18 <__aeabi_dcmpun>
 8006218:	4606      	mov	r6, r0
 800621a:	2800      	cmp	r0, #0
 800621c:	f040 8133 	bne.w	8006486 <pow+0x2a2>
 8006220:	4652      	mov	r2, sl
 8006222:	465b      	mov	r3, fp
 8006224:	4650      	mov	r0, sl
 8006226:	4659      	mov	r1, fp
 8006228:	f7fa fbf6 	bl	8000a18 <__aeabi_dcmpun>
 800622c:	9003      	str	r0, [sp, #12]
 800622e:	b1d0      	cbz	r0, 8006266 <pow+0x82>
 8006230:	2200      	movs	r2, #0
 8006232:	2300      	movs	r3, #0
 8006234:	4620      	mov	r0, r4
 8006236:	4629      	mov	r1, r5
 8006238:	f7fa fbbc 	bl	80009b4 <__aeabi_dcmpeq>
 800623c:	2800      	cmp	r0, #0
 800623e:	f000 8122 	beq.w	8006486 <pow+0x2a2>
 8006242:	2301      	movs	r3, #1
 8006244:	9304      	str	r3, [sp, #16]
 8006246:	4b92      	ldr	r3, [pc, #584]	; (8006490 <pow+0x2ac>)
 8006248:	2200      	movs	r2, #0
 800624a:	9305      	str	r3, [sp, #20]
 800624c:	4b91      	ldr	r3, [pc, #580]	; (8006494 <pow+0x2b0>)
 800624e:	960c      	str	r6, [sp, #48]	; 0x30
 8006250:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8006254:	9b02      	ldr	r3, [sp, #8]
 8006256:	e9cd ab06 	strd	sl, fp, [sp, #24]
 800625a:	2b02      	cmp	r3, #2
 800625c:	e9cd 4508 	strd	r4, r5, [sp, #32]
 8006260:	f040 8084 	bne.w	800636c <pow+0x188>
 8006264:	e10c      	b.n	8006480 <pow+0x29c>
 8006266:	2600      	movs	r6, #0
 8006268:	2700      	movs	r7, #0
 800626a:	4632      	mov	r2, r6
 800626c:	463b      	mov	r3, r7
 800626e:	4650      	mov	r0, sl
 8006270:	4659      	mov	r1, fp
 8006272:	f7fa fb9f 	bl	80009b4 <__aeabi_dcmpeq>
 8006276:	2800      	cmp	r0, #0
 8006278:	d03f      	beq.n	80062fa <pow+0x116>
 800627a:	4632      	mov	r2, r6
 800627c:	463b      	mov	r3, r7
 800627e:	4620      	mov	r0, r4
 8006280:	4629      	mov	r1, r5
 8006282:	f7fa fb97 	bl	80009b4 <__aeabi_dcmpeq>
 8006286:	4680      	mov	r8, r0
 8006288:	b198      	cbz	r0, 80062b2 <pow+0xce>
 800628a:	2301      	movs	r3, #1
 800628c:	9304      	str	r3, [sp, #16]
 800628e:	4b80      	ldr	r3, [pc, #512]	; (8006490 <pow+0x2ac>)
 8006290:	e9cd ab06 	strd	sl, fp, [sp, #24]
 8006294:	9305      	str	r3, [sp, #20]
 8006296:	9b03      	ldr	r3, [sp, #12]
 8006298:	e9cd 4508 	strd	r4, r5, [sp, #32]
 800629c:	930c      	str	r3, [sp, #48]	; 0x30
 800629e:	9b02      	ldr	r3, [sp, #8]
 80062a0:	e9cd 670a 	strd	r6, r7, [sp, #40]	; 0x28
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d061      	beq.n	800636c <pow+0x188>
 80062a8:	4b7a      	ldr	r3, [pc, #488]	; (8006494 <pow+0x2b0>)
 80062aa:	2200      	movs	r2, #0
 80062ac:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80062b0:	e0e0      	b.n	8006474 <pow+0x290>
 80062b2:	4620      	mov	r0, r4
 80062b4:	4629      	mov	r1, r5
 80062b6:	f000 fe9c 	bl	8006ff2 <finite>
 80062ba:	2800      	cmp	r0, #0
 80062bc:	f000 80e3 	beq.w	8006486 <pow+0x2a2>
 80062c0:	4632      	mov	r2, r6
 80062c2:	463b      	mov	r3, r7
 80062c4:	4620      	mov	r0, r4
 80062c6:	4629      	mov	r1, r5
 80062c8:	f7fa fb7e 	bl	80009c8 <__aeabi_dcmplt>
 80062cc:	2800      	cmp	r0, #0
 80062ce:	f000 80da 	beq.w	8006486 <pow+0x2a2>
 80062d2:	2301      	movs	r3, #1
 80062d4:	9304      	str	r3, [sp, #16]
 80062d6:	4b6e      	ldr	r3, [pc, #440]	; (8006490 <pow+0x2ac>)
 80062d8:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30
 80062dc:	9305      	str	r3, [sp, #20]
 80062de:	f999 3000 	ldrsb.w	r3, [r9]
 80062e2:	e9cd ab06 	strd	sl, fp, [sp, #24]
 80062e6:	e9cd 4508 	strd	r4, r5, [sp, #32]
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d030      	beq.n	8006350 <pow+0x16c>
 80062ee:	496a      	ldr	r1, [pc, #424]	; (8006498 <pow+0x2b4>)
 80062f0:	2000      	movs	r0, #0
 80062f2:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80062f6:	2b02      	cmp	r3, #2
 80062f8:	e037      	b.n	800636a <pow+0x186>
 80062fa:	e9dd 0100 	ldrd	r0, r1, [sp]
 80062fe:	f000 fe78 	bl	8006ff2 <finite>
 8006302:	9002      	str	r0, [sp, #8]
 8006304:	2800      	cmp	r0, #0
 8006306:	f040 808a 	bne.w	800641e <pow+0x23a>
 800630a:	4650      	mov	r0, sl
 800630c:	4659      	mov	r1, fp
 800630e:	f000 fe70 	bl	8006ff2 <finite>
 8006312:	2800      	cmp	r0, #0
 8006314:	f000 8083 	beq.w	800641e <pow+0x23a>
 8006318:	4620      	mov	r0, r4
 800631a:	4629      	mov	r1, r5
 800631c:	f000 fe69 	bl	8006ff2 <finite>
 8006320:	2800      	cmp	r0, #0
 8006322:	d07c      	beq.n	800641e <pow+0x23a>
 8006324:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006328:	4619      	mov	r1, r3
 800632a:	4610      	mov	r0, r2
 800632c:	f7fa fb74 	bl	8000a18 <__aeabi_dcmpun>
 8006330:	f999 9000 	ldrsb.w	r9, [r9]
 8006334:	4b56      	ldr	r3, [pc, #344]	; (8006490 <pow+0x2ac>)
 8006336:	b310      	cbz	r0, 800637e <pow+0x19a>
 8006338:	9305      	str	r3, [sp, #20]
 800633a:	9b02      	ldr	r3, [sp, #8]
 800633c:	2201      	movs	r2, #1
 800633e:	9204      	str	r2, [sp, #16]
 8006340:	930c      	str	r3, [sp, #48]	; 0x30
 8006342:	e9cd ab06 	strd	sl, fp, [sp, #24]
 8006346:	e9cd 4508 	strd	r4, r5, [sp, #32]
 800634a:	f1b9 0f00 	cmp.w	r9, #0
 800634e:	d102      	bne.n	8006356 <pow+0x172>
 8006350:	e9cd 670a 	strd	r6, r7, [sp, #40]	; 0x28
 8006354:	e00a      	b.n	800636c <pow+0x188>
 8006356:	4632      	mov	r2, r6
 8006358:	463b      	mov	r3, r7
 800635a:	4630      	mov	r0, r6
 800635c:	4639      	mov	r1, r7
 800635e:	f7fa f9eb 	bl	8000738 <__aeabi_ddiv>
 8006362:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8006366:	f1b9 0f02 	cmp.w	r9, #2
 800636a:	d004      	beq.n	8006376 <pow+0x192>
 800636c:	a804      	add	r0, sp, #16
 800636e:	f000 fe46 	bl	8006ffe <matherr>
 8006372:	2800      	cmp	r0, #0
 8006374:	d17e      	bne.n	8006474 <pow+0x290>
 8006376:	f000 ff4d 	bl	8007214 <__errno>
 800637a:	2321      	movs	r3, #33	; 0x21
 800637c:	e079      	b.n	8006472 <pow+0x28e>
 800637e:	2203      	movs	r2, #3
 8006380:	9204      	str	r2, [sp, #16]
 8006382:	9305      	str	r3, [sp, #20]
 8006384:	900c      	str	r0, [sp, #48]	; 0x30
 8006386:	e9cd ab06 	strd	sl, fp, [sp, #24]
 800638a:	e9cd 4508 	strd	r4, r5, [sp, #32]
 800638e:	f1b9 0f00 	cmp.w	r9, #0
 8006392:	d122      	bne.n	80063da <pow+0x1f6>
 8006394:	4b41      	ldr	r3, [pc, #260]	; (800649c <pow+0x2b8>)
 8006396:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 800639a:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800639e:	4650      	mov	r0, sl
 80063a0:	4632      	mov	r2, r6
 80063a2:	463b      	mov	r3, r7
 80063a4:	4659      	mov	r1, fp
 80063a6:	f7fa fb0f 	bl	80009c8 <__aeabi_dcmplt>
 80063aa:	2800      	cmp	r0, #0
 80063ac:	d05a      	beq.n	8006464 <pow+0x280>
 80063ae:	2200      	movs	r2, #0
 80063b0:	4b3b      	ldr	r3, [pc, #236]	; (80064a0 <pow+0x2bc>)
 80063b2:	4620      	mov	r0, r4
 80063b4:	4629      	mov	r1, r5
 80063b6:	f7fa f895 	bl	80004e4 <__aeabi_dmul>
 80063ba:	4604      	mov	r4, r0
 80063bc:	460d      	mov	r5, r1
 80063be:	f000 fe27 	bl	8007010 <rint>
 80063c2:	4602      	mov	r2, r0
 80063c4:	460b      	mov	r3, r1
 80063c6:	4620      	mov	r0, r4
 80063c8:	4629      	mov	r1, r5
 80063ca:	f7fa faf3 	bl	80009b4 <__aeabi_dcmpeq>
 80063ce:	2800      	cmp	r0, #0
 80063d0:	d144      	bne.n	800645c <pow+0x278>
 80063d2:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80063d6:	4b33      	ldr	r3, [pc, #204]	; (80064a4 <pow+0x2c0>)
 80063d8:	e01e      	b.n	8006418 <pow+0x234>
 80063da:	4b33      	ldr	r3, [pc, #204]	; (80064a8 <pow+0x2c4>)
 80063dc:	2200      	movs	r2, #0
 80063de:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80063e2:	4650      	mov	r0, sl
 80063e4:	4632      	mov	r2, r6
 80063e6:	463b      	mov	r3, r7
 80063e8:	4659      	mov	r1, fp
 80063ea:	f7fa faed 	bl	80009c8 <__aeabi_dcmplt>
 80063ee:	2800      	cmp	r0, #0
 80063f0:	d034      	beq.n	800645c <pow+0x278>
 80063f2:	2200      	movs	r2, #0
 80063f4:	4b2a      	ldr	r3, [pc, #168]	; (80064a0 <pow+0x2bc>)
 80063f6:	4620      	mov	r0, r4
 80063f8:	4629      	mov	r1, r5
 80063fa:	f7fa f873 	bl	80004e4 <__aeabi_dmul>
 80063fe:	4604      	mov	r4, r0
 8006400:	460d      	mov	r5, r1
 8006402:	f000 fe05 	bl	8007010 <rint>
 8006406:	4602      	mov	r2, r0
 8006408:	460b      	mov	r3, r1
 800640a:	4620      	mov	r0, r4
 800640c:	4629      	mov	r1, r5
 800640e:	f7fa fad1 	bl	80009b4 <__aeabi_dcmpeq>
 8006412:	bb18      	cbnz	r0, 800645c <pow+0x278>
 8006414:	4b20      	ldr	r3, [pc, #128]	; (8006498 <pow+0x2b4>)
 8006416:	2200      	movs	r2, #0
 8006418:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800641c:	e01e      	b.n	800645c <pow+0x278>
 800641e:	2600      	movs	r6, #0
 8006420:	2700      	movs	r7, #0
 8006422:	4632      	mov	r2, r6
 8006424:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006428:	463b      	mov	r3, r7
 800642a:	f7fa fac3 	bl	80009b4 <__aeabi_dcmpeq>
 800642e:	b350      	cbz	r0, 8006486 <pow+0x2a2>
 8006430:	4650      	mov	r0, sl
 8006432:	4659      	mov	r1, fp
 8006434:	f000 fddd 	bl	8006ff2 <finite>
 8006438:	b328      	cbz	r0, 8006486 <pow+0x2a2>
 800643a:	4620      	mov	r0, r4
 800643c:	4629      	mov	r1, r5
 800643e:	f000 fdd8 	bl	8006ff2 <finite>
 8006442:	b300      	cbz	r0, 8006486 <pow+0x2a2>
 8006444:	2304      	movs	r3, #4
 8006446:	9304      	str	r3, [sp, #16]
 8006448:	4b11      	ldr	r3, [pc, #68]	; (8006490 <pow+0x2ac>)
 800644a:	e9cd ab06 	strd	sl, fp, [sp, #24]
 800644e:	e9cd 4508 	strd	r4, r5, [sp, #32]
 8006452:	e9cd 670a 	strd	r6, r7, [sp, #40]	; 0x28
 8006456:	9305      	str	r3, [sp, #20]
 8006458:	2300      	movs	r3, #0
 800645a:	930c      	str	r3, [sp, #48]	; 0x30
 800645c:	f998 3000 	ldrsb.w	r3, [r8]
 8006460:	2b02      	cmp	r3, #2
 8006462:	d003      	beq.n	800646c <pow+0x288>
 8006464:	a804      	add	r0, sp, #16
 8006466:	f000 fdca 	bl	8006ffe <matherr>
 800646a:	b918      	cbnz	r0, 8006474 <pow+0x290>
 800646c:	f000 fed2 	bl	8007214 <__errno>
 8006470:	2322      	movs	r3, #34	; 0x22
 8006472:	6003      	str	r3, [r0, #0]
 8006474:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006476:	b11b      	cbz	r3, 8006480 <pow+0x29c>
 8006478:	f000 fecc 	bl	8007214 <__errno>
 800647c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800647e:	6003      	str	r3, [r0, #0]
 8006480:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8006484:	e001      	b.n	800648a <pow+0x2a6>
 8006486:	e9dd 0100 	ldrd	r0, r1, [sp]
 800648a:	b00f      	add	sp, #60	; 0x3c
 800648c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006490:	08007661 	.word	0x08007661
 8006494:	3ff00000 	.word	0x3ff00000
 8006498:	fff00000 	.word	0xfff00000
 800649c:	47efffff 	.word	0x47efffff
 80064a0:	3fe00000 	.word	0x3fe00000
 80064a4:	c7efffff 	.word	0xc7efffff
 80064a8:	7ff00000 	.word	0x7ff00000
 80064ac:	2000007c 	.word	0x2000007c

080064b0 <__ieee754_pow>:
 80064b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80064b4:	b091      	sub	sp, #68	; 0x44
 80064b6:	e9cd 2300 	strd	r2, r3, [sp]
 80064ba:	e89d 0208 	ldmia.w	sp, {r3, r9}
 80064be:	f029 4600 	bic.w	r6, r9, #2147483648	; 0x80000000
 80064c2:	4607      	mov	r7, r0
 80064c4:	4682      	mov	sl, r0
 80064c6:	ea56 0003 	orrs.w	r0, r6, r3
 80064ca:	460c      	mov	r4, r1
 80064cc:	4688      	mov	r8, r1
 80064ce:	f000 8496 	beq.w	8006dfe <__ieee754_pow+0x94e>
 80064d2:	4abd      	ldr	r2, [pc, #756]	; (80067c8 <__ieee754_pow+0x318>)
 80064d4:	f021 4500 	bic.w	r5, r1, #2147483648	; 0x80000000
 80064d8:	4295      	cmp	r5, r2
 80064da:	dc08      	bgt.n	80064ee <__ieee754_pow+0x3e>
 80064dc:	d102      	bne.n	80064e4 <__ieee754_pow+0x34>
 80064de:	b937      	cbnz	r7, 80064ee <__ieee754_pow+0x3e>
 80064e0:	f000 bc98 	b.w	8006e14 <__ieee754_pow+0x964>
 80064e4:	4296      	cmp	r6, r2
 80064e6:	dc02      	bgt.n	80064ee <__ieee754_pow+0x3e>
 80064e8:	4296      	cmp	r6, r2
 80064ea:	d10e      	bne.n	800650a <__ieee754_pow+0x5a>
 80064ec:	b16b      	cbz	r3, 800650a <__ieee754_pow+0x5a>
 80064ee:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 80064f2:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 80064f6:	ea55 000a 	orrs.w	r0, r5, sl
 80064fa:	f000 8480 	beq.w	8006dfe <__ieee754_pow+0x94e>
 80064fe:	48b3      	ldr	r0, [pc, #716]	; (80067cc <__ieee754_pow+0x31c>)
 8006500:	b011      	add	sp, #68	; 0x44
 8006502:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006506:	f000 bd7d 	b.w	8007004 <nan>
 800650a:	f1b8 0f00 	cmp.w	r8, #0
 800650e:	da2a      	bge.n	8006566 <__ieee754_pow+0xb6>
 8006510:	4aaf      	ldr	r2, [pc, #700]	; (80067d0 <__ieee754_pow+0x320>)
 8006512:	4296      	cmp	r6, r2
 8006514:	dc24      	bgt.n	8006560 <__ieee754_pow+0xb0>
 8006516:	f1a2 7254 	sub.w	r2, r2, #55574528	; 0x3500000
 800651a:	4296      	cmp	r6, r2
 800651c:	dd23      	ble.n	8006566 <__ieee754_pow+0xb6>
 800651e:	1532      	asrs	r2, r6, #20
 8006520:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8006524:	2a14      	cmp	r2, #20
 8006526:	dd0c      	ble.n	8006542 <__ieee754_pow+0x92>
 8006528:	f1c2 0234 	rsb	r2, r2, #52	; 0x34
 800652c:	fa23 f102 	lsr.w	r1, r3, r2
 8006530:	fa01 f202 	lsl.w	r2, r1, r2
 8006534:	4293      	cmp	r3, r2
 8006536:	d116      	bne.n	8006566 <__ieee754_pow+0xb6>
 8006538:	f001 0101 	and.w	r1, r1, #1
 800653c:	f1c1 0b02 	rsb	fp, r1, #2
 8006540:	e013      	b.n	800656a <__ieee754_pow+0xba>
 8006542:	2b00      	cmp	r3, #0
 8006544:	d155      	bne.n	80065f2 <__ieee754_pow+0x142>
 8006546:	f1c2 0214 	rsb	r2, r2, #20
 800654a:	fa46 f102 	asr.w	r1, r6, r2
 800654e:	fa01 f202 	lsl.w	r2, r1, r2
 8006552:	4296      	cmp	r6, r2
 8006554:	d12a      	bne.n	80065ac <__ieee754_pow+0xfc>
 8006556:	f001 0101 	and.w	r1, r1, #1
 800655a:	f1c1 0b02 	rsb	fp, r1, #2
 800655e:	e026      	b.n	80065ae <__ieee754_pow+0xfe>
 8006560:	f04f 0b02 	mov.w	fp, #2
 8006564:	e001      	b.n	800656a <__ieee754_pow+0xba>
 8006566:	f04f 0b00 	mov.w	fp, #0
 800656a:	2b00      	cmp	r3, #0
 800656c:	d143      	bne.n	80065f6 <__ieee754_pow+0x146>
 800656e:	4a96      	ldr	r2, [pc, #600]	; (80067c8 <__ieee754_pow+0x318>)
 8006570:	4296      	cmp	r6, r2
 8006572:	d11c      	bne.n	80065ae <__ieee754_pow+0xfe>
 8006574:	f105 4240 	add.w	r2, r5, #3221225472	; 0xc0000000
 8006578:	f502 1280 	add.w	r2, r2, #1048576	; 0x100000
 800657c:	ea52 020a 	orrs.w	r2, r2, sl
 8006580:	f000 843e 	beq.w	8006e00 <__ieee754_pow+0x950>
 8006584:	4b93      	ldr	r3, [pc, #588]	; (80067d4 <__ieee754_pow+0x324>)
 8006586:	429d      	cmp	r5, r3
 8006588:	dd07      	ble.n	800659a <__ieee754_pow+0xea>
 800658a:	f1b9 0f00 	cmp.w	r9, #0
 800658e:	f280 8439 	bge.w	8006e04 <__ieee754_pow+0x954>
 8006592:	2300      	movs	r3, #0
 8006594:	4619      	mov	r1, r3
 8006596:	f000 bc42 	b.w	8006e1e <__ieee754_pow+0x96e>
 800659a:	f1b9 0f00 	cmp.w	r9, #0
 800659e:	daf8      	bge.n	8006592 <__ieee754_pow+0xe2>
 80065a0:	9a01      	ldr	r2, [sp, #4]
 80065a2:	9b00      	ldr	r3, [sp, #0]
 80065a4:	f102 4100 	add.w	r1, r2, #2147483648	; 0x80000000
 80065a8:	f000 bc39 	b.w	8006e1e <__ieee754_pow+0x96e>
 80065ac:	469b      	mov	fp, r3
 80065ae:	4b8a      	ldr	r3, [pc, #552]	; (80067d8 <__ieee754_pow+0x328>)
 80065b0:	429e      	cmp	r6, r3
 80065b2:	d108      	bne.n	80065c6 <__ieee754_pow+0x116>
 80065b4:	f1b9 0f00 	cmp.w	r9, #0
 80065b8:	f280 8427 	bge.w	8006e0a <__ieee754_pow+0x95a>
 80065bc:	463a      	mov	r2, r7
 80065be:	4623      	mov	r3, r4
 80065c0:	2000      	movs	r0, #0
 80065c2:	4985      	ldr	r1, [pc, #532]	; (80067d8 <__ieee754_pow+0x328>)
 80065c4:	e03e      	b.n	8006644 <__ieee754_pow+0x194>
 80065c6:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 80065ca:	d105      	bne.n	80065d8 <__ieee754_pow+0x128>
 80065cc:	463a      	mov	r2, r7
 80065ce:	4623      	mov	r3, r4
 80065d0:	4638      	mov	r0, r7
 80065d2:	4621      	mov	r1, r4
 80065d4:	f000 bc10 	b.w	8006df8 <__ieee754_pow+0x948>
 80065d8:	4b80      	ldr	r3, [pc, #512]	; (80067dc <__ieee754_pow+0x32c>)
 80065da:	4599      	cmp	r9, r3
 80065dc:	d10b      	bne.n	80065f6 <__ieee754_pow+0x146>
 80065de:	f1b8 0f00 	cmp.w	r8, #0
 80065e2:	db08      	blt.n	80065f6 <__ieee754_pow+0x146>
 80065e4:	4638      	mov	r0, r7
 80065e6:	4621      	mov	r1, r4
 80065e8:	b011      	add	sp, #68	; 0x44
 80065ea:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80065ee:	f000 bc53 	b.w	8006e98 <__ieee754_sqrt>
 80065f2:	f04f 0b00 	mov.w	fp, #0
 80065f6:	4638      	mov	r0, r7
 80065f8:	4621      	mov	r1, r4
 80065fa:	f000 fcf7 	bl	8006fec <fabs>
 80065fe:	f1ba 0f00 	cmp.w	sl, #0
 8006602:	d12a      	bne.n	800665a <__ieee754_pow+0x1aa>
 8006604:	b125      	cbz	r5, 8006610 <__ieee754_pow+0x160>
 8006606:	4b74      	ldr	r3, [pc, #464]	; (80067d8 <__ieee754_pow+0x328>)
 8006608:	f028 4240 	bic.w	r2, r8, #3221225472	; 0xc0000000
 800660c:	429a      	cmp	r2, r3
 800660e:	d124      	bne.n	800665a <__ieee754_pow+0x1aa>
 8006610:	f1b9 0f00 	cmp.w	r9, #0
 8006614:	da05      	bge.n	8006622 <__ieee754_pow+0x172>
 8006616:	4602      	mov	r2, r0
 8006618:	460b      	mov	r3, r1
 800661a:	2000      	movs	r0, #0
 800661c:	496e      	ldr	r1, [pc, #440]	; (80067d8 <__ieee754_pow+0x328>)
 800661e:	f7fa f88b 	bl	8000738 <__aeabi_ddiv>
 8006622:	f1b8 0f00 	cmp.w	r8, #0
 8006626:	f280 83f3 	bge.w	8006e10 <__ieee754_pow+0x960>
 800662a:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 800662e:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 8006632:	ea55 030b 	orrs.w	r3, r5, fp
 8006636:	d108      	bne.n	800664a <__ieee754_pow+0x19a>
 8006638:	4602      	mov	r2, r0
 800663a:	460b      	mov	r3, r1
 800663c:	f7f9 fd9e 	bl	800017c <__aeabi_dsub>
 8006640:	4602      	mov	r2, r0
 8006642:	460b      	mov	r3, r1
 8006644:	f7fa f878 	bl	8000738 <__aeabi_ddiv>
 8006648:	e3e2      	b.n	8006e10 <__ieee754_pow+0x960>
 800664a:	f1bb 0f01 	cmp.w	fp, #1
 800664e:	4603      	mov	r3, r0
 8006650:	f040 83e5 	bne.w	8006e1e <__ieee754_pow+0x96e>
 8006654:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 8006658:	e3e1      	b.n	8006e1e <__ieee754_pow+0x96e>
 800665a:	ea4f 78d8 	mov.w	r8, r8, lsr #31
 800665e:	f108 33ff 	add.w	r3, r8, #4294967295
 8006662:	930d      	str	r3, [sp, #52]	; 0x34
 8006664:	ea5b 0303 	orrs.w	r3, fp, r3
 8006668:	d104      	bne.n	8006674 <__ieee754_pow+0x1c4>
 800666a:	463a      	mov	r2, r7
 800666c:	4623      	mov	r3, r4
 800666e:	4638      	mov	r0, r7
 8006670:	4621      	mov	r1, r4
 8006672:	e7e3      	b.n	800663c <__ieee754_pow+0x18c>
 8006674:	4b5a      	ldr	r3, [pc, #360]	; (80067e0 <__ieee754_pow+0x330>)
 8006676:	429e      	cmp	r6, r3
 8006678:	dd6d      	ble.n	8006756 <__ieee754_pow+0x2a6>
 800667a:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800667e:	429e      	cmp	r6, r3
 8006680:	dd0b      	ble.n	800669a <__ieee754_pow+0x1ea>
 8006682:	4b54      	ldr	r3, [pc, #336]	; (80067d4 <__ieee754_pow+0x324>)
 8006684:	429d      	cmp	r5, r3
 8006686:	dc0e      	bgt.n	80066a6 <__ieee754_pow+0x1f6>
 8006688:	f1b9 0f00 	cmp.w	r9, #0
 800668c:	da81      	bge.n	8006592 <__ieee754_pow+0xe2>
 800668e:	a344      	add	r3, pc, #272	; (adr r3, 80067a0 <__ieee754_pow+0x2f0>)
 8006690:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006694:	4610      	mov	r0, r2
 8006696:	4619      	mov	r1, r3
 8006698:	e3ae      	b.n	8006df8 <__ieee754_pow+0x948>
 800669a:	4b52      	ldr	r3, [pc, #328]	; (80067e4 <__ieee754_pow+0x334>)
 800669c:	429d      	cmp	r5, r3
 800669e:	ddf3      	ble.n	8006688 <__ieee754_pow+0x1d8>
 80066a0:	4b4d      	ldr	r3, [pc, #308]	; (80067d8 <__ieee754_pow+0x328>)
 80066a2:	429d      	cmp	r5, r3
 80066a4:	dd03      	ble.n	80066ae <__ieee754_pow+0x1fe>
 80066a6:	f1b9 0f00 	cmp.w	r9, #0
 80066aa:	dcf0      	bgt.n	800668e <__ieee754_pow+0x1de>
 80066ac:	e771      	b.n	8006592 <__ieee754_pow+0xe2>
 80066ae:	2200      	movs	r2, #0
 80066b0:	4b49      	ldr	r3, [pc, #292]	; (80067d8 <__ieee754_pow+0x328>)
 80066b2:	f7f9 fd63 	bl	800017c <__aeabi_dsub>
 80066b6:	a33c      	add	r3, pc, #240	; (adr r3, 80067a8 <__ieee754_pow+0x2f8>)
 80066b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066bc:	4604      	mov	r4, r0
 80066be:	460d      	mov	r5, r1
 80066c0:	f7f9 ff10 	bl	80004e4 <__aeabi_dmul>
 80066c4:	a33a      	add	r3, pc, #232	; (adr r3, 80067b0 <__ieee754_pow+0x300>)
 80066c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066ca:	4606      	mov	r6, r0
 80066cc:	460f      	mov	r7, r1
 80066ce:	4620      	mov	r0, r4
 80066d0:	4629      	mov	r1, r5
 80066d2:	f7f9 ff07 	bl	80004e4 <__aeabi_dmul>
 80066d6:	2200      	movs	r2, #0
 80066d8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80066dc:	4b42      	ldr	r3, [pc, #264]	; (80067e8 <__ieee754_pow+0x338>)
 80066de:	4620      	mov	r0, r4
 80066e0:	4629      	mov	r1, r5
 80066e2:	f7f9 feff 	bl	80004e4 <__aeabi_dmul>
 80066e6:	4602      	mov	r2, r0
 80066e8:	460b      	mov	r3, r1
 80066ea:	a133      	add	r1, pc, #204	; (adr r1, 80067b8 <__ieee754_pow+0x308>)
 80066ec:	e9d1 0100 	ldrd	r0, r1, [r1]
 80066f0:	f7f9 fd44 	bl	800017c <__aeabi_dsub>
 80066f4:	4622      	mov	r2, r4
 80066f6:	462b      	mov	r3, r5
 80066f8:	f7f9 fef4 	bl	80004e4 <__aeabi_dmul>
 80066fc:	4602      	mov	r2, r0
 80066fe:	460b      	mov	r3, r1
 8006700:	2000      	movs	r0, #0
 8006702:	4936      	ldr	r1, [pc, #216]	; (80067dc <__ieee754_pow+0x32c>)
 8006704:	f7f9 fd3a 	bl	800017c <__aeabi_dsub>
 8006708:	4622      	mov	r2, r4
 800670a:	462b      	mov	r3, r5
 800670c:	4680      	mov	r8, r0
 800670e:	4689      	mov	r9, r1
 8006710:	4620      	mov	r0, r4
 8006712:	4629      	mov	r1, r5
 8006714:	f7f9 fee6 	bl	80004e4 <__aeabi_dmul>
 8006718:	4602      	mov	r2, r0
 800671a:	460b      	mov	r3, r1
 800671c:	4640      	mov	r0, r8
 800671e:	4649      	mov	r1, r9
 8006720:	f7f9 fee0 	bl	80004e4 <__aeabi_dmul>
 8006724:	a326      	add	r3, pc, #152	; (adr r3, 80067c0 <__ieee754_pow+0x310>)
 8006726:	e9d3 2300 	ldrd	r2, r3, [r3]
 800672a:	f7f9 fedb 	bl	80004e4 <__aeabi_dmul>
 800672e:	4602      	mov	r2, r0
 8006730:	460b      	mov	r3, r1
 8006732:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006736:	f7f9 fd21 	bl	800017c <__aeabi_dsub>
 800673a:	4602      	mov	r2, r0
 800673c:	460b      	mov	r3, r1
 800673e:	4604      	mov	r4, r0
 8006740:	460d      	mov	r5, r1
 8006742:	4630      	mov	r0, r6
 8006744:	4639      	mov	r1, r7
 8006746:	f7f9 fd1b 	bl	8000180 <__adddf3>
 800674a:	2000      	movs	r0, #0
 800674c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006750:	4632      	mov	r2, r6
 8006752:	463b      	mov	r3, r7
 8006754:	e1a7      	b.n	8006aa6 <__ieee754_pow+0x5f6>
 8006756:	f5b5 1f80 	cmp.w	r5, #1048576	; 0x100000
 800675a:	f04f 0200 	mov.w	r2, #0
 800675e:	da05      	bge.n	800676c <__ieee754_pow+0x2bc>
 8006760:	4b22      	ldr	r3, [pc, #136]	; (80067ec <__ieee754_pow+0x33c>)
 8006762:	f7f9 febf 	bl	80004e4 <__aeabi_dmul>
 8006766:	460d      	mov	r5, r1
 8006768:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800676c:	152b      	asrs	r3, r5, #20
 800676e:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8006772:	4413      	add	r3, r2
 8006774:	4a1e      	ldr	r2, [pc, #120]	; (80067f0 <__ieee754_pow+0x340>)
 8006776:	9307      	str	r3, [sp, #28]
 8006778:	f3c5 0313 	ubfx	r3, r5, #0, #20
 800677c:	f043 557f 	orr.w	r5, r3, #1069547520	; 0x3fc00000
 8006780:	4293      	cmp	r3, r2
 8006782:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8006786:	dd07      	ble.n	8006798 <__ieee754_pow+0x2e8>
 8006788:	4a1a      	ldr	r2, [pc, #104]	; (80067f4 <__ieee754_pow+0x344>)
 800678a:	4293      	cmp	r3, r2
 800678c:	dd34      	ble.n	80067f8 <__ieee754_pow+0x348>
 800678e:	9b07      	ldr	r3, [sp, #28]
 8006790:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8006794:	3301      	adds	r3, #1
 8006796:	9307      	str	r3, [sp, #28]
 8006798:	f04f 0a00 	mov.w	sl, #0
 800679c:	e02e      	b.n	80067fc <__ieee754_pow+0x34c>
 800679e:	bf00      	nop
 80067a0:	8800759c 	.word	0x8800759c
 80067a4:	7e37e43c 	.word	0x7e37e43c
 80067a8:	60000000 	.word	0x60000000
 80067ac:	3ff71547 	.word	0x3ff71547
 80067b0:	f85ddf44 	.word	0xf85ddf44
 80067b4:	3e54ae0b 	.word	0x3e54ae0b
 80067b8:	55555555 	.word	0x55555555
 80067bc:	3fd55555 	.word	0x3fd55555
 80067c0:	652b82fe 	.word	0x652b82fe
 80067c4:	3ff71547 	.word	0x3ff71547
 80067c8:	7ff00000 	.word	0x7ff00000
 80067cc:	08007660 	.word	0x08007660
 80067d0:	433fffff 	.word	0x433fffff
 80067d4:	3fefffff 	.word	0x3fefffff
 80067d8:	3ff00000 	.word	0x3ff00000
 80067dc:	3fe00000 	.word	0x3fe00000
 80067e0:	41e00000 	.word	0x41e00000
 80067e4:	3feffffe 	.word	0x3feffffe
 80067e8:	3fd00000 	.word	0x3fd00000
 80067ec:	43400000 	.word	0x43400000
 80067f0:	0003988e 	.word	0x0003988e
 80067f4:	000bb679 	.word	0x000bb679
 80067f8:	f04f 0a01 	mov.w	sl, #1
 80067fc:	4629      	mov	r1, r5
 80067fe:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 8006802:	930c      	str	r3, [sp, #48]	; 0x30
 8006804:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006806:	4bd0      	ldr	r3, [pc, #832]	; (8006b48 <__ieee754_pow+0x698>)
 8006808:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800680c:	4413      	add	r3, r2
 800680e:	cb18      	ldmia	r3, {r3, r4}
 8006810:	e9cd 340a 	strd	r3, r4, [sp, #40]	; 0x28
 8006814:	461a      	mov	r2, r3
 8006816:	4623      	mov	r3, r4
 8006818:	f7f9 fcb0 	bl	800017c <__aeabi_dsub>
 800681c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8006820:	4606      	mov	r6, r0
 8006822:	460f      	mov	r7, r1
 8006824:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8006828:	f7f9 fcaa 	bl	8000180 <__adddf3>
 800682c:	4602      	mov	r2, r0
 800682e:	460b      	mov	r3, r1
 8006830:	2000      	movs	r0, #0
 8006832:	49c6      	ldr	r1, [pc, #792]	; (8006b4c <__ieee754_pow+0x69c>)
 8006834:	f7f9 ff80 	bl	8000738 <__aeabi_ddiv>
 8006838:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 800683c:	4602      	mov	r2, r0
 800683e:	460b      	mov	r3, r1
 8006840:	4630      	mov	r0, r6
 8006842:	4639      	mov	r1, r7
 8006844:	f7f9 fe4e 	bl	80004e4 <__aeabi_dmul>
 8006848:	106d      	asrs	r5, r5, #1
 800684a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800684e:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8006852:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8006856:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800685a:	2300      	movs	r3, #0
 800685c:	9302      	str	r3, [sp, #8]
 800685e:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8006862:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8006866:	2200      	movs	r2, #0
 8006868:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 800686c:	4640      	mov	r0, r8
 800686e:	4649      	mov	r1, r9
 8006870:	4614      	mov	r4, r2
 8006872:	461d      	mov	r5, r3
 8006874:	f7f9 fe36 	bl	80004e4 <__aeabi_dmul>
 8006878:	4602      	mov	r2, r0
 800687a:	460b      	mov	r3, r1
 800687c:	4630      	mov	r0, r6
 800687e:	4639      	mov	r1, r7
 8006880:	f7f9 fc7c 	bl	800017c <__aeabi_dsub>
 8006884:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8006888:	4606      	mov	r6, r0
 800688a:	460f      	mov	r7, r1
 800688c:	4620      	mov	r0, r4
 800688e:	4629      	mov	r1, r5
 8006890:	f7f9 fc74 	bl	800017c <__aeabi_dsub>
 8006894:	4602      	mov	r2, r0
 8006896:	460b      	mov	r3, r1
 8006898:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800689c:	f7f9 fc6e 	bl	800017c <__aeabi_dsub>
 80068a0:	4642      	mov	r2, r8
 80068a2:	464b      	mov	r3, r9
 80068a4:	f7f9 fe1e 	bl	80004e4 <__aeabi_dmul>
 80068a8:	4602      	mov	r2, r0
 80068aa:	460b      	mov	r3, r1
 80068ac:	4630      	mov	r0, r6
 80068ae:	4639      	mov	r1, r7
 80068b0:	f7f9 fc64 	bl	800017c <__aeabi_dsub>
 80068b4:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 80068b8:	f7f9 fe14 	bl	80004e4 <__aeabi_dmul>
 80068bc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80068c0:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80068c4:	4610      	mov	r0, r2
 80068c6:	4619      	mov	r1, r3
 80068c8:	f7f9 fe0c 	bl	80004e4 <__aeabi_dmul>
 80068cc:	a38c      	add	r3, pc, #560	; (adr r3, 8006b00 <__ieee754_pow+0x650>)
 80068ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068d2:	4604      	mov	r4, r0
 80068d4:	460d      	mov	r5, r1
 80068d6:	f7f9 fe05 	bl	80004e4 <__aeabi_dmul>
 80068da:	a38b      	add	r3, pc, #556	; (adr r3, 8006b08 <__ieee754_pow+0x658>)
 80068dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068e0:	f7f9 fc4e 	bl	8000180 <__adddf3>
 80068e4:	4622      	mov	r2, r4
 80068e6:	462b      	mov	r3, r5
 80068e8:	f7f9 fdfc 	bl	80004e4 <__aeabi_dmul>
 80068ec:	a388      	add	r3, pc, #544	; (adr r3, 8006b10 <__ieee754_pow+0x660>)
 80068ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068f2:	f7f9 fc45 	bl	8000180 <__adddf3>
 80068f6:	4622      	mov	r2, r4
 80068f8:	462b      	mov	r3, r5
 80068fa:	f7f9 fdf3 	bl	80004e4 <__aeabi_dmul>
 80068fe:	a386      	add	r3, pc, #536	; (adr r3, 8006b18 <__ieee754_pow+0x668>)
 8006900:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006904:	f7f9 fc3c 	bl	8000180 <__adddf3>
 8006908:	4622      	mov	r2, r4
 800690a:	462b      	mov	r3, r5
 800690c:	f7f9 fdea 	bl	80004e4 <__aeabi_dmul>
 8006910:	a383      	add	r3, pc, #524	; (adr r3, 8006b20 <__ieee754_pow+0x670>)
 8006912:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006916:	f7f9 fc33 	bl	8000180 <__adddf3>
 800691a:	4622      	mov	r2, r4
 800691c:	462b      	mov	r3, r5
 800691e:	f7f9 fde1 	bl	80004e4 <__aeabi_dmul>
 8006922:	a381      	add	r3, pc, #516	; (adr r3, 8006b28 <__ieee754_pow+0x678>)
 8006924:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006928:	f7f9 fc2a 	bl	8000180 <__adddf3>
 800692c:	4622      	mov	r2, r4
 800692e:	4606      	mov	r6, r0
 8006930:	460f      	mov	r7, r1
 8006932:	462b      	mov	r3, r5
 8006934:	4620      	mov	r0, r4
 8006936:	4629      	mov	r1, r5
 8006938:	f7f9 fdd4 	bl	80004e4 <__aeabi_dmul>
 800693c:	4602      	mov	r2, r0
 800693e:	460b      	mov	r3, r1
 8006940:	4630      	mov	r0, r6
 8006942:	4639      	mov	r1, r7
 8006944:	f7f9 fdce 	bl	80004e4 <__aeabi_dmul>
 8006948:	4604      	mov	r4, r0
 800694a:	460d      	mov	r5, r1
 800694c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006950:	4642      	mov	r2, r8
 8006952:	464b      	mov	r3, r9
 8006954:	f7f9 fc14 	bl	8000180 <__adddf3>
 8006958:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800695c:	f7f9 fdc2 	bl	80004e4 <__aeabi_dmul>
 8006960:	4622      	mov	r2, r4
 8006962:	462b      	mov	r3, r5
 8006964:	f7f9 fc0c 	bl	8000180 <__adddf3>
 8006968:	4642      	mov	r2, r8
 800696a:	4606      	mov	r6, r0
 800696c:	460f      	mov	r7, r1
 800696e:	464b      	mov	r3, r9
 8006970:	4640      	mov	r0, r8
 8006972:	4649      	mov	r1, r9
 8006974:	f7f9 fdb6 	bl	80004e4 <__aeabi_dmul>
 8006978:	2200      	movs	r2, #0
 800697a:	4b75      	ldr	r3, [pc, #468]	; (8006b50 <__ieee754_pow+0x6a0>)
 800697c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8006980:	f7f9 fbfe 	bl	8000180 <__adddf3>
 8006984:	4632      	mov	r2, r6
 8006986:	463b      	mov	r3, r7
 8006988:	f7f9 fbfa 	bl	8000180 <__adddf3>
 800698c:	9802      	ldr	r0, [sp, #8]
 800698e:	460d      	mov	r5, r1
 8006990:	4604      	mov	r4, r0
 8006992:	4602      	mov	r2, r0
 8006994:	460b      	mov	r3, r1
 8006996:	4640      	mov	r0, r8
 8006998:	4649      	mov	r1, r9
 800699a:	f7f9 fda3 	bl	80004e4 <__aeabi_dmul>
 800699e:	2200      	movs	r2, #0
 80069a0:	4680      	mov	r8, r0
 80069a2:	4689      	mov	r9, r1
 80069a4:	4b6a      	ldr	r3, [pc, #424]	; (8006b50 <__ieee754_pow+0x6a0>)
 80069a6:	4620      	mov	r0, r4
 80069a8:	4629      	mov	r1, r5
 80069aa:	f7f9 fbe7 	bl	800017c <__aeabi_dsub>
 80069ae:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80069b2:	f7f9 fbe3 	bl	800017c <__aeabi_dsub>
 80069b6:	4602      	mov	r2, r0
 80069b8:	460b      	mov	r3, r1
 80069ba:	4630      	mov	r0, r6
 80069bc:	4639      	mov	r1, r7
 80069be:	f7f9 fbdd 	bl	800017c <__aeabi_dsub>
 80069c2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80069c6:	f7f9 fd8d 	bl	80004e4 <__aeabi_dmul>
 80069ca:	4622      	mov	r2, r4
 80069cc:	4606      	mov	r6, r0
 80069ce:	460f      	mov	r7, r1
 80069d0:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80069d4:	462b      	mov	r3, r5
 80069d6:	f7f9 fd85 	bl	80004e4 <__aeabi_dmul>
 80069da:	4602      	mov	r2, r0
 80069dc:	460b      	mov	r3, r1
 80069de:	4630      	mov	r0, r6
 80069e0:	4639      	mov	r1, r7
 80069e2:	f7f9 fbcd 	bl	8000180 <__adddf3>
 80069e6:	4606      	mov	r6, r0
 80069e8:	460f      	mov	r7, r1
 80069ea:	4602      	mov	r2, r0
 80069ec:	460b      	mov	r3, r1
 80069ee:	4640      	mov	r0, r8
 80069f0:	4649      	mov	r1, r9
 80069f2:	f7f9 fbc5 	bl	8000180 <__adddf3>
 80069f6:	a34e      	add	r3, pc, #312	; (adr r3, 8006b30 <__ieee754_pow+0x680>)
 80069f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069fc:	9802      	ldr	r0, [sp, #8]
 80069fe:	460d      	mov	r5, r1
 8006a00:	4604      	mov	r4, r0
 8006a02:	f7f9 fd6f 	bl	80004e4 <__aeabi_dmul>
 8006a06:	4642      	mov	r2, r8
 8006a08:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8006a0c:	464b      	mov	r3, r9
 8006a0e:	4620      	mov	r0, r4
 8006a10:	4629      	mov	r1, r5
 8006a12:	f7f9 fbb3 	bl	800017c <__aeabi_dsub>
 8006a16:	4602      	mov	r2, r0
 8006a18:	460b      	mov	r3, r1
 8006a1a:	4630      	mov	r0, r6
 8006a1c:	4639      	mov	r1, r7
 8006a1e:	f7f9 fbad 	bl	800017c <__aeabi_dsub>
 8006a22:	a345      	add	r3, pc, #276	; (adr r3, 8006b38 <__ieee754_pow+0x688>)
 8006a24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a28:	f7f9 fd5c 	bl	80004e4 <__aeabi_dmul>
 8006a2c:	a344      	add	r3, pc, #272	; (adr r3, 8006b40 <__ieee754_pow+0x690>)
 8006a2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a32:	4606      	mov	r6, r0
 8006a34:	460f      	mov	r7, r1
 8006a36:	4620      	mov	r0, r4
 8006a38:	4629      	mov	r1, r5
 8006a3a:	f7f9 fd53 	bl	80004e4 <__aeabi_dmul>
 8006a3e:	4602      	mov	r2, r0
 8006a40:	460b      	mov	r3, r1
 8006a42:	4630      	mov	r0, r6
 8006a44:	4639      	mov	r1, r7
 8006a46:	f7f9 fb9b 	bl	8000180 <__adddf3>
 8006a4a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006a4c:	4b41      	ldr	r3, [pc, #260]	; (8006b54 <__ieee754_pow+0x6a4>)
 8006a4e:	4413      	add	r3, r2
 8006a50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a54:	f7f9 fb94 	bl	8000180 <__adddf3>
 8006a58:	4604      	mov	r4, r0
 8006a5a:	9807      	ldr	r0, [sp, #28]
 8006a5c:	460d      	mov	r5, r1
 8006a5e:	f7f9 fcdb 	bl	8000418 <__aeabi_i2d>
 8006a62:	4606      	mov	r6, r0
 8006a64:	460f      	mov	r7, r1
 8006a66:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8006a6a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006a6c:	4b3a      	ldr	r3, [pc, #232]	; (8006b58 <__ieee754_pow+0x6a8>)
 8006a6e:	4413      	add	r3, r2
 8006a70:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006a74:	4622      	mov	r2, r4
 8006a76:	462b      	mov	r3, r5
 8006a78:	f7f9 fb82 	bl	8000180 <__adddf3>
 8006a7c:	4642      	mov	r2, r8
 8006a7e:	464b      	mov	r3, r9
 8006a80:	f7f9 fb7e 	bl	8000180 <__adddf3>
 8006a84:	4632      	mov	r2, r6
 8006a86:	463b      	mov	r3, r7
 8006a88:	f7f9 fb7a 	bl	8000180 <__adddf3>
 8006a8c:	9802      	ldr	r0, [sp, #8]
 8006a8e:	4632      	mov	r2, r6
 8006a90:	463b      	mov	r3, r7
 8006a92:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006a96:	f7f9 fb71 	bl	800017c <__aeabi_dsub>
 8006a9a:	4642      	mov	r2, r8
 8006a9c:	464b      	mov	r3, r9
 8006a9e:	f7f9 fb6d 	bl	800017c <__aeabi_dsub>
 8006aa2:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8006aa6:	f7f9 fb69 	bl	800017c <__aeabi_dsub>
 8006aaa:	4602      	mov	r2, r0
 8006aac:	460b      	mov	r3, r1
 8006aae:	4620      	mov	r0, r4
 8006ab0:	4629      	mov	r1, r5
 8006ab2:	f7f9 fb63 	bl	800017c <__aeabi_dsub>
 8006ab6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006ab8:	f10b 33ff 	add.w	r3, fp, #4294967295
 8006abc:	4313      	orrs	r3, r2
 8006abe:	bf0c      	ite	eq
 8006ac0:	4c26      	ldreq	r4, [pc, #152]	; (8006b5c <__ieee754_pow+0x6ac>)
 8006ac2:	4c22      	ldrne	r4, [pc, #136]	; (8006b4c <__ieee754_pow+0x69c>)
 8006ac4:	2300      	movs	r3, #0
 8006ac6:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8006aca:	e9dd 4500 	ldrd	r4, r5, [sp]
 8006ace:	2400      	movs	r4, #0
 8006ad0:	4606      	mov	r6, r0
 8006ad2:	460f      	mov	r7, r1
 8006ad4:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006ad8:	4622      	mov	r2, r4
 8006ada:	462b      	mov	r3, r5
 8006adc:	f7f9 fb4e 	bl	800017c <__aeabi_dsub>
 8006ae0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006ae4:	f7f9 fcfe 	bl	80004e4 <__aeabi_dmul>
 8006ae8:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006aec:	4680      	mov	r8, r0
 8006aee:	4689      	mov	r9, r1
 8006af0:	4630      	mov	r0, r6
 8006af2:	4639      	mov	r1, r7
 8006af4:	f7f9 fcf6 	bl	80004e4 <__aeabi_dmul>
 8006af8:	4602      	mov	r2, r0
 8006afa:	e031      	b.n	8006b60 <__ieee754_pow+0x6b0>
 8006afc:	f3af 8000 	nop.w
 8006b00:	4a454eef 	.word	0x4a454eef
 8006b04:	3fca7e28 	.word	0x3fca7e28
 8006b08:	93c9db65 	.word	0x93c9db65
 8006b0c:	3fcd864a 	.word	0x3fcd864a
 8006b10:	a91d4101 	.word	0xa91d4101
 8006b14:	3fd17460 	.word	0x3fd17460
 8006b18:	518f264d 	.word	0x518f264d
 8006b1c:	3fd55555 	.word	0x3fd55555
 8006b20:	db6fabff 	.word	0xdb6fabff
 8006b24:	3fdb6db6 	.word	0x3fdb6db6
 8006b28:	33333303 	.word	0x33333303
 8006b2c:	3fe33333 	.word	0x3fe33333
 8006b30:	e0000000 	.word	0xe0000000
 8006b34:	3feec709 	.word	0x3feec709
 8006b38:	dc3a03fd 	.word	0xdc3a03fd
 8006b3c:	3feec709 	.word	0x3feec709
 8006b40:	145b01f5 	.word	0x145b01f5
 8006b44:	be3e2fe0 	.word	0xbe3e2fe0
 8006b48:	08007688 	.word	0x08007688
 8006b4c:	3ff00000 	.word	0x3ff00000
 8006b50:	40080000 	.word	0x40080000
 8006b54:	08007678 	.word	0x08007678
 8006b58:	08007668 	.word	0x08007668
 8006b5c:	bff00000 	.word	0xbff00000
 8006b60:	460b      	mov	r3, r1
 8006b62:	4640      	mov	r0, r8
 8006b64:	4649      	mov	r1, r9
 8006b66:	f7f9 fb0b 	bl	8000180 <__adddf3>
 8006b6a:	4622      	mov	r2, r4
 8006b6c:	462b      	mov	r3, r5
 8006b6e:	4680      	mov	r8, r0
 8006b70:	4689      	mov	r9, r1
 8006b72:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006b76:	f7f9 fcb5 	bl	80004e4 <__aeabi_dmul>
 8006b7a:	4604      	mov	r4, r0
 8006b7c:	460d      	mov	r5, r1
 8006b7e:	460b      	mov	r3, r1
 8006b80:	4602      	mov	r2, r0
 8006b82:	4649      	mov	r1, r9
 8006b84:	4640      	mov	r0, r8
 8006b86:	e9cd 4500 	strd	r4, r5, [sp]
 8006b8a:	f7f9 faf9 	bl	8000180 <__adddf3>
 8006b8e:	4bbc      	ldr	r3, [pc, #752]	; (8006e80 <__ieee754_pow+0x9d0>)
 8006b90:	4682      	mov	sl, r0
 8006b92:	4299      	cmp	r1, r3
 8006b94:	460f      	mov	r7, r1
 8006b96:	460e      	mov	r6, r1
 8006b98:	dd26      	ble.n	8006be8 <__ieee754_pow+0x738>
 8006b9a:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8006b9e:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8006ba2:	4303      	orrs	r3, r0
 8006ba4:	d115      	bne.n	8006bd2 <__ieee754_pow+0x722>
 8006ba6:	a3a0      	add	r3, pc, #640	; (adr r3, 8006e28 <__ieee754_pow+0x978>)
 8006ba8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bac:	4640      	mov	r0, r8
 8006bae:	4649      	mov	r1, r9
 8006bb0:	f7f9 fae6 	bl	8000180 <__adddf3>
 8006bb4:	4622      	mov	r2, r4
 8006bb6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006bba:	462b      	mov	r3, r5
 8006bbc:	4650      	mov	r0, sl
 8006bbe:	4639      	mov	r1, r7
 8006bc0:	f7f9 fadc 	bl	800017c <__aeabi_dsub>
 8006bc4:	4602      	mov	r2, r0
 8006bc6:	460b      	mov	r3, r1
 8006bc8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006bcc:	f7f9 ff1a 	bl	8000a04 <__aeabi_dcmpgt>
 8006bd0:	b348      	cbz	r0, 8006c26 <__ieee754_pow+0x776>
 8006bd2:	a397      	add	r3, pc, #604	; (adr r3, 8006e30 <__ieee754_pow+0x980>)
 8006bd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bd8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006bdc:	f7f9 fc82 	bl	80004e4 <__aeabi_dmul>
 8006be0:	a393      	add	r3, pc, #588	; (adr r3, 8006e30 <__ieee754_pow+0x980>)
 8006be2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006be6:	e107      	b.n	8006df8 <__ieee754_pow+0x948>
 8006be8:	4ba6      	ldr	r3, [pc, #664]	; (8006e84 <__ieee754_pow+0x9d4>)
 8006bea:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
 8006bee:	429f      	cmp	r7, r3
 8006bf0:	dd19      	ble.n	8006c26 <__ieee754_pow+0x776>
 8006bf2:	4ba5      	ldr	r3, [pc, #660]	; (8006e88 <__ieee754_pow+0x9d8>)
 8006bf4:	440b      	add	r3, r1
 8006bf6:	4303      	orrs	r3, r0
 8006bf8:	d10a      	bne.n	8006c10 <__ieee754_pow+0x760>
 8006bfa:	4622      	mov	r2, r4
 8006bfc:	462b      	mov	r3, r5
 8006bfe:	f7f9 fabd 	bl	800017c <__aeabi_dsub>
 8006c02:	4602      	mov	r2, r0
 8006c04:	460b      	mov	r3, r1
 8006c06:	4640      	mov	r0, r8
 8006c08:	4649      	mov	r1, r9
 8006c0a:	f7f9 fee7 	bl	80009dc <__aeabi_dcmple>
 8006c0e:	b150      	cbz	r0, 8006c26 <__ieee754_pow+0x776>
 8006c10:	a389      	add	r3, pc, #548	; (adr r3, 8006e38 <__ieee754_pow+0x988>)
 8006c12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c16:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006c1a:	f7f9 fc63 	bl	80004e4 <__aeabi_dmul>
 8006c1e:	a386      	add	r3, pc, #536	; (adr r3, 8006e38 <__ieee754_pow+0x988>)
 8006c20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c24:	e0e8      	b.n	8006df8 <__ieee754_pow+0x948>
 8006c26:	4a99      	ldr	r2, [pc, #612]	; (8006e8c <__ieee754_pow+0x9dc>)
 8006c28:	f026 4300 	bic.w	r3, r6, #2147483648	; 0x80000000
 8006c2c:	4293      	cmp	r3, r2
 8006c2e:	dd25      	ble.n	8006c7c <__ieee754_pow+0x7cc>
 8006c30:	151b      	asrs	r3, r3, #20
 8006c32:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8006c36:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8006c3a:	fa4a f303 	asr.w	r3, sl, r3
 8006c3e:	4433      	add	r3, r6
 8006c40:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8006c44:	4f92      	ldr	r7, [pc, #584]	; (8006e90 <__ieee754_pow+0x9e0>)
 8006c46:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8006c4a:	4117      	asrs	r7, r2
 8006c4c:	ea23 0107 	bic.w	r1, r3, r7
 8006c50:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006c54:	ea43 030a 	orr.w	r3, r3, sl
 8006c58:	2000      	movs	r0, #0
 8006c5a:	f1c2 0a14 	rsb	sl, r2, #20
 8006c5e:	fa43 fa0a 	asr.w	sl, r3, sl
 8006c62:	2e00      	cmp	r6, #0
 8006c64:	4602      	mov	r2, r0
 8006c66:	460b      	mov	r3, r1
 8006c68:	4620      	mov	r0, r4
 8006c6a:	4629      	mov	r1, r5
 8006c6c:	bfb8      	it	lt
 8006c6e:	f1ca 0a00 	rsblt	sl, sl, #0
 8006c72:	f7f9 fa83 	bl	800017c <__aeabi_dsub>
 8006c76:	e9cd 0100 	strd	r0, r1, [sp]
 8006c7a:	e001      	b.n	8006c80 <__ieee754_pow+0x7d0>
 8006c7c:	f04f 0a00 	mov.w	sl, #0
 8006c80:	4642      	mov	r2, r8
 8006c82:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006c86:	464b      	mov	r3, r9
 8006c88:	f7f9 fa7a 	bl	8000180 <__adddf3>
 8006c8c:	a36c      	add	r3, pc, #432	; (adr r3, 8006e40 <__ieee754_pow+0x990>)
 8006c8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c92:	2000      	movs	r0, #0
 8006c94:	4604      	mov	r4, r0
 8006c96:	460d      	mov	r5, r1
 8006c98:	f7f9 fc24 	bl	80004e4 <__aeabi_dmul>
 8006c9c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006ca0:	4606      	mov	r6, r0
 8006ca2:	460f      	mov	r7, r1
 8006ca4:	4620      	mov	r0, r4
 8006ca6:	4629      	mov	r1, r5
 8006ca8:	f7f9 fa68 	bl	800017c <__aeabi_dsub>
 8006cac:	4602      	mov	r2, r0
 8006cae:	460b      	mov	r3, r1
 8006cb0:	4640      	mov	r0, r8
 8006cb2:	4649      	mov	r1, r9
 8006cb4:	f7f9 fa62 	bl	800017c <__aeabi_dsub>
 8006cb8:	a363      	add	r3, pc, #396	; (adr r3, 8006e48 <__ieee754_pow+0x998>)
 8006cba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cbe:	f7f9 fc11 	bl	80004e4 <__aeabi_dmul>
 8006cc2:	a363      	add	r3, pc, #396	; (adr r3, 8006e50 <__ieee754_pow+0x9a0>)
 8006cc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cc8:	4680      	mov	r8, r0
 8006cca:	4689      	mov	r9, r1
 8006ccc:	4620      	mov	r0, r4
 8006cce:	4629      	mov	r1, r5
 8006cd0:	f7f9 fc08 	bl	80004e4 <__aeabi_dmul>
 8006cd4:	4602      	mov	r2, r0
 8006cd6:	460b      	mov	r3, r1
 8006cd8:	4640      	mov	r0, r8
 8006cda:	4649      	mov	r1, r9
 8006cdc:	f7f9 fa50 	bl	8000180 <__adddf3>
 8006ce0:	4604      	mov	r4, r0
 8006ce2:	460d      	mov	r5, r1
 8006ce4:	4602      	mov	r2, r0
 8006ce6:	460b      	mov	r3, r1
 8006ce8:	4630      	mov	r0, r6
 8006cea:	4639      	mov	r1, r7
 8006cec:	f7f9 fa48 	bl	8000180 <__adddf3>
 8006cf0:	4632      	mov	r2, r6
 8006cf2:	463b      	mov	r3, r7
 8006cf4:	4680      	mov	r8, r0
 8006cf6:	4689      	mov	r9, r1
 8006cf8:	f7f9 fa40 	bl	800017c <__aeabi_dsub>
 8006cfc:	4602      	mov	r2, r0
 8006cfe:	460b      	mov	r3, r1
 8006d00:	4620      	mov	r0, r4
 8006d02:	4629      	mov	r1, r5
 8006d04:	f7f9 fa3a 	bl	800017c <__aeabi_dsub>
 8006d08:	4642      	mov	r2, r8
 8006d0a:	4606      	mov	r6, r0
 8006d0c:	460f      	mov	r7, r1
 8006d0e:	464b      	mov	r3, r9
 8006d10:	4640      	mov	r0, r8
 8006d12:	4649      	mov	r1, r9
 8006d14:	f7f9 fbe6 	bl	80004e4 <__aeabi_dmul>
 8006d18:	a34f      	add	r3, pc, #316	; (adr r3, 8006e58 <__ieee754_pow+0x9a8>)
 8006d1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d1e:	4604      	mov	r4, r0
 8006d20:	460d      	mov	r5, r1
 8006d22:	f7f9 fbdf 	bl	80004e4 <__aeabi_dmul>
 8006d26:	a34e      	add	r3, pc, #312	; (adr r3, 8006e60 <__ieee754_pow+0x9b0>)
 8006d28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d2c:	f7f9 fa26 	bl	800017c <__aeabi_dsub>
 8006d30:	4622      	mov	r2, r4
 8006d32:	462b      	mov	r3, r5
 8006d34:	f7f9 fbd6 	bl	80004e4 <__aeabi_dmul>
 8006d38:	a34b      	add	r3, pc, #300	; (adr r3, 8006e68 <__ieee754_pow+0x9b8>)
 8006d3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d3e:	f7f9 fa1f 	bl	8000180 <__adddf3>
 8006d42:	4622      	mov	r2, r4
 8006d44:	462b      	mov	r3, r5
 8006d46:	f7f9 fbcd 	bl	80004e4 <__aeabi_dmul>
 8006d4a:	a349      	add	r3, pc, #292	; (adr r3, 8006e70 <__ieee754_pow+0x9c0>)
 8006d4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d50:	f7f9 fa14 	bl	800017c <__aeabi_dsub>
 8006d54:	4622      	mov	r2, r4
 8006d56:	462b      	mov	r3, r5
 8006d58:	f7f9 fbc4 	bl	80004e4 <__aeabi_dmul>
 8006d5c:	a346      	add	r3, pc, #280	; (adr r3, 8006e78 <__ieee754_pow+0x9c8>)
 8006d5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d62:	f7f9 fa0d 	bl	8000180 <__adddf3>
 8006d66:	4622      	mov	r2, r4
 8006d68:	462b      	mov	r3, r5
 8006d6a:	f7f9 fbbb 	bl	80004e4 <__aeabi_dmul>
 8006d6e:	4602      	mov	r2, r0
 8006d70:	460b      	mov	r3, r1
 8006d72:	4640      	mov	r0, r8
 8006d74:	4649      	mov	r1, r9
 8006d76:	f7f9 fa01 	bl	800017c <__aeabi_dsub>
 8006d7a:	4604      	mov	r4, r0
 8006d7c:	460d      	mov	r5, r1
 8006d7e:	4602      	mov	r2, r0
 8006d80:	460b      	mov	r3, r1
 8006d82:	4640      	mov	r0, r8
 8006d84:	4649      	mov	r1, r9
 8006d86:	f7f9 fbad 	bl	80004e4 <__aeabi_dmul>
 8006d8a:	2200      	movs	r2, #0
 8006d8c:	e9cd 0100 	strd	r0, r1, [sp]
 8006d90:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006d94:	4620      	mov	r0, r4
 8006d96:	4629      	mov	r1, r5
 8006d98:	f7f9 f9f0 	bl	800017c <__aeabi_dsub>
 8006d9c:	4602      	mov	r2, r0
 8006d9e:	460b      	mov	r3, r1
 8006da0:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006da4:	f7f9 fcc8 	bl	8000738 <__aeabi_ddiv>
 8006da8:	4632      	mov	r2, r6
 8006daa:	4604      	mov	r4, r0
 8006dac:	460d      	mov	r5, r1
 8006dae:	463b      	mov	r3, r7
 8006db0:	4640      	mov	r0, r8
 8006db2:	4649      	mov	r1, r9
 8006db4:	f7f9 fb96 	bl	80004e4 <__aeabi_dmul>
 8006db8:	4632      	mov	r2, r6
 8006dba:	463b      	mov	r3, r7
 8006dbc:	f7f9 f9e0 	bl	8000180 <__adddf3>
 8006dc0:	4602      	mov	r2, r0
 8006dc2:	460b      	mov	r3, r1
 8006dc4:	4620      	mov	r0, r4
 8006dc6:	4629      	mov	r1, r5
 8006dc8:	f7f9 f9d8 	bl	800017c <__aeabi_dsub>
 8006dcc:	4642      	mov	r2, r8
 8006dce:	464b      	mov	r3, r9
 8006dd0:	f7f9 f9d4 	bl	800017c <__aeabi_dsub>
 8006dd4:	4602      	mov	r2, r0
 8006dd6:	460b      	mov	r3, r1
 8006dd8:	2000      	movs	r0, #0
 8006dda:	492e      	ldr	r1, [pc, #184]	; (8006e94 <__ieee754_pow+0x9e4>)
 8006ddc:	f7f9 f9ce 	bl	800017c <__aeabi_dsub>
 8006de0:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 8006de4:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8006de8:	da03      	bge.n	8006df2 <__ieee754_pow+0x942>
 8006dea:	4652      	mov	r2, sl
 8006dec:	f000 f99c 	bl	8007128 <scalbn>
 8006df0:	e000      	b.n	8006df4 <__ieee754_pow+0x944>
 8006df2:	4621      	mov	r1, r4
 8006df4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006df8:	f7f9 fb74 	bl	80004e4 <__aeabi_dmul>
 8006dfc:	e008      	b.n	8006e10 <__ieee754_pow+0x960>
 8006dfe:	4603      	mov	r3, r0
 8006e00:	4924      	ldr	r1, [pc, #144]	; (8006e94 <__ieee754_pow+0x9e4>)
 8006e02:	e00c      	b.n	8006e1e <__ieee754_pow+0x96e>
 8006e04:	9b00      	ldr	r3, [sp, #0]
 8006e06:	9901      	ldr	r1, [sp, #4]
 8006e08:	e009      	b.n	8006e1e <__ieee754_pow+0x96e>
 8006e0a:	463b      	mov	r3, r7
 8006e0c:	4621      	mov	r1, r4
 8006e0e:	e006      	b.n	8006e1e <__ieee754_pow+0x96e>
 8006e10:	4603      	mov	r3, r0
 8006e12:	e004      	b.n	8006e1e <__ieee754_pow+0x96e>
 8006e14:	42ae      	cmp	r6, r5
 8006e16:	f73f ab72 	bgt.w	80064fe <__ieee754_pow+0x4e>
 8006e1a:	f7ff bb65 	b.w	80064e8 <__ieee754_pow+0x38>
 8006e1e:	4618      	mov	r0, r3
 8006e20:	b011      	add	sp, #68	; 0x44
 8006e22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006e26:	bf00      	nop
 8006e28:	652b82fe 	.word	0x652b82fe
 8006e2c:	3c971547 	.word	0x3c971547
 8006e30:	8800759c 	.word	0x8800759c
 8006e34:	7e37e43c 	.word	0x7e37e43c
 8006e38:	c2f8f359 	.word	0xc2f8f359
 8006e3c:	01a56e1f 	.word	0x01a56e1f
 8006e40:	00000000 	.word	0x00000000
 8006e44:	3fe62e43 	.word	0x3fe62e43
 8006e48:	fefa39ef 	.word	0xfefa39ef
 8006e4c:	3fe62e42 	.word	0x3fe62e42
 8006e50:	0ca86c39 	.word	0x0ca86c39
 8006e54:	be205c61 	.word	0xbe205c61
 8006e58:	72bea4d0 	.word	0x72bea4d0
 8006e5c:	3e663769 	.word	0x3e663769
 8006e60:	c5d26bf1 	.word	0xc5d26bf1
 8006e64:	3ebbbd41 	.word	0x3ebbbd41
 8006e68:	af25de2c 	.word	0xaf25de2c
 8006e6c:	3f11566a 	.word	0x3f11566a
 8006e70:	16bebd93 	.word	0x16bebd93
 8006e74:	3f66c16c 	.word	0x3f66c16c
 8006e78:	5555553e 	.word	0x5555553e
 8006e7c:	3fc55555 	.word	0x3fc55555
 8006e80:	408fffff 	.word	0x408fffff
 8006e84:	4090cbff 	.word	0x4090cbff
 8006e88:	3f6f3400 	.word	0x3f6f3400
 8006e8c:	3fe00000 	.word	0x3fe00000
 8006e90:	000fffff 	.word	0x000fffff
 8006e94:	3ff00000 	.word	0x3ff00000

08006e98 <__ieee754_sqrt>:
 8006e98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006e9c:	4f52      	ldr	r7, [pc, #328]	; (8006fe8 <__ieee754_sqrt+0x150>)
 8006e9e:	f8df c148 	ldr.w	ip, [pc, #328]	; 8006fe8 <__ieee754_sqrt+0x150>
 8006ea2:	400f      	ands	r7, r1
 8006ea4:	4567      	cmp	r7, ip
 8006ea6:	4606      	mov	r6, r0
 8006ea8:	460d      	mov	r5, r1
 8006eaa:	4686      	mov	lr, r0
 8006eac:	460c      	mov	r4, r1
 8006eae:	460b      	mov	r3, r1
 8006eb0:	4602      	mov	r2, r0
 8006eb2:	d108      	bne.n	8006ec6 <__ieee754_sqrt+0x2e>
 8006eb4:	4602      	mov	r2, r0
 8006eb6:	460b      	mov	r3, r1
 8006eb8:	f7f9 fb14 	bl	80004e4 <__aeabi_dmul>
 8006ebc:	4632      	mov	r2, r6
 8006ebe:	462b      	mov	r3, r5
 8006ec0:	f7f9 f95e 	bl	8000180 <__adddf3>
 8006ec4:	e08d      	b.n	8006fe2 <__ieee754_sqrt+0x14a>
 8006ec6:	2900      	cmp	r1, #0
 8006ec8:	dc0e      	bgt.n	8006ee8 <__ieee754_sqrt+0x50>
 8006eca:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
 8006ece:	4307      	orrs	r7, r0
 8006ed0:	f000 8087 	beq.w	8006fe2 <__ieee754_sqrt+0x14a>
 8006ed4:	b141      	cbz	r1, 8006ee8 <__ieee754_sqrt+0x50>
 8006ed6:	4602      	mov	r2, r0
 8006ed8:	460b      	mov	r3, r1
 8006eda:	f7f9 f94f 	bl	800017c <__aeabi_dsub>
 8006ede:	4602      	mov	r2, r0
 8006ee0:	460b      	mov	r3, r1
 8006ee2:	f7f9 fc29 	bl	8000738 <__aeabi_ddiv>
 8006ee6:	e07c      	b.n	8006fe2 <__ieee754_sqrt+0x14a>
 8006ee8:	1524      	asrs	r4, r4, #20
 8006eea:	d112      	bne.n	8006f12 <__ieee754_sqrt+0x7a>
 8006eec:	b91b      	cbnz	r3, 8006ef6 <__ieee754_sqrt+0x5e>
 8006eee:	0ad3      	lsrs	r3, r2, #11
 8006ef0:	3c15      	subs	r4, #21
 8006ef2:	0552      	lsls	r2, r2, #21
 8006ef4:	e7fa      	b.n	8006eec <__ieee754_sqrt+0x54>
 8006ef6:	2100      	movs	r1, #0
 8006ef8:	02d8      	lsls	r0, r3, #11
 8006efa:	d402      	bmi.n	8006f02 <__ieee754_sqrt+0x6a>
 8006efc:	005b      	lsls	r3, r3, #1
 8006efe:	3101      	adds	r1, #1
 8006f00:	e7fa      	b.n	8006ef8 <__ieee754_sqrt+0x60>
 8006f02:	1e48      	subs	r0, r1, #1
 8006f04:	1a24      	subs	r4, r4, r0
 8006f06:	f1c1 0020 	rsb	r0, r1, #32
 8006f0a:	fa22 f000 	lsr.w	r0, r2, r0
 8006f0e:	4303      	orrs	r3, r0
 8006f10:	408a      	lsls	r2, r1
 8006f12:	f04f 0e00 	mov.w	lr, #0
 8006f16:	4677      	mov	r7, lr
 8006f18:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8006f1c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006f20:	07e1      	lsls	r1, r4, #31
 8006f22:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006f26:	bf42      	ittt	mi
 8006f28:	005b      	lslmi	r3, r3, #1
 8006f2a:	eb03 73d2 	addmi.w	r3, r3, r2, lsr #31
 8006f2e:	0052      	lslmi	r2, r2, #1
 8006f30:	eb03 71d2 	add.w	r1, r3, r2, lsr #31
 8006f34:	440b      	add	r3, r1
 8006f36:	0056      	lsls	r6, r2, #1
 8006f38:	1064      	asrs	r4, r4, #1
 8006f3a:	2216      	movs	r2, #22
 8006f3c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006f40:	1878      	adds	r0, r7, r1
 8006f42:	4298      	cmp	r0, r3
 8006f44:	bfde      	ittt	le
 8006f46:	1a1b      	suble	r3, r3, r0
 8006f48:	1847      	addle	r7, r0, r1
 8006f4a:	448e      	addle	lr, r1
 8006f4c:	005b      	lsls	r3, r3, #1
 8006f4e:	3a01      	subs	r2, #1
 8006f50:	eb03 73d6 	add.w	r3, r3, r6, lsr #31
 8006f54:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8006f58:	ea4f 0646 	mov.w	r6, r6, lsl #1
 8006f5c:	d1f0      	bne.n	8006f40 <__ieee754_sqrt+0xa8>
 8006f5e:	4694      	mov	ip, r2
 8006f60:	2520      	movs	r5, #32
 8006f62:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8006f66:	429f      	cmp	r7, r3
 8006f68:	eb01 000c 	add.w	r0, r1, ip
 8006f6c:	db02      	blt.n	8006f74 <__ieee754_sqrt+0xdc>
 8006f6e:	d116      	bne.n	8006f9e <__ieee754_sqrt+0x106>
 8006f70:	42b0      	cmp	r0, r6
 8006f72:	d813      	bhi.n	8006f9c <__ieee754_sqrt+0x104>
 8006f74:	2800      	cmp	r0, #0
 8006f76:	eb00 0c01 	add.w	ip, r0, r1
 8006f7a:	da05      	bge.n	8006f88 <__ieee754_sqrt+0xf0>
 8006f7c:	f1bc 0f00 	cmp.w	ip, #0
 8006f80:	db02      	blt.n	8006f88 <__ieee754_sqrt+0xf0>
 8006f82:	f107 0801 	add.w	r8, r7, #1
 8006f86:	e000      	b.n	8006f8a <__ieee754_sqrt+0xf2>
 8006f88:	46b8      	mov	r8, r7
 8006f8a:	1bdb      	subs	r3, r3, r7
 8006f8c:	42b0      	cmp	r0, r6
 8006f8e:	bf88      	it	hi
 8006f90:	f103 33ff 	addhi.w	r3, r3, #4294967295
 8006f94:	1a36      	subs	r6, r6, r0
 8006f96:	440a      	add	r2, r1
 8006f98:	4647      	mov	r7, r8
 8006f9a:	e000      	b.n	8006f9e <__ieee754_sqrt+0x106>
 8006f9c:	463b      	mov	r3, r7
 8006f9e:	eb03 70d6 	add.w	r0, r3, r6, lsr #31
 8006fa2:	3d01      	subs	r5, #1
 8006fa4:	4403      	add	r3, r0
 8006fa6:	ea4f 0646 	mov.w	r6, r6, lsl #1
 8006faa:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8006fae:	d1da      	bne.n	8006f66 <__ieee754_sqrt+0xce>
 8006fb0:	4333      	orrs	r3, r6
 8006fb2:	d007      	beq.n	8006fc4 <__ieee754_sqrt+0x12c>
 8006fb4:	1c53      	adds	r3, r2, #1
 8006fb6:	bf0b      	itete	eq
 8006fb8:	462a      	moveq	r2, r5
 8006fba:	f002 0301 	andne.w	r3, r2, #1
 8006fbe:	f10e 0e01 	addeq.w	lr, lr, #1
 8006fc2:	18d2      	addne	r2, r2, r3
 8006fc4:	0852      	lsrs	r2, r2, #1
 8006fc6:	f01e 0f01 	tst.w	lr, #1
 8006fca:	bf18      	it	ne
 8006fcc:	f042 4200 	orrne.w	r2, r2, #2147483648	; 0x80000000
 8006fd0:	4610      	mov	r0, r2
 8006fd2:	ea4f 036e 	mov.w	r3, lr, asr #1
 8006fd6:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8006fda:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8006fde:	eb03 5104 	add.w	r1, r3, r4, lsl #20
 8006fe2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006fe6:	bf00      	nop
 8006fe8:	7ff00000 	.word	0x7ff00000

08006fec <fabs>:
 8006fec:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8006ff0:	4770      	bx	lr

08006ff2 <finite>:
 8006ff2:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
 8006ff6:	f501 1080 	add.w	r0, r1, #1048576	; 0x100000
 8006ffa:	0fc0      	lsrs	r0, r0, #31
 8006ffc:	4770      	bx	lr

08006ffe <matherr>:
 8006ffe:	2000      	movs	r0, #0
 8007000:	4770      	bx	lr
	...

08007004 <nan>:
 8007004:	2000      	movs	r0, #0
 8007006:	4901      	ldr	r1, [pc, #4]	; (800700c <nan+0x8>)
 8007008:	4770      	bx	lr
 800700a:	bf00      	nop
 800700c:	7ff80000 	.word	0x7ff80000

08007010 <rint>:
 8007010:	f3c1 5c0a 	ubfx	ip, r1, #20, #11
 8007014:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007016:	f2ac 3eff 	subw	lr, ip, #1023	; 0x3ff
 800701a:	f1be 0f13 	cmp.w	lr, #19
 800701e:	4602      	mov	r2, r0
 8007020:	460b      	mov	r3, r1
 8007022:	4607      	mov	r7, r0
 8007024:	460c      	mov	r4, r1
 8007026:	4606      	mov	r6, r0
 8007028:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 800702c:	dc44      	bgt.n	80070b8 <rint+0xa8>
 800702e:	f1be 0f00 	cmp.w	lr, #0
 8007032:	da26      	bge.n	8007082 <rint+0x72>
 8007034:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8007038:	4301      	orrs	r1, r0
 800703a:	d06d      	beq.n	8007118 <rint+0x108>
 800703c:	f3c3 0113 	ubfx	r1, r3, #0, #20
 8007040:	430f      	orrs	r7, r1
 8007042:	427b      	negs	r3, r7
 8007044:	431f      	orrs	r7, r3
 8007046:	4b36      	ldr	r3, [pc, #216]	; (8007120 <rint+0x110>)
 8007048:	0b3f      	lsrs	r7, r7, #12
 800704a:	0c64      	lsrs	r4, r4, #17
 800704c:	f407 2700 	and.w	r7, r7, #524288	; 0x80000
 8007050:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8007054:	0464      	lsls	r4, r4, #17
 8007056:	ea47 0104 	orr.w	r1, r7, r4
 800705a:	e9d3 6700 	ldrd	r6, r7, [r3]
 800705e:	4632      	mov	r2, r6
 8007060:	463b      	mov	r3, r7
 8007062:	f7f9 f88d 	bl	8000180 <__adddf3>
 8007066:	e9cd 0100 	strd	r0, r1, [sp]
 800706a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800706e:	4632      	mov	r2, r6
 8007070:	463b      	mov	r3, r7
 8007072:	f7f9 f883 	bl	800017c <__aeabi_dsub>
 8007076:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800707a:	4602      	mov	r2, r0
 800707c:	ea41 73c5 	orr.w	r3, r1, r5, lsl #31
 8007080:	e04a      	b.n	8007118 <rint+0x108>
 8007082:	4928      	ldr	r1, [pc, #160]	; (8007124 <rint+0x114>)
 8007084:	fa41 f10e 	asr.w	r1, r1, lr
 8007088:	ea03 0001 	and.w	r0, r3, r1
 800708c:	4310      	orrs	r0, r2
 800708e:	d043      	beq.n	8007118 <rint+0x108>
 8007090:	084b      	lsrs	r3, r1, #1
 8007092:	ea04 0203 	and.w	r2, r4, r3
 8007096:	ea52 0607 	orrs.w	r6, r2, r7
 800709a:	d029      	beq.n	80070f0 <rint+0xe0>
 800709c:	ea24 0303 	bic.w	r3, r4, r3
 80070a0:	f44f 2480 	mov.w	r4, #262144	; 0x40000
 80070a4:	f1be 0f13 	cmp.w	lr, #19
 80070a8:	fa44 f40e 	asr.w	r4, r4, lr
 80070ac:	bf0c      	ite	eq
 80070ae:	f04f 4600 	moveq.w	r6, #2147483648	; 0x80000000
 80070b2:	2600      	movne	r6, #0
 80070b4:	431c      	orrs	r4, r3
 80070b6:	e01b      	b.n	80070f0 <rint+0xe0>
 80070b8:	f1be 0f33 	cmp.w	lr, #51	; 0x33
 80070bc:	dd05      	ble.n	80070ca <rint+0xba>
 80070be:	f5be 6f80 	cmp.w	lr, #1024	; 0x400
 80070c2:	d129      	bne.n	8007118 <rint+0x108>
 80070c4:	f7f9 f85c 	bl	8000180 <__adddf3>
 80070c8:	e028      	b.n	800711c <rint+0x10c>
 80070ca:	f2ac 4c13 	subw	ip, ip, #1043	; 0x413
 80070ce:	f04f 31ff 	mov.w	r1, #4294967295
 80070d2:	fa21 f10c 	lsr.w	r1, r1, ip
 80070d6:	4208      	tst	r0, r1
 80070d8:	d01e      	beq.n	8007118 <rint+0x108>
 80070da:	084b      	lsrs	r3, r1, #1
 80070dc:	4218      	tst	r0, r3
 80070de:	bf1f      	itttt	ne
 80070e0:	f04f 4680 	movne.w	r6, #1073741824	; 0x40000000
 80070e4:	ea20 0303 	bicne.w	r3, r0, r3
 80070e8:	fa46 fc0c 	asrne.w	ip, r6, ip
 80070ec:	ea4c 0603 	orrne.w	r6, ip, r3
 80070f0:	4b0b      	ldr	r3, [pc, #44]	; (8007120 <rint+0x110>)
 80070f2:	4621      	mov	r1, r4
 80070f4:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 80070f8:	e9d5 4500 	ldrd	r4, r5, [r5]
 80070fc:	4630      	mov	r0, r6
 80070fe:	4622      	mov	r2, r4
 8007100:	462b      	mov	r3, r5
 8007102:	f7f9 f83d 	bl	8000180 <__adddf3>
 8007106:	e9cd 0100 	strd	r0, r1, [sp]
 800710a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800710e:	4622      	mov	r2, r4
 8007110:	462b      	mov	r3, r5
 8007112:	f7f9 f833 	bl	800017c <__aeabi_dsub>
 8007116:	e001      	b.n	800711c <rint+0x10c>
 8007118:	4610      	mov	r0, r2
 800711a:	4619      	mov	r1, r3
 800711c:	b003      	add	sp, #12
 800711e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007120:	08007698 	.word	0x08007698
 8007124:	000fffff 	.word	0x000fffff

08007128 <scalbn>:
 8007128:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800712a:	4616      	mov	r6, r2
 800712c:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8007130:	4604      	mov	r4, r0
 8007132:	460d      	mov	r5, r1
 8007134:	460b      	mov	r3, r1
 8007136:	b98a      	cbnz	r2, 800715c <scalbn+0x34>
 8007138:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800713c:	4303      	orrs	r3, r0
 800713e:	d050      	beq.n	80071e2 <scalbn+0xba>
 8007140:	2200      	movs	r2, #0
 8007142:	4b2d      	ldr	r3, [pc, #180]	; (80071f8 <scalbn+0xd0>)
 8007144:	f7f9 f9ce 	bl	80004e4 <__aeabi_dmul>
 8007148:	4a2c      	ldr	r2, [pc, #176]	; (80071fc <scalbn+0xd4>)
 800714a:	4604      	mov	r4, r0
 800714c:	4296      	cmp	r6, r2
 800714e:	460d      	mov	r5, r1
 8007150:	460b      	mov	r3, r1
 8007152:	db34      	blt.n	80071be <scalbn+0x96>
 8007154:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8007158:	3a36      	subs	r2, #54	; 0x36
 800715a:	e008      	b.n	800716e <scalbn+0x46>
 800715c:	f240 77ff 	movw	r7, #2047	; 0x7ff
 8007160:	42ba      	cmp	r2, r7
 8007162:	d104      	bne.n	800716e <scalbn+0x46>
 8007164:	4602      	mov	r2, r0
 8007166:	460b      	mov	r3, r1
 8007168:	f7f9 f80a 	bl	8000180 <__adddf3>
 800716c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800716e:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8007172:	4432      	add	r2, r6
 8007174:	428a      	cmp	r2, r1
 8007176:	dd02      	ble.n	800717e <scalbn+0x56>
 8007178:	4622      	mov	r2, r4
 800717a:	462b      	mov	r3, r5
 800717c:	e011      	b.n	80071a2 <scalbn+0x7a>
 800717e:	2a00      	cmp	r2, #0
 8007180:	dd06      	ble.n	8007190 <scalbn+0x68>
 8007182:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8007186:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800718a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800718e:	e028      	b.n	80071e2 <scalbn+0xba>
 8007190:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8007194:	da17      	bge.n	80071c6 <scalbn+0x9e>
 8007196:	f24c 3350 	movw	r3, #50000	; 0xc350
 800719a:	429e      	cmp	r6, r3
 800719c:	4622      	mov	r2, r4
 800719e:	462b      	mov	r3, r5
 80071a0:	dd08      	ble.n	80071b4 <scalbn+0x8c>
 80071a2:	a111      	add	r1, pc, #68	; (adr r1, 80071e8 <scalbn+0xc0>)
 80071a4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80071a8:	f000 f82c 	bl	8007204 <copysign>
 80071ac:	a30e      	add	r3, pc, #56	; (adr r3, 80071e8 <scalbn+0xc0>)
 80071ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071b2:	e013      	b.n	80071dc <scalbn+0xb4>
 80071b4:	a10e      	add	r1, pc, #56	; (adr r1, 80071f0 <scalbn+0xc8>)
 80071b6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80071ba:	f000 f823 	bl	8007204 <copysign>
 80071be:	a30c      	add	r3, pc, #48	; (adr r3, 80071f0 <scalbn+0xc8>)
 80071c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071c4:	e00a      	b.n	80071dc <scalbn+0xb4>
 80071c6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80071ca:	3236      	adds	r2, #54	; 0x36
 80071cc:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80071d0:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80071d4:	4620      	mov	r0, r4
 80071d6:	4629      	mov	r1, r5
 80071d8:	4b09      	ldr	r3, [pc, #36]	; (8007200 <scalbn+0xd8>)
 80071da:	2200      	movs	r2, #0
 80071dc:	f7f9 f982 	bl	80004e4 <__aeabi_dmul>
 80071e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80071e2:	4620      	mov	r0, r4
 80071e4:	4629      	mov	r1, r5
 80071e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80071e8:	8800759c 	.word	0x8800759c
 80071ec:	7e37e43c 	.word	0x7e37e43c
 80071f0:	c2f8f359 	.word	0xc2f8f359
 80071f4:	01a56e1f 	.word	0x01a56e1f
 80071f8:	43500000 	.word	0x43500000
 80071fc:	ffff3cb0 	.word	0xffff3cb0
 8007200:	3c900000 	.word	0x3c900000

08007204 <copysign>:
 8007204:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 8007208:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800720c:	ea42 0103 	orr.w	r1, r2, r3
 8007210:	4770      	bx	lr
	...

08007214 <__errno>:
 8007214:	4b01      	ldr	r3, [pc, #4]	; (800721c <__errno+0x8>)
 8007216:	6818      	ldr	r0, [r3, #0]
 8007218:	4770      	bx	lr
 800721a:	bf00      	nop
 800721c:	20000078 	.word	0x20000078

08007220 <_sbrk>:
 8007220:	4b04      	ldr	r3, [pc, #16]	; (8007234 <_sbrk+0x14>)
 8007222:	4602      	mov	r2, r0
 8007224:	6819      	ldr	r1, [r3, #0]
 8007226:	b909      	cbnz	r1, 800722c <_sbrk+0xc>
 8007228:	4903      	ldr	r1, [pc, #12]	; (8007238 <_sbrk+0x18>)
 800722a:	6019      	str	r1, [r3, #0]
 800722c:	6818      	ldr	r0, [r3, #0]
 800722e:	4402      	add	r2, r0
 8007230:	601a      	str	r2, [r3, #0]
 8007232:	4770      	bx	lr
 8007234:	200000a8 	.word	0x200000a8
 8007238:	2000017c 	.word	0x2000017c

0800723c <_init>:
 800723c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800723e:	bf00      	nop
 8007240:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007242:	bc08      	pop	{r3}
 8007244:	469e      	mov	lr, r3
 8007246:	4770      	bx	lr

08007248 <_fini>:
 8007248:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800724a:	bf00      	nop
 800724c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800724e:	bc08      	pop	{r3}
 8007250:	469e      	mov	lr, r3
 8007252:	4770      	bx	lr
